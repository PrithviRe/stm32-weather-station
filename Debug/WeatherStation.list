
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b430  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b2c  0800b5c0  0800b5c0  0000c5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0ec  0800c0ec  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c0ec  0800c0ec  0000d0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0f4  0800c0f4  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0f4  0800c0f4  0000d0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0f8  0800c0f8  0000d0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c0fc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe0  200001d8  0800c2d4  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011b8  0800c2d4  0000f1b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dfd9  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c45  00000000  00000000  0002c1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  0002fe28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014e2  00000000  00000000  00031920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029dd4  00000000  00000000  00032e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e50a  00000000  00000000  0005cbd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8139  00000000  00000000  0007b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00173219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008640  00000000  00000000  0017325c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0017b89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b5a8 	.word	0x0800b5a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b5a8 	.word	0x0800b5a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ee2:	d906      	bls.n	8000ef2 <Hex2Num+0x1e>
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b39      	cmp	r3, #57	@ 0x39
 8000ee8:	d803      	bhi.n	8000ef2 <Hex2Num+0x1e>
        return a - '0';
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	3b30      	subs	r3, #48	@ 0x30
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	e014      	b.n	8000f1c <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b60      	cmp	r3, #96	@ 0x60
 8000ef6:	d906      	bls.n	8000f06 <Hex2Num+0x32>
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b66      	cmp	r3, #102	@ 0x66
 8000efc:	d803      	bhi.n	8000f06 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	3b57      	subs	r3, #87	@ 0x57
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	e00a      	b.n	8000f1c <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b40      	cmp	r3, #64	@ 0x40
 8000f0a:	d906      	bls.n	8000f1a <Hex2Num+0x46>
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b46      	cmp	r3, #70	@ 0x46
 8000f10:	d803      	bhi.n	8000f1a <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	3b37      	subs	r3, #55	@ 0x37
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	e000      	b.n	8000f1c <Hex2Num+0x48>
    }

    return 0;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8000f3a:	e012      	b.n	8000f62 <ParseHexNumber+0x3a>
        sum <<= 4;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ffc4 	bl	8000ed4 <Hex2Num>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	4413      	add	r3, r2
 8000f54:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
        done_count++;
 8000f5c:	7bbb      	ldrb	r3, [r7, #14]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f68:	d903      	bls.n	8000f72 <ParseHexNumber+0x4a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b39      	cmp	r3, #57	@ 0x39
 8000f70:	d90f      	bls.n	8000f92 <ParseHexNumber+0x6a>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b60      	cmp	r3, #96	@ 0x60
 8000f78:	d903      	bls.n	8000f82 <ParseHexNumber+0x5a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b66      	cmp	r3, #102	@ 0x66
 8000f80:	d907      	bls.n	8000f92 <ParseHexNumber+0x6a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b40      	cmp	r3, #64	@ 0x40
 8000f88:	d906      	bls.n	8000f98 <ParseHexNumber+0x70>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b46      	cmp	r3, #70	@ 0x46
 8000f90:	d802      	bhi.n	8000f98 <ParseHexNumber+0x70>
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d9d1      	bls.n	8000f3c <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <ParseHexNumber+0x7c>
        *cnt = done_count;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	7bba      	ldrb	r2, [r7, #14]
 8000fa2:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b2d      	cmp	r3, #45	@ 0x2d
 8000fca:	d119      	bne.n	8001000 <ParseNumber+0x52>
        minus = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
        done_count++;
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8000fdc:	e010      	b.n	8001000 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	461a      	mov	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	3b30      	subs	r3, #48	@ 0x30
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
        done_count++;
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b2f      	cmp	r3, #47	@ 0x2f
 8001006:	d903      	bls.n	8001010 <ParseNumber+0x62>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b39      	cmp	r3, #57	@ 0x39
 800100e:	d9e6      	bls.n	8000fde <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <ParseNumber+0x6e>
        *cnt = done_count;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	7bba      	ldrb	r2, [r7, #14]
 800101a:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <ParseNumber+0x7a>
        return 0 - sum;
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	425b      	negs	r3, r3
 8001026:	e000      	b.n	800102a <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8001028:	68bb      	ldr	r3, [r7, #8]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	b087      	sub	sp, #28
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d027      	beq.n	800109c <ParseMAC+0x66>
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d024      	beq.n	800109c <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001052:	e018      	b.n	8001086 <ParseMAC+0x50>
    uint8_t done_count = 1;
 8001054:	2301      	movs	r3, #1
 8001056:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b3a      	cmp	r3, #58	@ 0x3a
 800105e:	d00d      	beq.n	800107c <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	75fa      	strb	r2, [r7, #23]
 8001066:	461a      	mov	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	189c      	adds	r4, r3, r2
 800106c:	f107 0316 	add.w	r3, r7, #22
 8001070:	4619      	mov	r1, r3
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f7ff ff58 	bl	8000f28 <ParseHexNumber>
 8001078:	4603      	mov	r3, r0
 800107a:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 800107c:	7dbb      	ldrb	r3, [r7, #22]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	429a      	cmp	r2, r3
 800108c:	d906      	bls.n	800109c <ParseMAC+0x66>
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	2b05      	cmp	r3, #5
 8001092:	d803      	bhi.n	800109c <ParseMAC+0x66>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1db      	bne.n	8001054 <ParseMAC+0x1e>
   }
  }
}
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd90      	pop	{r4, r7, pc}

080010a4 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d027      	beq.n	800110a <ParseIP+0x66>
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d024      	beq.n	800110a <ParseIP+0x66>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d921      	bls.n	800110a <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 80010c6:	e019      	b.n	80010fc <ParseIP+0x58>
    uint8_t done_count = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80010d2:	d00e      	beq.n	80010f2 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 80010d4:	f107 0316 	add.w	r3, r7, #22
 80010d8:	4619      	mov	r1, r3
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f7ff ff67 	bl	8000fae <ParseNumber>
 80010e0:	4601      	mov	r1, r0
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	75fa      	strb	r2, [r7, #23]
 80010e8:	461a      	mov	r2, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	4413      	add	r3, r2
 80010ee:	b2ca      	uxtb	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 80010f2:	7dbb      	ldrb	r3, [r7, #22]
 80010f4:	461a      	mov	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d803      	bhi.n	800110a <ParseIP+0x66>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1de      	bne.n	80010c8 <ParseIP+0x24>
   }
  }
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	3302      	adds	r3, #2
 8001126:	4940      	ldr	r1, [pc, #256]	@ (8001228 <AT_ParseInfo+0x114>)
 8001128:	4618      	mov	r0, r3
 800112a:	f008 f999 	bl	8009460 <strtok>
 800112e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001130:	e071      	b.n	8001216 <AT_ParseInfo+0x102>
    switch (num++) {
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	72fa      	strb	r2, [r7, #11]
 8001138:	2b06      	cmp	r3, #6
 800113a:	d866      	bhi.n	800120a <AT_ParseInfo+0xf6>
 800113c:	a201      	add	r2, pc, #4	@ (adr r2, 8001144 <AT_ParseInfo+0x30>)
 800113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001142:	bf00      	nop
 8001144:	08001161 	.word	0x08001161
 8001148:	08001175 	.word	0x08001175
 800114c:	0800118d 	.word	0x0800118d
 8001150:	080011a5 	.word	0x080011a5
 8001154:	080011bd 	.word	0x080011bd
 8001158:	080011d5 	.word	0x080011d5
 800115c:	080011e9 	.word	0x080011e9
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	221f      	movs	r2, #31
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	4618      	mov	r0, r3
 8001168:	f008 f966 	bl	8009438 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	77da      	strb	r2, [r3, #31]
      break;
 8001172:	e04b      	b.n	800120c <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3320      	adds	r3, #32
 8001178:	2217      	movs	r2, #23
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	4618      	mov	r0, r3
 800117e:	f008 f95b 	bl	8009438 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      break;
 800118a:	e03f      	b.n	800120c <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3338      	adds	r3, #56	@ 0x38
 8001190:	220f      	movs	r2, #15
 8001192:	68f9      	ldr	r1, [r7, #12]
 8001194:	4618      	mov	r0, r3
 8001196:	f008 f94f 	bl	8009438 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 80011a2:	e033      	b.n	800120c <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3348      	adds	r3, #72	@ 0x48
 80011a8:	220f      	movs	r2, #15
 80011aa:	68f9      	ldr	r1, [r7, #12]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f008 f943 	bl	8009438 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 80011ba:	e027      	b.n	800120c <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3358      	adds	r3, #88	@ 0x58
 80011c0:	220f      	movs	r2, #15
 80011c2:	68f9      	ldr	r1, [r7, #12]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f008 f937 	bl	8009438 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      break;
 80011d2:	e01b      	b.n	800120c <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 80011d4:	2100      	movs	r1, #0
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f7ff fee9 	bl	8000fae <ParseNumber>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 80011e6:	e011      	b.n	800120c <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 80011e8:	4910      	ldr	r1, [pc, #64]	@ (800122c <AT_ParseInfo+0x118>)
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f008 f938 	bl	8009460 <strtok>
 80011f0:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3368      	adds	r3, #104	@ 0x68
 80011f6:	221f      	movs	r2, #31
 80011f8:	68f9      	ldr	r1, [r7, #12]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f008 f91c 	bl	8009438 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
      break;
 8001208:	e000      	b.n	800120c <AT_ParseInfo+0xf8>

    default: break;
 800120a:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800120c:	4906      	ldr	r1, [pc, #24]	@ (8001228 <AT_ParseInfo+0x114>)
 800120e:	2000      	movs	r0, #0
 8001210:	f008 f926 	bl	8009460 <strtok>
 8001214:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d18a      	bne.n	8001132 <AT_ParseInfo+0x1e>
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	0800b5f0 	.word	0x0800b5f0
 800122c:	0800b5f4 	.word	0x0800b5f4

08001230 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3302      	adds	r3, #2
 8001242:	4959      	ldr	r1, [pc, #356]	@ (80013a8 <AT_ParseConnSettings+0x178>)
 8001244:	4618      	mov	r0, r3
 8001246:	f008 f90b 	bl	8009460 <strtok>
 800124a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800124c:	e0a2      	b.n	8001394 <AT_ParseConnSettings+0x164>
    switch (num++) {
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	73fa      	strb	r2, [r7, #15]
 8001254:	2b0b      	cmp	r3, #11
 8001256:	f200 808c 	bhi.w	8001372 <AT_ParseConnSettings+0x142>
 800125a:	a201      	add	r2, pc, #4	@ (adr r2, 8001260 <AT_ParseConnSettings+0x30>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	08001291 	.word	0x08001291
 8001264:	080012a7 	.word	0x080012a7
 8001268:	080012bf 	.word	0x080012bf
 800126c:	080012d3 	.word	0x080012d3
 8001270:	080012e7 	.word	0x080012e7
 8001274:	080012fb 	.word	0x080012fb
 8001278:	0800130b 	.word	0x0800130b
 800127c:	0800131b 	.word	0x0800131b
 8001280:	0800132b 	.word	0x0800132b
 8001284:	0800133b 	.word	0x0800133b
 8001288:	0800134b 	.word	0x0800134b
 800128c:	0800135f 	.word	0x0800135f
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2220      	movs	r2, #32
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	4618      	mov	r0, r3
 8001298:	f008 f8ce 	bl	8009438 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 80012a4:	e066      	b.n	8001374 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	3321      	adds	r3, #33	@ 0x21
 80012aa:	2220      	movs	r2, #32
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f008 f8c2 	bl	8009438 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      break;
 80012bc:	e05a      	b.n	8001374 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80012be:	2100      	movs	r1, #0
 80012c0:	68b8      	ldr	r0, [r7, #8]
 80012c2:	f7ff fe74 	bl	8000fae <ParseNumber>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 80012d0:	e050      	b.n	8001374 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 80012d2:	2100      	movs	r1, #0
 80012d4:	68b8      	ldr	r0, [r7, #8]
 80012d6:	f7ff fe6a 	bl	8000fae <ParseNumber>
 80012da:	4603      	mov	r3, r0
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 80012e4:	e046      	b.n	8001374 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80012e6:	2100      	movs	r1, #0
 80012e8:	68b8      	ldr	r0, [r7, #8]
 80012ea:	f7ff fe60 	bl	8000fae <ParseNumber>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 80012f8:	e03c      	b.n	8001374 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	3348      	adds	r3, #72	@ 0x48
 80012fe:	2204      	movs	r2, #4
 8001300:	4619      	mov	r1, r3
 8001302:	68b8      	ldr	r0, [r7, #8]
 8001304:	f7ff fece 	bl	80010a4 <ParseIP>
      break;
 8001308:	e034      	b.n	8001374 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	334c      	adds	r3, #76	@ 0x4c
 800130e:	2204      	movs	r2, #4
 8001310:	4619      	mov	r1, r3
 8001312:	68b8      	ldr	r0, [r7, #8]
 8001314:	f7ff fec6 	bl	80010a4 <ParseIP>
      break;
 8001318:	e02c      	b.n	8001374 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3350      	adds	r3, #80	@ 0x50
 800131e:	2204      	movs	r2, #4
 8001320:	4619      	mov	r1, r3
 8001322:	68b8      	ldr	r0, [r7, #8]
 8001324:	f7ff febe 	bl	80010a4 <ParseIP>
      break;
 8001328:	e024      	b.n	8001374 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	3354      	adds	r3, #84	@ 0x54
 800132e:	2204      	movs	r2, #4
 8001330:	4619      	mov	r1, r3
 8001332:	68b8      	ldr	r0, [r7, #8]
 8001334:	f7ff feb6 	bl	80010a4 <ParseIP>
      break;
 8001338:	e01c      	b.n	8001374 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3358      	adds	r3, #88	@ 0x58
 800133e:	2204      	movs	r2, #4
 8001340:	4619      	mov	r1, r3
 8001342:	68b8      	ldr	r0, [r7, #8]
 8001344:	f7ff feae 	bl	80010a4 <ParseIP>
      break;
 8001348:	e014      	b.n	8001374 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 800134a:	2100      	movs	r1, #0
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	f7ff fe2e 	bl	8000fae <ParseNumber>
 8001352:	4603      	mov	r3, r0
 8001354:	b2da      	uxtb	r2, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 800135c:	e00a      	b.n	8001374 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 800135e:	2100      	movs	r1, #0
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	f7ff fe24 	bl	8000fae <ParseNumber>
 8001366:	4603      	mov	r3, r0
 8001368:	b2da      	uxtb	r2, r3
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 8001370:	e000      	b.n	8001374 <AT_ParseConnSettings+0x144>

    default:
      break;
 8001372:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001374:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <AT_ParseConnSettings+0x178>)
 8001376:	2000      	movs	r0, #0
 8001378:	f008 f872 	bl	8009460 <strtok>
 800137c:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d007      	beq.n	8001394 <AT_ParseConnSettings+0x164>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3b01      	subs	r3, #1
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b2c      	cmp	r3, #44	@ 0x2c
 800138c:	d102      	bne.n	8001394 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	3301      	adds	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f47f af59 	bne.w	800124e <AT_ParseConnSettings+0x1e>
    }
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	0800b5f0 	.word	0x0800b5f0

080013ac <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d056      	beq.n	8001478 <AT_ExecuteCommand+0xcc>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d051      	beq.n	8001478 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	f7fe ff48 	bl	8000270 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b299      	uxth	r1, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	@ 0x6a0
 80013ea:	461a      	mov	r2, r3
 80013ec:	68b8      	ldr	r0, [r7, #8]
 80013ee:	47a0      	blx	r4
 80013f0:	4603      	mov	r3, r0
 80013f2:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	dd3e      	ble.n	8001478 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 8001406:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	4798      	blx	r3
 800140e:	4603      	mov	r3, r0
 8001410:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001412:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001416:	2b00      	cmp	r3, #0
 8001418:	dd27      	ble.n	800146a <AT_ExecuteCommand+0xbe>
 800141a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800141e:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8001422:	dc22      	bgt.n	800146a <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001424:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001428:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 800142c:	d105      	bne.n	800143a <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 800142e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001432:	b29b      	uxth	r3, r3
 8001434:	3b01      	subs	r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800143a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8001446:	490f      	ldr	r1, [pc, #60]	@ (8001484 <AT_ExecuteCommand+0xd8>)
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f008 f865 	bl	8009518 <strstr>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	e010      	b.n	800147a <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8001458:	490b      	ldr	r1, [pc, #44]	@ (8001488 <AT_ExecuteCommand+0xdc>)
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f008 f85c 	bl	8009518 <strstr>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001466:	2305      	movs	r3, #5
 8001468:	e007      	b.n	800147a <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 800146a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800146e:	f113 0f04 	cmn.w	r3, #4
 8001472:	d101      	bne.n	8001478 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001474:	2306      	movs	r3, #6
 8001476:	e000      	b.n	800147a <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001478:	2304      	movs	r3, #4
}
 800147a:	4618      	mov	r0, r3
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd90      	pop	{r4, r7, pc}
 8001482:	bf00      	nop
 8001484:	0800b608 	.word	0x0800b608
 8001488:	0800b614 	.word	0x0800b614

0800148c <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7fe fee2 	bl	8000270 <strlen>
 80014ac:	4603      	mov	r3, r0
 80014ae:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80014b0:	8a7b      	ldrh	r3, [r7, #18]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <AT_RequestSendData+0x32>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e05d      	b.n	800157a <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d057      	beq.n	8001578 <AT_RequestSendData+0xec>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d052      	beq.n	8001578 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 80014de:	8a79      	ldrh	r1, [r7, #18]
 80014e0:	68b8      	ldr	r0, [r7, #8]
 80014e2:	4798      	blx	r3
 80014e4:	4603      	mov	r3, r0
 80014e6:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 80014e8:	8a3a      	ldrh	r2, [r7, #16]
 80014ea:	8a7b      	ldrh	r3, [r7, #18]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d143      	bne.n	8001578 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 80014fc:	8879      	ldrh	r1, [r7, #2]
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	4798      	blx	r3
 8001502:	4603      	mov	r3, r0
 8001504:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001506:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	429a      	cmp	r2, r3
 800150e:	d131      	bne.n	8001574 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 800151c:	2100      	movs	r1, #0
 800151e:	6a38      	ldr	r0, [r7, #32]
 8001520:	4798      	blx	r3
 8001522:	4603      	mov	r3, r0
 8001524:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001526:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800152a:	2b00      	cmp	r3, #0
 800152c:	dd19      	ble.n	8001562 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 800152e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001532:	6a3a      	ldr	r2, [r7, #32]
 8001534:	4413      	add	r3, r2
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800153a:	4912      	ldr	r1, [pc, #72]	@ (8001584 <AT_RequestSendData+0xf8>)
 800153c:	6a38      	ldr	r0, [r7, #32]
 800153e:	f007 ffeb 	bl	8009518 <strstr>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	e016      	b.n	800157a <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800154c:	490e      	ldr	r1, [pc, #56]	@ (8001588 <AT_RequestSendData+0xfc>)
 800154e:	6a38      	ldr	r0, [r7, #32]
 8001550:	f007 ffe2 	bl	8009518 <strstr>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800155a:	2305      	movs	r3, #5
 800155c:	e00d      	b.n	800157a <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800155e:	2302      	movs	r3, #2
 8001560:	e00b      	b.n	800157a <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001562:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001566:	f113 0f04 	cmn.w	r3, #4
 800156a:	d101      	bne.n	8001570 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800156c:	2306      	movs	r3, #6
 800156e:	e004      	b.n	800157a <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8001570:	2302      	movs	r3, #2
 8001572:	e002      	b.n	800157a <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001574:	2302      	movs	r3, #2
 8001576:	e000      	b.n	800157a <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8001578:	2304      	movs	r3, #4
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	0800b608 	.word	0x0800b608
 8001588:	0800b614 	.word	0x0800b614

0800158c <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80015a0:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 8087 	beq.w	80016bc <AT_RequestReceiveData+0x130>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 8081 	beq.w	80016bc <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 80015c0:	68b8      	ldr	r0, [r7, #8]
 80015c2:	f7fe fe55 	bl	8000270 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b299      	uxth	r1, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	@ 0x6a0
 80015d0:	461a      	mov	r2, r3
 80015d2:	68b8      	ldr	r0, [r7, #8]
 80015d4:	47a0      	blx	r4
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	dd6f      	ble.n	80016bc <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 80015e8:	2100      	movs	r1, #0
 80015ea:	6938      	ldr	r0, [r7, #16]
 80015ec:	4798      	blx	r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b0d      	cmp	r3, #13
 80015f8:	d104      	bne.n	8001604 <AT_RequestReceiveData+0x78>
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	3301      	adds	r3, #1
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b0a      	cmp	r3, #10
 8001602:	d001      	beq.n	8001608 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 8001604:	2304      	movs	r3, #4
 8001606:	e05a      	b.n	80016be <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3b02      	subs	r3, #2
 800160c:	617b      	str	r3, [r7, #20]
    p += 2;
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	3302      	adds	r3, #2
 8001612:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2b07      	cmp	r3, #7
 8001618:	d94a      	bls.n	80016b0 <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 800161a:	e002      	b.n	8001622 <AT_RequestReceiveData+0x96>
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3b01      	subs	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <AT_RequestReceiveData+0xaa>
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3b01      	subs	r3, #1
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b15      	cmp	r3, #21
 8001634:	d0f2      	beq.n	800161c <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4413      	add	r3, r2
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3b08      	subs	r3, #8
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4413      	add	r3, r2
 8001648:	491f      	ldr	r1, [pc, #124]	@ (80016c8 <AT_RequestReceiveData+0x13c>)
 800164a:	4618      	mov	r0, r3
 800164c:	f007 ff64 	bl	8009518 <strstr>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d016      	beq.n	8001684 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	b29b      	uxth	r3, r3
 800165a:	3b08      	subs	r3, #8
 800165c:	b29a      	uxth	r2, r3
 800165e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001660:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 8001662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	429a      	cmp	r2, r3
 800166a:	d202      	bcs.n	8001672 <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 800166c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 8001672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	6939      	ldr	r1, [r7, #16]
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f007 ffd9 	bl	8009632 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	e01c      	b.n	80016be <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3b04      	subs	r3, #4
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4413      	add	r3, r2
 800168c:	2204      	movs	r2, #4
 800168e:	490f      	ldr	r1, [pc, #60]	@ (80016cc <AT_RequestReceiveData+0x140>)
 8001690:	4618      	mov	r0, r3
 8001692:	f007 feb9 	bl	8009408 <memcmp>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d104      	bne.n	80016a6 <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 800169c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169e:	2200      	movs	r2, #0
 80016a0:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80016a2:	2305      	movs	r3, #5
 80016a4:	e00b      	b.n	80016be <AT_RequestReceiveData+0x132>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 80016a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a8:	2200      	movs	r2, #0
 80016aa:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80016ac:	2305      	movs	r3, #5
 80016ae:	e006      	b.n	80016be <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f113 0f04 	cmn.w	r3, #4
 80016b6:	d101      	bne.n	80016bc <AT_RequestReceiveData+0x130>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80016b8:	2306      	movs	r3, #6
 80016ba:	e000      	b.n	80016be <AT_RequestReceiveData+0x132>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80016bc:	2304      	movs	r3, #4
}
 80016be:	4618      	mov	r0, r3
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd90      	pop	{r4, r7, pc}
 80016c6:	bf00      	nop
 80016c8:	0800b608 	.word	0x0800b608
 80016cc:	0800b61c 	.word	0x0800b61c

080016d0 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80016d8:	2302      	movs	r3, #2
 80016da:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016e2:	f8c3 26a0 	str.w	r2, [r3, #1696]	@ 0x6a0

  if (Obj->fops.IO_Init != NULL) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01b      	beq.n	8001728 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80016f6:	2000      	movs	r0, #0
 80016f8:	4798      	blx	r3
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d113      	bne.n	8001728 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001706:	461a      	mov	r2, r3
 8001708:	490a      	ldr	r1, [pc, #40]	@ (8001734 <ES_WIFI_Init+0x64>)
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fe4e 	bl	80013ac <AT_ExecuteCommand>
 8001710:	4603      	mov	r3, r0
 8001712:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001720:	4619      	mov	r1, r3
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fcf6 	bl	8001114 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	0800b624 	.word	0x0800b624

08001738 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00b      	beq.n	8001764 <ES_WIFI_RegisterBusIO+0x2c>
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d008      	beq.n	8001764 <ES_WIFI_RegisterBusIO+0x2c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <ES_WIFI_RegisterBusIO+0x2c>
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <ES_WIFI_RegisterBusIO+0x2c>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001764:	2302      	movs	r3, #2
 8001766:	e014      	b.n	8001792 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	4932      	ldr	r1, [pc, #200]	@ (8001880 <ES_WIFI_Connect+0xe0>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f007 fd2b 	bl	8009214 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80017ca:	461a      	mov	r2, r3
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f7ff fded 	bl	80013ac <AT_ExecuteCommand>
 80017d2:	4603      	mov	r3, r0
 80017d4:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d14b      	bne.n	8001874 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4927      	ldr	r1, [pc, #156]	@ (8001884 <ES_WIFI_Connect+0xe4>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f007 fd14 	bl	8009214 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80017f8:	461a      	mov	r2, r3
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f7ff fdd6 	bl	80013ac <AT_ExecuteCommand>
 8001800:	4603      	mov	r3, r0
 8001802:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d134      	bne.n	8001874 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	491b      	ldr	r1, [pc, #108]	@ (8001888 <ES_WIFI_Connect+0xe8>)
 800181c:	4618      	mov	r0, r3
 800181e:	f007 fcf9 	bl	8009214 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800182e:	461a      	mov	r2, r3
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7ff fdbb 	bl	80013ac <AT_ExecuteCommand>
 8001836:	4603      	mov	r3, r0
 8001838:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d119      	bne.n	8001874 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001846:	4911      	ldr	r1, [pc, #68]	@ (800188c <ES_WIFI_Connect+0xec>)
 8001848:	4618      	mov	r0, r3
 800184a:	f007 fce3 	bl	8009214 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800185a:	461a      	mov	r2, r3
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff fda5 	bl	80013ac <AT_ExecuteCommand>
 8001862:	4603      	mov	r3, r0
 8001864:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d103      	bne.n	8001874 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001874:	7dfb      	ldrb	r3, [r7, #23]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	0800b63c 	.word	0x0800b63c
 8001884:	0800b644 	.word	0x0800b644
 8001888:	0800b64c 	.word	0x0800b64c
 800188c:	0800b654 	.word	0x0800b654

08001890 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800189e:	4910      	ldr	r1, [pc, #64]	@ (80018e0 <ES_WIFI_GetNetworkSettings+0x50>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f007 fcb7 	bl	8009214 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80018b2:	461a      	mov	r2, r3
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fd79 	bl	80013ac <AT_ExecuteCommand>
 80018ba:	4603      	mov	r3, r0
 80018bc:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d108      	bne.n	80018d6 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	338d      	adds	r3, #141	@ 0x8d
 80018ce:	4619      	mov	r1, r3
 80018d0:	4610      	mov	r0, r2
 80018d2:	f7ff fcad 	bl	8001230 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	0800b660 	.word	0x0800b660

080018e4 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80018f8:	4913      	ldr	r1, [pc, #76]	@ (8001948 <ES_WIFI_GetMACAddress+0x64>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f007 fc8a 	bl	8009214 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800190c:	461a      	mov	r2, r3
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff fd4c 	bl	80013ac <AT_ExecuteCommand>
 8001914:	4603      	mov	r3, r0
 8001916:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001918:	7dfb      	ldrb	r3, [r7, #23]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10e      	bne.n	800193c <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001924:	3302      	adds	r3, #2
 8001926:	4909      	ldr	r1, [pc, #36]	@ (800194c <ES_WIFI_GetMACAddress+0x68>)
 8001928:	4618      	mov	r0, r3
 800192a:	f007 fd99 	bl	8009460 <strtok>
 800192e:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	461a      	mov	r2, r3
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6938      	ldr	r0, [r7, #16]
 8001938:	f7ff fb7d 	bl	8001036 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 800193c:	7dfb      	ldrb	r3, [r7, #23]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	0800b6b0 	.word	0x0800b6b0
 800194c:	0800b6b4 	.word	0x0800b6b4

08001950 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b087      	sub	sp, #28
 8001954:	af02      	add	r7, sp, #8
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <ES_WIFI_StartClientConnection+0x1e>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d105      	bne.n	800197a <ES_WIFI_StartClientConnection+0x2a>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	885b      	ldrh	r3, [r3, #2]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <ES_WIFI_StartClientConnection+0x2a>
 8001976:	2302      	movs	r3, #2
 8001978:	e0c1      	b.n	8001afe <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	785b      	ldrb	r3, [r3, #1]
 8001984:	461a      	mov	r2, r3
 8001986:	4960      	ldr	r1, [pc, #384]	@ (8001b08 <ES_WIFI_StartClientConnection+0x1b8>)
 8001988:	f007 fc44 	bl	8009214 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001998:	461a      	mov	r2, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff fd06 	bl	80013ac <AT_ExecuteCommand>
 80019a0:	4603      	mov	r3, r0
 80019a2:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d114      	bne.n	80019d4 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4955      	ldr	r1, [pc, #340]	@ (8001b0c <ES_WIFI_StartClientConnection+0x1bc>)
 80019b8:	f007 fc2c 	bl	8009214 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80019c8:	461a      	mov	r2, r3
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fcee 	bl	80013ac <AT_ExecuteCommand>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d114      	bne.n	8001a04 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	889b      	ldrh	r3, [r3, #4]
 80019e4:	461a      	mov	r2, r3
 80019e6:	494a      	ldr	r1, [pc, #296]	@ (8001b10 <ES_WIFI_StartClientConnection+0x1c0>)
 80019e8:	f007 fc14 	bl	8009214 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80019f8:	461a      	mov	r2, r3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fcd6 	bl	80013ac <AT_ExecuteCommand>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d11c      	bne.n	8001a44 <ES_WIFI_StartClientConnection+0xf4>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <ES_WIFI_StartClientConnection+0xca>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d114      	bne.n	8001a44 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	885b      	ldrh	r3, [r3, #2]
 8001a24:	461a      	mov	r2, r3
 8001a26:	493b      	ldr	r1, [pc, #236]	@ (8001b14 <ES_WIFI_StartClientConnection+0x1c4>)
 8001a28:	f007 fbf4 	bl	8009214 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a38:	461a      	mov	r2, r3
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fcb6 	bl	80013ac <AT_ExecuteCommand>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d128      	bne.n	8001a9c <ES_WIFI_StartClientConnection+0x14c>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <ES_WIFI_StartClientConnection+0x10a>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d120      	bne.n	8001a9c <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	799b      	ldrb	r3, [r3, #6]
 8001a64:	4619      	mov	r1, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	79db      	ldrb	r3, [r3, #7]
 8001a6a:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001a70:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	9200      	str	r2, [sp, #0]
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	460a      	mov	r2, r1
 8001a7e:	4926      	ldr	r1, [pc, #152]	@ (8001b18 <ES_WIFI_StartClientConnection+0x1c8>)
 8001a80:	f007 fbc8 	bl	8009214 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a90:	461a      	mov	r2, r3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fc8a 	bl	80013ac <AT_ExecuteCommand>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d116      	bne.n	8001ad0 <ES_WIFI_StartClientConnection+0x180>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d112      	bne.n	8001ad0 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ab0:	491a      	ldr	r1, [pc, #104]	@ (8001b1c <ES_WIFI_StartClientConnection+0x1cc>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f007 fbae 	bl	8009214 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fc70 	bl	80013ac <AT_ExecuteCommand>
 8001acc:	4603      	mov	r3, r0
 8001ace:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d112      	bne.n	8001afc <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001adc:	4910      	ldr	r1, [pc, #64]	@ (8001b20 <ES_WIFI_StartClientConnection+0x1d0>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f007 fb98 	bl	8009214 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001af0:	461a      	mov	r2, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fc5a 	bl	80013ac <AT_ExecuteCommand>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd90      	pop	{r4, r7, pc}
 8001b06:	bf00      	nop
 8001b08:	0800b728 	.word	0x0800b728
 8001b0c:	0800b730 	.word	0x0800b730
 8001b10:	0800b738 	.word	0x0800b738
 8001b14:	0800b740 	.word	0x0800b740
 8001b18:	0800b748 	.word	0x0800b748
 8001b1c:	0800b758 	.word	0x0800b758
 8001b20:	0800b760 	.word	0x0800b760

08001b24 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	785b      	ldrb	r3, [r3, #1]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4915      	ldr	r1, [pc, #84]	@ (8001b90 <ES_WIFI_StopClientConnection+0x6c>)
 8001b3c:	f007 fb6a 	bl	8009214 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fc2c 	bl	80013ac <AT_ExecuteCommand>
 8001b54:	4603      	mov	r3, r0
 8001b56:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d112      	bne.n	8001b84 <ES_WIFI_StopClientConnection+0x60>
  {
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001b64:	490b      	ldr	r1, [pc, #44]	@ (8001b94 <ES_WIFI_StopClientConnection+0x70>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f007 fb54 	bl	8009214 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fc16 	bl	80013ac <AT_ExecuteCommand>
 8001b80:	4603      	mov	r3, r0
 8001b82:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();

  return ret;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	0800b728 	.word	0x0800b728
 8001b94:	0800b768 	.word	0x0800b768

08001b98 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	72fb      	strb	r3, [r7, #11]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001bac:	2302      	movs	r3, #2
 8001bae:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e001      	b.n	8001bc0 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8001bc0:	893b      	ldrh	r3, [r7, #8]
 8001bc2:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001bc6:	d302      	bcc.n	8001bce <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8001bc8:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8001bcc:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	893a      	ldrh	r2, [r7, #8]
 8001bd2:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001bda:	7afa      	ldrb	r2, [r7, #11]
 8001bdc:	493c      	ldr	r1, [pc, #240]	@ (8001cd0 <ES_WIFI_SendData+0x138>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	f007 fb18 	bl	8009214 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f7ff fbda 	bl	80013ac <AT_ExecuteCommand>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 8001bfc:	7cfb      	ldrb	r3, [r7, #19]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d154      	bne.n	8001cac <ES_WIFI_SendData+0x114>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	4932      	ldr	r1, [pc, #200]	@ (8001cd4 <ES_WIFI_SendData+0x13c>)
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f007 fb01 	bl	8009214 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f7ff fbc3 	bl	80013ac <AT_ExecuteCommand>
 8001c26:	4603      	mov	r3, r0
 8001c28:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8001c2a:	7cfb      	ldrb	r3, [r7, #19]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d136      	bne.n	8001c9e <ES_WIFI_SendData+0x106>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001c36:	893a      	ldrh	r2, [r7, #8]
 8001c38:	4927      	ldr	r1, [pc, #156]	@ (8001cd8 <ES_WIFI_SendData+0x140>)
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f007 faea 	bl	8009214 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001c4c:	893a      	ldrh	r2, [r7, #8]
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	4613      	mov	r3, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7ff fc19 	bl	800148c <AT_RequestSendData>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 8001c5e:	7cfb      	ldrb	r3, [r7, #19]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d115      	bne.n	8001c90 <ES_WIFI_SendData+0xf8>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001c6a:	491c      	ldr	r1, [pc, #112]	@ (8001cdc <ES_WIFI_SendData+0x144>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f007 fc53 	bl	8009518 <strstr>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01f      	beq.n	8001cb8 <ES_WIFI_SendData+0x120>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001c7e:	f640 1202 	movw	r2, #2306	@ 0x902
 8001c82:	4917      	ldr	r1, [pc, #92]	@ (8001ce0 <ES_WIFI_SendData+0x148>)
 8001c84:	4817      	ldr	r0, [pc, #92]	@ (8001ce4 <ES_WIFI_SendData+0x14c>)
 8001c86:	f007 fa55 	bl	8009134 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	74fb      	strb	r3, [r7, #19]
 8001c8e:	e013      	b.n	8001cb8 <ES_WIFI_SendData+0x120>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8001c90:	f640 1208 	movw	r2, #2312	@ 0x908
 8001c94:	4912      	ldr	r1, [pc, #72]	@ (8001ce0 <ES_WIFI_SendData+0x148>)
 8001c96:	4814      	ldr	r0, [pc, #80]	@ (8001ce8 <ES_WIFI_SendData+0x150>)
 8001c98:	f007 fa4c 	bl	8009134 <iprintf>
 8001c9c:	e00c      	b.n	8001cb8 <ES_WIFI_SendData+0x120>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8001c9e:	f640 120d 	movw	r2, #2317	@ 0x90d
 8001ca2:	490f      	ldr	r1, [pc, #60]	@ (8001ce0 <ES_WIFI_SendData+0x148>)
 8001ca4:	4811      	ldr	r0, [pc, #68]	@ (8001cec <ES_WIFI_SendData+0x154>)
 8001ca6:	f007 fa45 	bl	8009134 <iprintf>
 8001caa:	e005      	b.n	8001cb8 <ES_WIFI_SendData+0x120>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8001cac:	f640 1212 	movw	r2, #2322	@ 0x912
 8001cb0:	490b      	ldr	r1, [pc, #44]	@ (8001ce0 <ES_WIFI_SendData+0x148>)
 8001cb2:	480f      	ldr	r0, [pc, #60]	@ (8001cf0 <ES_WIFI_SendData+0x158>)
 8001cb4:	f007 fa3e 	bl	8009134 <iprintf>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8001cb8:	7cfb      	ldrb	r3, [r7, #19]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d102      	bne.n	8001cc4 <ES_WIFI_SendData+0x12c>
  {
    *SentLen = 0;
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 8001cc4:	7cfb      	ldrb	r3, [r7, #19]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	0800b728 	.word	0x0800b728
 8001cd4:	0800b8ac 	.word	0x0800b8ac
 8001cd8:	0800b8b4 	.word	0x0800b8b4
 8001cdc:	0800b8c0 	.word	0x0800b8c0
 8001ce0:	0800b7b0 	.word	0x0800b7b0
 8001ce4:	0800b8c8 	.word	0x0800b8c8
 8001ce8:	0800b8ec 	.word	0x0800b8ec
 8001cec:	0800b910 	.word	0x0800b910
 8001cf0:	0800b92c 	.word	0x0800b92c

08001cf4 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	460b      	mov	r3, r1
 8001d02:	72fb      	strb	r3, [r7, #11]
 8001d04:	4613      	mov	r3, r2
 8001d06:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8001d12:	2301      	movs	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	e001      	b.n	8001d1c <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8001d1c:	893b      	ldrh	r3, [r7, #8]
 8001d1e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001d22:	d87e      	bhi.n	8001e22 <ES_WIFI_ReceiveData+0x12e>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d2a:	7afa      	ldrb	r2, [r7, #11]
 8001d2c:	493f      	ldr	r1, [pc, #252]	@ (8001e2c <ES_WIFI_ReceiveData+0x138>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f007 fa70 	bl	8009214 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d40:	461a      	mov	r2, r3
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff fb32 	bl	80013ac <AT_ExecuteCommand>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8001d4c:	7cfb      	ldrb	r3, [r7, #19]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d15c      	bne.n	8001e0c <ES_WIFI_ReceiveData+0x118>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d58:	893a      	ldrh	r2, [r7, #8]
 8001d5a:	4935      	ldr	r1, [pc, #212]	@ (8001e30 <ES_WIFI_ReceiveData+0x13c>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f007 fa59 	bl	8009214 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f7ff fb1b 	bl	80013ac <AT_ExecuteCommand>
 8001d76:	4603      	mov	r3, r0
 8001d78:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 8001d7a:	7cfb      	ldrb	r3, [r7, #19]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d13b      	bne.n	8001df8 <ES_WIFI_ReceiveData+0x104>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	492a      	ldr	r1, [pc, #168]	@ (8001e34 <ES_WIFI_ReceiveData+0x140>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f007 fa42 	bl	8009214 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff fb04 	bl	80013ac <AT_ExecuteCommand>
 8001da4:	4603      	mov	r3, r0
 8001da6:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 8001da8:	7cfb      	ldrb	r3, [r7, #19]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d11d      	bne.n	8001dea <ES_WIFI_ReceiveData+0xf6>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001db4:	4920      	ldr	r1, [pc, #128]	@ (8001e38 <ES_WIFI_ReceiveData+0x144>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f007 fa2c 	bl	8009214 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001dc2:	893a      	ldrh	r2, [r7, #8]
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff fbdd 	bl	800158c <AT_RequestReceiveData>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8001dd6:	7cfb      	ldrb	r3, [r7, #19]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d022      	beq.n	8001e22 <ES_WIFI_ReceiveData+0x12e>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 8001ddc:	f640 12aa 	movw	r2, #2474	@ 0x9aa
 8001de0:	4916      	ldr	r1, [pc, #88]	@ (8001e3c <ES_WIFI_ReceiveData+0x148>)
 8001de2:	4817      	ldr	r0, [pc, #92]	@ (8001e40 <ES_WIFI_ReceiveData+0x14c>)
 8001de4:	f007 f9a6 	bl	8009134 <iprintf>
 8001de8:	e01b      	b.n	8001e22 <ES_WIFI_ReceiveData+0x12e>
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 8001dea:	f640 12af 	movw	r2, #2479	@ 0x9af
 8001dee:	4913      	ldr	r1, [pc, #76]	@ (8001e3c <ES_WIFI_ReceiveData+0x148>)
 8001df0:	4814      	ldr	r0, [pc, #80]	@ (8001e44 <ES_WIFI_ReceiveData+0x150>)
 8001df2:	f007 f99f 	bl	8009134 <iprintf>
 8001df6:	e014      	b.n	8001e22 <ES_WIFI_ReceiveData+0x12e>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
 8001df8:	f640 12b4 	movw	r2, #2484	@ 0x9b4
 8001dfc:	490f      	ldr	r1, [pc, #60]	@ (8001e3c <ES_WIFI_ReceiveData+0x148>)
 8001dfe:	4812      	ldr	r0, [pc, #72]	@ (8001e48 <ES_WIFI_ReceiveData+0x154>)
 8001e00:	f007 f998 	bl	8009134 <iprintf>
        *Receivedlen = 0;
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	2200      	movs	r2, #0
 8001e08:	801a      	strh	r2, [r3, #0]
 8001e0a:	e00a      	b.n	8001e22 <ES_WIFI_ReceiveData+0x12e>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
 8001e0c:	f640 12ba 	movw	r2, #2490	@ 0x9ba
 8001e10:	490a      	ldr	r1, [pc, #40]	@ (8001e3c <ES_WIFI_ReceiveData+0x148>)
 8001e12:	480e      	ldr	r0, [pc, #56]	@ (8001e4c <ES_WIFI_ReceiveData+0x158>)
 8001e14:	f007 f98e 	bl	8009134 <iprintf>
      issue15++;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <ES_WIFI_ReceiveData+0x15c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e50 <ES_WIFI_ReceiveData+0x15c>)
 8001e20:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8001e22:	7cfb      	ldrb	r3, [r7, #19]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	0800b728 	.word	0x0800b728
 8001e30:	0800b960 	.word	0x0800b960
 8001e34:	0800b968 	.word	0x0800b968
 8001e38:	0800b970 	.word	0x0800b970
 8001e3c:	0800b7b0 	.word	0x0800b7b0
 8001e40:	0800b974 	.word	0x0800b974
 8001e44:	0800b99c 	.word	0x0800b99c
 8001e48:	0800b9bc 	.word	0x0800b9bc
 8001e4c:	0800b9e4 	.word	0x0800b9e4
 8001e50:	200001f4 	.word	0x200001f4

08001e54 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	@ 0x30
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8001e5c:	4b57      	ldr	r3, [pc, #348]	@ (8001fbc <SPI_WIFI_MspInit+0x168>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e60:	4a56      	ldr	r2, [pc, #344]	@ (8001fbc <SPI_WIFI_MspInit+0x168>)
 8001e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e68:	4b54      	ldr	r3, [pc, #336]	@ (8001fbc <SPI_WIFI_MspInit+0x168>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e74:	4b51      	ldr	r3, [pc, #324]	@ (8001fbc <SPI_WIFI_MspInit+0x168>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e78:	4a50      	ldr	r2, [pc, #320]	@ (8001fbc <SPI_WIFI_MspInit+0x168>)
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e80:	4b4e      	ldr	r3, [pc, #312]	@ (8001fbc <SPI_WIFI_MspInit+0x168>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001fbc <SPI_WIFI_MspInit+0x168>)
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e90:	4a4a      	ldr	r2, [pc, #296]	@ (8001fbc <SPI_WIFI_MspInit+0x168>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e98:	4b48      	ldr	r3, [pc, #288]	@ (8001fbc <SPI_WIFI_MspInit+0x168>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea4:	4b45      	ldr	r3, [pc, #276]	@ (8001fbc <SPI_WIFI_MspInit+0x168>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea8:	4a44      	ldr	r2, [pc, #272]	@ (8001fbc <SPI_WIFI_MspInit+0x168>)
 8001eaa:	f043 0310 	orr.w	r3, r3, #16
 8001eae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb0:	4b42      	ldr	r3, [pc, #264]	@ (8001fbc <SPI_WIFI_MspInit+0x168>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ec2:	483f      	ldr	r0, [pc, #252]	@ (8001fc0 <SPI_WIFI_MspInit+0x16c>)
 8001ec4:	f002 fb00 	bl	80044c8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001ec8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ecc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4837      	ldr	r0, [pc, #220]	@ (8001fc0 <SPI_WIFI_MspInit+0x16c>)
 8001ee2:	f002 f83b 	bl	8003f5c <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001eea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001eee:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	4831      	ldr	r0, [pc, #196]	@ (8001fc4 <SPI_WIFI_MspInit+0x170>)
 8001f00:	f002 f82c 	bl	8003f5c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001f04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f08:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4828      	ldr	r0, [pc, #160]	@ (8001fc4 <SPI_WIFI_MspInit+0x170>)
 8001f22:	f002 f81b 	bl	8003f5c <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001f26:	2201      	movs	r2, #1
 8001f28:	2101      	movs	r1, #1
 8001f2a:	4826      	ldr	r0, [pc, #152]	@ (8001fc4 <SPI_WIFI_MspInit+0x170>)
 8001f2c:	f002 facc 	bl	80044c8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8001f30:	2301      	movs	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	481f      	ldr	r0, [pc, #124]	@ (8001fc4 <SPI_WIFI_MspInit+0x170>)
 8001f48:	f002 f808 	bl	8003f5c <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001f4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001f5e:	2306      	movs	r3, #6
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	4817      	ldr	r0, [pc, #92]	@ (8001fc8 <SPI_WIFI_MspInit+0x174>)
 8001f6a:	f001 fff7 	bl	8003f5c <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001f6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f72:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001f80:	2306      	movs	r3, #6
 8001f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480f      	ldr	r0, [pc, #60]	@ (8001fc8 <SPI_WIFI_MspInit+0x174>)
 8001f8c:	f001 ffe6 	bl	8003f5c <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001f90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f94:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001fa2:	2306      	movs	r3, #6
 8001fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4619      	mov	r1, r3
 8001fac:	4806      	ldr	r0, [pc, #24]	@ (8001fc8 <SPI_WIFI_MspInit+0x174>)
 8001fae:	f001 ffd5 	bl	8003f5c <HAL_GPIO_Init>
}
 8001fb2:	bf00      	nop
 8001fb4:	3730      	adds	r7, #48	@ 0x30
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	48000400 	.word	0x48000400
 8001fc4:	48001000 	.word	0x48001000
 8001fc8:	48000800 	.word	0x48000800

08001fcc <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d145      	bne.n	800206c <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8001fe0:	4b27      	ldr	r3, [pc, #156]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 8001fe2:	4a28      	ldr	r2, [pc, #160]	@ (8002084 <SPI_WIFI_Init+0xb8>)
 8001fe4:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001fe6:	4826      	ldr	r0, [pc, #152]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 8001fe8:	f7ff ff34 	bl	8001e54 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001fec:	4b24      	ldr	r3, [pc, #144]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 8001fee:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ff2:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001ff4:	4b22      	ldr	r3, [pc, #136]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 8001ffc:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002000:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002002:	4b1f      	ldr	r3, [pc, #124]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002008:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 800200a:	2200      	movs	r2, #0
 800200c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800200e:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 8002010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002014:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8002016:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 8002018:	2210      	movs	r2, #16
 800201a:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800201c:	4b18      	ldr	r3, [pc, #96]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002022:	4b17      	ldr	r3, [pc, #92]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002028:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 800202a:	2200      	movs	r2, #0
 800202c:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 800202e:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 8002030:	2200      	movs	r2, #0
 8002032:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8002034:	4812      	ldr	r0, [pc, #72]	@ (8002080 <SPI_WIFI_Init+0xb4>)
 8002036:	f004 f8f3 	bl	8006220 <HAL_SPI_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	e018      	b.n	8002078 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	2007      	movs	r0, #7
 800204c:	f001 fe43 	bl	8003cd6 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8002050:	2007      	movs	r0, #7
 8002052:	f001 fe5c 	bl	8003d0e <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2033      	movs	r0, #51	@ 0x33
 800205c:	f001 fe3b 	bl	8003cd6 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8002060:	2033      	movs	r0, #51	@ 0x33
 8002062:	f001 fe54 	bl	8003d0e <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8002066:	200a      	movs	r0, #10
 8002068:	f000 fa08 	bl	800247c <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 800206c:	f000 f80c 	bl	8002088 <SPI_WIFI_ResetModule>
 8002070:	4603      	mov	r3, r0
 8002072:	73fb      	strb	r3, [r7, #15]

  return rc;
 8002074:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	200001f8 	.word	0x200001f8
 8002084:	40003c00 	.word	0x40003c00

08002088 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800208e:	f001 fd17 	bl	8003ac0 <HAL_GetTick>
 8002092:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8002098:	2200      	movs	r2, #0
 800209a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800209e:	4835      	ldr	r0, [pc, #212]	@ (8002174 <SPI_WIFI_ResetModule+0xec>)
 80020a0:	f002 fa12 	bl	80044c8 <HAL_GPIO_WritePin>
 80020a4:	200a      	movs	r0, #10
 80020a6:	f001 fd17 	bl	8003ad8 <HAL_Delay>
 80020aa:	2201      	movs	r2, #1
 80020ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020b0:	4830      	ldr	r0, [pc, #192]	@ (8002174 <SPI_WIFI_ResetModule+0xec>)
 80020b2:	f002 fa09 	bl	80044c8 <HAL_GPIO_WritePin>
 80020b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020ba:	f001 fd0d 	bl	8003ad8 <HAL_Delay>
  WIFI_ENABLE_NSS();
 80020be:	2200      	movs	r2, #0
 80020c0:	2101      	movs	r1, #1
 80020c2:	482c      	ldr	r0, [pc, #176]	@ (8002174 <SPI_WIFI_ResetModule+0xec>)
 80020c4:	f002 fa00 	bl	80044c8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80020c8:	200f      	movs	r0, #15
 80020ca:	f000 f9d7 	bl	800247c <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 80020ce:	e02b      	b.n	8002128 <SPI_WIFI_ResetModule+0xa0>
  {
    if (count > 4)
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d907      	bls.n	80020e6 <SPI_WIFI_ResetModule+0x5e>
    {
      WIFI_DISABLE_NSS();
 80020d6:	2201      	movs	r2, #1
 80020d8:	2101      	movs	r1, #1
 80020da:	4826      	ldr	r0, [pc, #152]	@ (8002174 <SPI_WIFI_ResetModule+0xec>)
 80020dc:	f002 f9f4 	bl	80044c8 <HAL_GPIO_WritePin>
      return -1;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
 80020e4:	e042      	b.n	800216c <SPI_WIFI_ResetModule+0xe4>
    }
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	463a      	mov	r2, r7
 80020ea:	18d1      	adds	r1, r2, r3
 80020ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020f0:	2201      	movs	r2, #1
 80020f2:	4821      	ldr	r0, [pc, #132]	@ (8002178 <SPI_WIFI_ResetModule+0xf0>)
 80020f4:	f004 f95f 	bl	80063b6 <HAL_SPI_Receive>
 80020f8:	4603      	mov	r3, r0
 80020fa:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	3302      	adds	r3, #2
 8002100:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8002102:	f001 fcdd 	bl	8003ac0 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002110:	d202      	bcs.n	8002118 <SPI_WIFI_ResetModule+0x90>
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <SPI_WIFI_ResetModule+0xa0>
    {
      WIFI_DISABLE_NSS();
 8002118:	2201      	movs	r2, #1
 800211a:	2101      	movs	r1, #1
 800211c:	4815      	ldr	r0, [pc, #84]	@ (8002174 <SPI_WIFI_ResetModule+0xec>)
 800211e:	f002 f9d3 	bl	80044c8 <HAL_GPIO_WritePin>
      return -1;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	e021      	b.n	800216c <SPI_WIFI_ResetModule+0xe4>
  while (WIFI_IS_CMDDATA_READY())
 8002128:	2102      	movs	r1, #2
 800212a:	4812      	ldr	r0, [pc, #72]	@ (8002174 <SPI_WIFI_ResetModule+0xec>)
 800212c:	f002 f9b4 	bl	8004498 <HAL_GPIO_ReadPin>
 8002130:	4603      	mov	r3, r0
 8002132:	2b01      	cmp	r3, #1
 8002134:	d0cc      	beq.n	80020d0 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8002136:	2201      	movs	r2, #1
 8002138:	2101      	movs	r1, #1
 800213a:	480e      	ldr	r0, [pc, #56]	@ (8002174 <SPI_WIFI_ResetModule+0xec>)
 800213c:	f002 f9c4 	bl	80044c8 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002140:	783b      	ldrb	r3, [r7, #0]
 8002142:	2b15      	cmp	r3, #21
 8002144:	d10e      	bne.n	8002164 <SPI_WIFI_ResetModule+0xdc>
 8002146:	787b      	ldrb	r3, [r7, #1]
 8002148:	2b15      	cmp	r3, #21
 800214a:	d10b      	bne.n	8002164 <SPI_WIFI_ResetModule+0xdc>
 800214c:	78bb      	ldrb	r3, [r7, #2]
 800214e:	2b0d      	cmp	r3, #13
 8002150:	d108      	bne.n	8002164 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002152:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002154:	2b0a      	cmp	r3, #10
 8002156:	d105      	bne.n	8002164 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002158:	793b      	ldrb	r3, [r7, #4]
 800215a:	2b3e      	cmp	r3, #62	@ 0x3e
 800215c:	d102      	bne.n	8002164 <SPI_WIFI_ResetModule+0xdc>
 800215e:	797b      	ldrb	r3, [r7, #5]
 8002160:	2b20      	cmp	r3, #32
 8002162:	d002      	beq.n	800216a <SPI_WIFI_ResetModule+0xe2>
  {
    return -1;
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
 8002168:	e000      	b.n	800216c <SPI_WIFI_ResetModule+0xe4>
  }
  return 0;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	48001000 	.word	0x48001000
 8002178:	200001f8 	.word	0x200001f8

0800217c <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8002180:	4802      	ldr	r0, [pc, #8]	@ (800218c <SPI_WIFI_DeInit+0x10>)
 8002182:	f004 f8f0 	bl	8006366 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200001f8 	.word	0x200001f8

08002190 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002198:	f001 fc92 	bl	8003ac0 <HAL_GetTick>
 800219c:	4603      	mov	r3, r0
 800219e:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 80021a0:	e00a      	b.n	80021b8 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80021a2:	f001 fc8d 	bl	8003ac0 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad2      	subs	r2, r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d902      	bls.n	80021b8 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	e007      	b.n	80021c8 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 80021b8:	2102      	movs	r1, #2
 80021ba:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <wait_cmddata_rdy_high+0x40>)
 80021bc:	f002 f96c 	bl	8004498 <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d1ed      	bne.n	80021a2 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	48001000 	.word	0x48001000

080021d4 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80021dc:	f001 fc70 	bl	8003ac0 <HAL_GetTick>
 80021e0:	4603      	mov	r3, r0
 80021e2:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 80021e4:	e00a      	b.n	80021fc <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80021e6:	f001 fc6b 	bl	8003ac0 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1ad2      	subs	r2, r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d902      	bls.n	80021fc <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	e004      	b.n	8002206 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 80021fc:	4b04      	ldr	r3, [pc, #16]	@ (8002210 <wait_cmddata_rdy_rising_event+0x3c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d0f0      	beq.n	80021e6 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8002204:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000264 	.word	0x20000264

08002214 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800221c:	f001 fc50 	bl	8003ac0 <HAL_GetTick>
 8002220:	4603      	mov	r3, r0
 8002222:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8002224:	e00a      	b.n	800223c <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002226:	f001 fc4b 	bl	8003ac0 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1ad2      	subs	r2, r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	d902      	bls.n	800223c <wait_spi_rx_event+0x28>
    {
      return -1;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	e004      	b.n	8002246 <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 800223c:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <wait_spi_rx_event+0x3c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d0f0      	beq.n	8002226 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8002244:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000025c 	.word	0x2000025c

08002254 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800225c:	f001 fc30 	bl	8003ac0 <HAL_GetTick>
 8002260:	4603      	mov	r3, r0
 8002262:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 8002264:	e00a      	b.n	800227c <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002266:	f001 fc2b 	bl	8003ac0 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	429a      	cmp	r2, r3
 8002274:	d902      	bls.n	800227c <wait_spi_tx_event+0x28>
    {
      return -1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	e004      	b.n	8002286 <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 800227c:	4b04      	ldr	r3, [pc, #16]	@ (8002290 <wait_spi_tx_event+0x3c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d0f0      	beq.n	8002266 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8002284:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000260 	.word	0x20000260

08002294 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	460b      	mov	r3, r1
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 80022a6:	2201      	movs	r2, #1
 80022a8:	2101      	movs	r1, #1
 80022aa:	4834      	ldr	r0, [pc, #208]	@ (800237c <SPI_WIFI_ReceiveData+0xe8>)
 80022ac:	f002 f90c 	bl	80044c8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 f8e3 	bl	800247c <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff8b 	bl	80021d4 <wait_cmddata_rdy_rising_event>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	da02      	bge.n	80022ca <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 80022c4:	f06f 0302 	mvn.w	r3, #2
 80022c8:	e054      	b.n	8002374 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80022ca:	2200      	movs	r2, #0
 80022cc:	2101      	movs	r1, #1
 80022ce:	482b      	ldr	r0, [pc, #172]	@ (800237c <SPI_WIFI_ReceiveData+0xe8>)
 80022d0:	f002 f8fa 	bl	80044c8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80022d4:	200f      	movs	r0, #15
 80022d6:	f000 f8d1 	bl	800247c <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80022da:	e03d      	b.n	8002358 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 80022dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80022e0:	897b      	ldrh	r3, [r7, #10]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	db02      	blt.n	80022ec <SPI_WIFI_ReceiveData+0x58>
 80022e6:	897b      	ldrh	r3, [r7, #10]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d13c      	bne.n	8002366 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 80022ec:	4b24      	ldr	r3, [pc, #144]	@ (8002380 <SPI_WIFI_ReceiveData+0xec>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	2201      	movs	r2, #1
 80022f8:	4619      	mov	r1, r3
 80022fa:	4822      	ldr	r0, [pc, #136]	@ (8002384 <SPI_WIFI_ReceiveData+0xf0>)
 80022fc:	f004 fc3a 	bl	8006b74 <HAL_SPI_Receive_IT>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8002306:	2201      	movs	r2, #1
 8002308:	2101      	movs	r1, #1
 800230a:	481c      	ldr	r0, [pc, #112]	@ (800237c <SPI_WIFI_ReceiveData+0xe8>)
 800230c:	f002 f8dc 	bl	80044c8 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	e02e      	b.n	8002374 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff7b 	bl	8002214 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800231e:	7d3a      	ldrb	r2, [r7, #20]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3301      	adds	r3, #1
 8002328:	7d7a      	ldrb	r2, [r7, #21]
 800232a:	701a      	strb	r2, [r3, #0]
      length += 2;
 800232c:	8afb      	ldrh	r3, [r7, #22]
 800232e:	3302      	adds	r3, #2
 8002330:	b29b      	uxth	r3, r3
 8002332:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3302      	adds	r3, #2
 8002338:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 800233a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800233e:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8002342:	db09      	blt.n	8002358 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8002344:	2201      	movs	r2, #1
 8002346:	2101      	movs	r1, #1
 8002348:	480c      	ldr	r0, [pc, #48]	@ (800237c <SPI_WIFI_ReceiveData+0xe8>)
 800234a:	f002 f8bd 	bl	80044c8 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800234e:	f7ff fe9b 	bl	8002088 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002352:	f06f 0303 	mvn.w	r3, #3
 8002356:	e00d      	b.n	8002374 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002358:	2102      	movs	r1, #2
 800235a:	4808      	ldr	r0, [pc, #32]	@ (800237c <SPI_WIFI_ReceiveData+0xe8>)
 800235c:	f002 f89c 	bl	8004498 <HAL_GPIO_ReadPin>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d0ba      	beq.n	80022dc <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8002366:	2201      	movs	r2, #1
 8002368:	2101      	movs	r1, #1
 800236a:	4804      	ldr	r0, [pc, #16]	@ (800237c <SPI_WIFI_ReceiveData+0xe8>)
 800236c:	f002 f8ac 	bl	80044c8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002370:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	48001000 	.word	0x48001000
 8002380:	2000025c 	.word	0x2000025c
 8002384:	200001f8 	.word	0x200001f8

08002388 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	460b      	mov	r3, r1
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fef9 	bl	8002190 <wait_cmddata_rdy_high>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da02      	bge.n	80023aa <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80023a4:	f04f 33ff 	mov.w	r3, #4294967295
 80023a8:	e04f      	b.n	800244a <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 80023aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002454 <SPI_WIFI_SendData+0xcc>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80023b0:	2200      	movs	r2, #0
 80023b2:	2101      	movs	r1, #1
 80023b4:	4828      	ldr	r0, [pc, #160]	@ (8002458 <SPI_WIFI_SendData+0xd0>)
 80023b6:	f002 f887 	bl	80044c8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80023ba:	200f      	movs	r0, #15
 80023bc:	f000 f85e 	bl	800247c <SPI_WIFI_DelayUs>
  if (len > 1)
 80023c0:	897b      	ldrh	r3, [r7, #10]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d919      	bls.n	80023fa <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 80023c6:	4b25      	ldr	r3, [pc, #148]	@ (800245c <SPI_WIFI_SendData+0xd4>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 80023cc:	897b      	ldrh	r3, [r7, #10]
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	68f9      	ldr	r1, [r7, #12]
 80023d6:	4822      	ldr	r0, [pc, #136]	@ (8002460 <SPI_WIFI_SendData+0xd8>)
 80023d8:	f004 fb44 	bl	8006a64 <HAL_SPI_Transmit_IT>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80023e2:	2201      	movs	r2, #1
 80023e4:	2101      	movs	r1, #1
 80023e6:	481c      	ldr	r0, [pc, #112]	@ (8002458 <SPI_WIFI_SendData+0xd0>)
 80023e8:	f002 f86e 	bl	80044c8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	e02b      	b.n	800244a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff2d 	bl	8002254 <wait_spi_tx_event>
  }

  if (len & 1)
 80023fa:	897b      	ldrh	r3, [r7, #10]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8002404:	897b      	ldrh	r3, [r7, #10]
 8002406:	3b01      	subs	r3, #1
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002410:	230a      	movs	r3, #10
 8002412:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002414:	4b11      	ldr	r3, [pc, #68]	@ (800245c <SPI_WIFI_SendData+0xd4>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	2201      	movs	r2, #1
 8002420:	4619      	mov	r1, r3
 8002422:	480f      	ldr	r0, [pc, #60]	@ (8002460 <SPI_WIFI_SendData+0xd8>)
 8002424:	f004 fb1e 	bl	8006a64 <HAL_SPI_Transmit_IT>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800242e:	2201      	movs	r2, #1
 8002430:	2101      	movs	r1, #1
 8002432:	4809      	ldr	r0, [pc, #36]	@ (8002458 <SPI_WIFI_SendData+0xd0>)
 8002434:	f002 f848 	bl	80044c8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	e005      	b.n	800244a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff07 	bl	8002254 <wait_spi_tx_event>
  }
  return len;
 8002446:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000264 	.word	0x20000264
 8002458:	48001000 	.word	0x48001000
 800245c:	20000260 	.word	0x20000260
 8002460:	200001f8 	.word	0x200001f8

08002464 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f001 fb33 	bl	8003ad8 <HAL_Delay>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 800248c:	4b20      	ldr	r3, [pc, #128]	@ (8002510 <SPI_WIFI_DelayUs+0x94>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d122      	bne.n	80024da <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8002494:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <SPI_WIFI_DelayUs+0x98>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1f      	ldr	r2, [pc, #124]	@ (8002518 <SPI_WIFI_DelayUs+0x9c>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	099b      	lsrs	r3, r3, #6
 80024a0:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80024aa:	f001 fb09 	bl	8003ac0 <HAL_GetTick>
 80024ae:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 80024b0:	e002      	b.n	80024b8 <SPI_WIFI_DelayUs+0x3c>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f9      	bne.n	80024b2 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 80024be:	f001 faff 	bl	8003ac0 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	4a11      	ldr	r2, [pc, #68]	@ (8002510 <SPI_WIFI_DelayUs+0x94>)
 80024ca:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80024cc:	4b10      	ldr	r3, [pc, #64]	@ (8002510 <SPI_WIFI_DelayUs+0x94>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <SPI_WIFI_DelayUs+0x5e>
 80024d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <SPI_WIFI_DelayUs+0x94>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80024da:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <SPI_WIFI_DelayUs+0x98>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a0f      	ldr	r2, [pc, #60]	@ (800251c <SPI_WIFI_DelayUs+0xa0>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	0c9a      	lsrs	r2, r3, #18
 80024e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <SPI_WIFI_DelayUs+0x94>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	fb02 f303 	mul.w	r3, r2, r3
 80024f8:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 80024fa:	e002      	b.n	8002502 <SPI_WIFI_DelayUs+0x86>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	3b01      	subs	r3, #1
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f9      	bne.n	80024fc <SPI_WIFI_DelayUs+0x80>
  return;
 8002508:	bf00      	nop
}
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000268 	.word	0x20000268
 8002514:	20000000 	.word	0x20000000
 8002518:	10624dd3 	.word	0x10624dd3
 800251c:	431bde83 	.word	0x431bde83

08002520 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002528:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_SPI_RxCpltCallback+0x24>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002530:	4b04      	ldr	r3, [pc, #16]	@ (8002544 <HAL_SPI_RxCpltCallback+0x24>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
  }
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	2000025c 	.word	0x2000025c

08002548 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002550:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_SPI_TxCpltCallback+0x24>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002558:	4b04      	ldr	r3, [pc, #16]	@ (800256c <HAL_SPI_TxCpltCallback+0x24>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
  }
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000260 	.word	0x20000260

08002570 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char* ptr, int len) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d002      	beq.n	8002588 <_write+0x18>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d111      	bne.n	80025ac <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	b29a      	uxth	r2, r3
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	4809      	ldr	r0, [pc, #36]	@ (80025b8 <_write+0x48>)
 8002594:	f005 f8af 	bl	80076f6 <HAL_UART_Transmit>
 8002598:	4603      	mov	r3, r0
 800259a:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <_write+0x36>
      return len;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	e004      	b.n	80025b0 <_write+0x40>
    else
      return -1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	e001      	b.n	80025b0 <_write+0x40>
  }
  return -1;
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200003a0 	.word	0x200003a0

080025bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025bc:	b5b0      	push	{r4, r5, r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025c2:	f001 fa15 	bl	80039f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED2);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f001 f9cc 	bl	8003964 <BSP_LED_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025cc:	f000 f880 	bl	80026d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025d0:	f000 fa48 	bl	8002a64 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80025d4:	f000 f8de 	bl	8002794 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80025d8:	f000 f914 	bl	8002804 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80025dc:	f000 f950 	bl	8002880 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80025e0:	f000 f974 	bl	80028cc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80025e4:	f000 f9b0 	bl	8002948 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025e8:	f000 f9de 	bl	80029a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80025ec:	f000 fa0c 	bl	8002a08 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  uint8_t  MAC_Addr[6] = {0};
 80025f0:	463b      	mov	r3, r7
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	809a      	strh	r2, [r3, #4]
  TERMOUT("HELLO!!\n");
 80025f8:	4829      	ldr	r0, [pc, #164]	@ (80026a0 <main+0xe4>)
 80025fa:	f006 fe03 	bl	8009204 <puts>
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80025fe:	f001 f87d 	bl	80036fc <WIFI_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d136      	bne.n	8002676 <main+0xba>
  {
    TERMOUT("> WIFI Module Initialized.\n");
 8002608:	4826      	ldr	r0, [pc, #152]	@ (80026a4 <main+0xe8>)
 800260a:	f006 fdfb 	bl	8009204 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 800260e:	463b      	mov	r3, r7
 8002610:	2106      	movs	r1, #6
 8002612:	4618      	mov	r0, r3
 8002614:	f001 f8c0 	bl	8003798 <WIFI_GetMAC_Address>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d112      	bne.n	8002644 <main+0x88>
    {
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 800261e:	783b      	ldrb	r3, [r7, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	787b      	ldrb	r3, [r7, #1]
 8002624:	461c      	mov	r4, r3
 8002626:	78bb      	ldrb	r3, [r7, #2]
 8002628:	461d      	mov	r5, r3
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	793a      	ldrb	r2, [r7, #4]
 800262e:	7979      	ldrb	r1, [r7, #5]
 8002630:	9102      	str	r1, [sp, #8]
 8002632:	9201      	str	r2, [sp, #4]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	462b      	mov	r3, r5
 8002638:	4622      	mov	r2, r4
 800263a:	4601      	mov	r1, r0
 800263c:	481a      	ldr	r0, [pc, #104]	@ (80026a8 <main+0xec>)
 800263e:	f006 fd79 	bl	8009134 <iprintf>
 8002642:	e005      	b.n	8002650 <main+0x94>
               MAC_Addr[4],
               MAC_Addr[5]);
    }
    else
    {
      TERMOUT("> ERROR : CANNOT get MAC address\n");
 8002644:	4819      	ldr	r0, [pc, #100]	@ (80026ac <main+0xf0>)
 8002646:	f006 fddd 	bl	8009204 <puts>
      BSP_LED_On(LED2);
 800264a:	2000      	movs	r0, #0
 800264c:	f001 f9ba 	bl	80039c4 <BSP_LED_On>
    }

    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8002650:	2203      	movs	r2, #3
 8002652:	4917      	ldr	r1, [pc, #92]	@ (80026b0 <main+0xf4>)
 8002654:	4817      	ldr	r0, [pc, #92]	@ (80026b4 <main+0xf8>)
 8002656:	f001 f87d 	bl	8003754 <WIFI_Connect>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <main+0xac>
    {
      TERMOUT("> es-wifi module connected \n");
 8002660:	4815      	ldr	r0, [pc, #84]	@ (80026b8 <main+0xfc>)
 8002662:	f006 fdcf 	bl	8009204 <puts>
 8002666:	e00c      	b.n	8002682 <main+0xc6>
    }
    else
    {
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 8002668:	4814      	ldr	r0, [pc, #80]	@ (80026bc <main+0x100>)
 800266a:	f006 fdcb 	bl	8009204 <puts>
      BSP_LED_On(LED2);
 800266e:	2000      	movs	r0, #0
 8002670:	f001 f9a8 	bl	80039c4 <BSP_LED_On>
 8002674:	e005      	b.n	8002682 <main+0xc6>
    }
  }
  else
  {
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 8002676:	4812      	ldr	r0, [pc, #72]	@ (80026c0 <main+0x104>)
 8002678:	f006 fdc4 	bl	8009204 <puts>
    BSP_LED_On(LED2);
 800267c:	2000      	movs	r0, #0
 800267e:	f001 f9a1 	bl	80039c4 <BSP_LED_On>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("STM32 Working\n");
 8002682:	4810      	ldr	r0, [pc, #64]	@ (80026c4 <main+0x108>)
 8002684:	f006 fdbe 	bl	8009204 <puts>
	HAL_Delay(10000);
 8002688:	f242 7010 	movw	r0, #10000	@ 0x2710
 800268c:	f001 fa24 	bl	8003ad8 <HAL_Delay>
	send_http_post(50.44, 50.45);
 8002690:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80026c8 <main+0x10c>
 8002694:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80026cc <main+0x110>
 8002698:	f000 fb96 	bl	8002dc8 <send_http_post>
	printf("STM32 Working\n");
 800269c:	e7f1      	b.n	8002682 <main+0xc6>
 800269e:	bf00      	nop
 80026a0:	0800bac4 	.word	0x0800bac4
 80026a4:	0800bacc 	.word	0x0800bacc
 80026a8:	0800bae8 	.word	0x0800bae8
 80026ac:	0800bb1c 	.word	0x0800bb1c
 80026b0:	0800bb40 	.word	0x0800bb40
 80026b4:	0800bb4c 	.word	0x0800bb4c
 80026b8:	0800bb54 	.word	0x0800bb54
 80026bc:	0800bb70 	.word	0x0800bb70
 80026c0:	0800bb98 	.word	0x0800bb98
 80026c4:	0800bbc8 	.word	0x0800bbc8
 80026c8:	4249cccd 	.word	0x4249cccd
 80026cc:	4249c28f 	.word	0x4249c28f

080026d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b096      	sub	sp, #88	@ 0x58
 80026d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	2244      	movs	r2, #68	@ 0x44
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f006 fea2 	bl	8009428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e4:	463b      	mov	r3, r7
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80026f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80026f6:	f002 f9a5 	bl	8004a44 <HAL_PWREx_ControlVoltageScaling>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002700:	f000 fc16 	bl	8002f30 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002704:	f002 f980 	bl	8004a08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002708:	4b21      	ldr	r3, [pc, #132]	@ (8002790 <SystemClock_Config+0xc0>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	4a20      	ldr	r2, [pc, #128]	@ (8002790 <SystemClock_Config+0xc0>)
 8002710:	f023 0318 	bic.w	r3, r3, #24
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002718:	2314      	movs	r3, #20
 800271a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800271c:	2301      	movs	r3, #1
 800271e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002720:	2301      	movs	r3, #1
 8002722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002728:	2360      	movs	r3, #96	@ 0x60
 800272a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800272c:	2302      	movs	r3, #2
 800272e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002730:	2301      	movs	r3, #1
 8002732:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002734:	2301      	movs	r3, #1
 8002736:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002738:	2328      	movs	r3, #40	@ 0x28
 800273a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800273c:	2307      	movs	r3, #7
 800273e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002740:	2302      	movs	r3, #2
 8002742:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002744:	2302      	movs	r3, #2
 8002746:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4618      	mov	r0, r3
 800274e:	f002 fa9b 	bl	8004c88 <HAL_RCC_OscConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002758:	f000 fbea 	bl	8002f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800275c:	230f      	movs	r3, #15
 800275e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002760:	2303      	movs	r3, #3
 8002762:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002770:	463b      	mov	r3, r7
 8002772:	2104      	movs	r1, #4
 8002774:	4618      	mov	r0, r3
 8002776:	f002 fe63 	bl	8005440 <HAL_RCC_ClockConfig>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002780:	f000 fbd6 	bl	8002f30 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002784:	f003 fb6a 	bl	8005e5c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002788:	bf00      	nop
 800278a:	3758      	adds	r7, #88	@ 0x58
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000

08002794 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8002798:	4b18      	ldr	r3, [pc, #96]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 800279a:	4a19      	ldr	r2, [pc, #100]	@ (8002800 <MX_DFSDM1_Init+0x6c>)
 800279c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800279e:	4b17      	ldr	r3, [pc, #92]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80027a4:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80027aa:	4b14      	ldr	r3, [pc, #80]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 80027ac:	2202      	movs	r2, #2
 80027ae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80027b0:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80027b6:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80027bc:	4b0f      	ldr	r3, [pc, #60]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 80027be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027c2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80027c4:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80027ca:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 80027cc:	2204      	movs	r2, #4
 80027ce:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80027d0:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80027d6:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 80027d8:	2201      	movs	r2, #1
 80027da:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80027dc:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 80027de:	2200      	movs	r2, #0
 80027e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80027e8:	4804      	ldr	r0, [pc, #16]	@ (80027fc <MX_DFSDM1_Init+0x68>)
 80027ea:	f001 faab 	bl	8003d44 <HAL_DFSDM_ChannelInit>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80027f4:	f000 fb9c 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	2000026c 	.word	0x2000026c
 8002800:	40016020 	.word	0x40016020

08002804 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <MX_I2C2_Init+0x74>)
 800280a:	4a1c      	ldr	r2, [pc, #112]	@ (800287c <MX_I2C2_Init+0x78>)
 800280c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800280e:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <MX_I2C2_Init+0x74>)
 8002810:	f640 6214 	movw	r2, #3604	@ 0xe14
 8002814:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002816:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <MX_I2C2_Init+0x74>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800281c:	4b16      	ldr	r3, [pc, #88]	@ (8002878 <MX_I2C2_Init+0x74>)
 800281e:	2201      	movs	r2, #1
 8002820:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002822:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <MX_I2C2_Init+0x74>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002828:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <MX_I2C2_Init+0x74>)
 800282a:	2200      	movs	r2, #0
 800282c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800282e:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <MX_I2C2_Init+0x74>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002834:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <MX_I2C2_Init+0x74>)
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800283a:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <MX_I2C2_Init+0x74>)
 800283c:	2200      	movs	r2, #0
 800283e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002840:	480d      	ldr	r0, [pc, #52]	@ (8002878 <MX_I2C2_Init+0x74>)
 8002842:	f001 fe7c 	bl	800453e <HAL_I2C_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800284c:	f000 fb70 	bl	8002f30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002850:	2100      	movs	r1, #0
 8002852:	4809      	ldr	r0, [pc, #36]	@ (8002878 <MX_I2C2_Init+0x74>)
 8002854:	f001 ff0e 	bl	8004674 <HAL_I2CEx_ConfigAnalogFilter>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800285e:	f000 fb67 	bl	8002f30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002862:	2100      	movs	r1, #0
 8002864:	4804      	ldr	r0, [pc, #16]	@ (8002878 <MX_I2C2_Init+0x74>)
 8002866:	f001 ff50 	bl	800470a <HAL_I2CEx_ConfigDigitalFilter>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002870:	f000 fb5e 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	200002a4 	.word	0x200002a4
 800287c:	40005800 	.word	0x40005800

08002880 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002884:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <MX_QUADSPI_Init+0x44>)
 8002886:	4a10      	ldr	r2, [pc, #64]	@ (80028c8 <MX_QUADSPI_Init+0x48>)
 8002888:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800288a:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <MX_QUADSPI_Init+0x44>)
 800288c:	2202      	movs	r2, #2
 800288e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <MX_QUADSPI_Init+0x44>)
 8002892:	2204      	movs	r2, #4
 8002894:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002896:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <MX_QUADSPI_Init+0x44>)
 8002898:	2210      	movs	r2, #16
 800289a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800289c:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <MX_QUADSPI_Init+0x44>)
 800289e:	2217      	movs	r2, #23
 80028a0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80028a2:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <MX_QUADSPI_Init+0x44>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <MX_QUADSPI_Init+0x44>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80028ae:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <MX_QUADSPI_Init+0x44>)
 80028b0:	f002 f92e 	bl	8004b10 <HAL_QSPI_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80028ba:	f000 fb39 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200002f8 	.word	0x200002f8
 80028c8:	a0001000 	.word	0xa0001000

080028cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80028d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <MX_SPI3_Init+0x74>)
 80028d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002944 <MX_SPI3_Init+0x78>)
 80028d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80028d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <MX_SPI3_Init+0x74>)
 80028d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80028de:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <MX_SPI3_Init+0x74>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80028e4:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <MX_SPI3_Init+0x74>)
 80028e6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80028ea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ec:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <MX_SPI3_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028f2:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <MX_SPI3_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80028f8:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <MX_SPI3_Init+0x74>)
 80028fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028fe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002900:	4b0f      	ldr	r3, [pc, #60]	@ (8002940 <MX_SPI3_Init+0x74>)
 8002902:	2200      	movs	r2, #0
 8002904:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002906:	4b0e      	ldr	r3, [pc, #56]	@ (8002940 <MX_SPI3_Init+0x74>)
 8002908:	2200      	movs	r2, #0
 800290a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800290c:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <MX_SPI3_Init+0x74>)
 800290e:	2200      	movs	r2, #0
 8002910:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002912:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <MX_SPI3_Init+0x74>)
 8002914:	2200      	movs	r2, #0
 8002916:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002918:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <MX_SPI3_Init+0x74>)
 800291a:	2207      	movs	r2, #7
 800291c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800291e:	4b08      	ldr	r3, [pc, #32]	@ (8002940 <MX_SPI3_Init+0x74>)
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002924:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <MX_SPI3_Init+0x74>)
 8002926:	2208      	movs	r2, #8
 8002928:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800292a:	4805      	ldr	r0, [pc, #20]	@ (8002940 <MX_SPI3_Init+0x74>)
 800292c:	f003 fc78 	bl	8006220 <HAL_SPI_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002936:	f000 fafb 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	2000033c 	.word	0x2000033c
 8002944:	40003c00 	.word	0x40003c00

08002948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800294c:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <MX_USART1_UART_Init+0x58>)
 800294e:	4a15      	ldr	r2, [pc, #84]	@ (80029a4 <MX_USART1_UART_Init+0x5c>)
 8002950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002952:	4b13      	ldr	r3, [pc, #76]	@ (80029a0 <MX_USART1_UART_Init+0x58>)
 8002954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800295a:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <MX_USART1_UART_Init+0x58>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002960:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <MX_USART1_UART_Init+0x58>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002966:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <MX_USART1_UART_Init+0x58>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <MX_USART1_UART_Init+0x58>)
 800296e:	220c      	movs	r2, #12
 8002970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <MX_USART1_UART_Init+0x58>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <MX_USART1_UART_Init+0x58>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800297e:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <MX_USART1_UART_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <MX_USART1_UART_Init+0x58>)
 8002986:	2200      	movs	r2, #0
 8002988:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800298a:	4805      	ldr	r0, [pc, #20]	@ (80029a0 <MX_USART1_UART_Init+0x58>)
 800298c:	f004 fe65 	bl	800765a <HAL_UART_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002996:	f000 facb 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200003a0 	.word	0x200003a0
 80029a4:	40013800 	.word	0x40013800

080029a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029ac:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <MX_USART3_UART_Init+0x58>)
 80029ae:	4a15      	ldr	r2, [pc, #84]	@ (8002a04 <MX_USART3_UART_Init+0x5c>)
 80029b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029b2:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <MX_USART3_UART_Init+0x58>)
 80029b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029ba:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <MX_USART3_UART_Init+0x58>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a00 <MX_USART3_UART_Init+0x58>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a00 <MX_USART3_UART_Init+0x58>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <MX_USART3_UART_Init+0x58>)
 80029ce:	220c      	movs	r2, #12
 80029d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <MX_USART3_UART_Init+0x58>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d8:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <MX_USART3_UART_Init+0x58>)
 80029da:	2200      	movs	r2, #0
 80029dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029de:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <MX_USART3_UART_Init+0x58>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029e4:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <MX_USART3_UART_Init+0x58>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029ea:	4805      	ldr	r0, [pc, #20]	@ (8002a00 <MX_USART3_UART_Init+0x58>)
 80029ec:	f004 fe35 	bl	800765a <HAL_UART_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80029f6:	f000 fa9b 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000428 	.word	0x20000428
 8002a04:	40004800 	.word	0x40004800

08002a08 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a0c:	4b14      	ldr	r3, [pc, #80]	@ (8002a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a0e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002a12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002a14:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a16:	2206      	movs	r2, #6
 8002a18:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002a1a:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a22:	2202      	movs	r2, #2
 8002a24:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002a32:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002a38:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002a3e:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002a4a:	4805      	ldr	r0, [pc, #20]	@ (8002a60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a4c:	f001 fea9 	bl	80047a2 <HAL_PCD_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002a56:	f000 fa6b 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200004b0 	.word	0x200004b0

08002a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	@ 0x28
 8002a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]
 8002a78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a7a:	4bbd      	ldr	r3, [pc, #756]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	4abc      	ldr	r2, [pc, #752]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002a80:	f043 0310 	orr.w	r3, r3, #16
 8002a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a86:	4bba      	ldr	r3, [pc, #744]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a92:	4bb7      	ldr	r3, [pc, #732]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a96:	4ab6      	ldr	r2, [pc, #728]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002a98:	f043 0304 	orr.w	r3, r3, #4
 8002a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a9e:	4bb4      	ldr	r3, [pc, #720]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aaa:	4bb1      	ldr	r3, [pc, #708]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aae:	4ab0      	ldr	r2, [pc, #704]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ab6:	4bae      	ldr	r3, [pc, #696]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac2:	4bab      	ldr	r3, [pc, #684]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac6:	4aaa      	ldr	r2, [pc, #680]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ace:	4ba8      	ldr	r3, [pc, #672]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ada:	4ba5      	ldr	r3, [pc, #660]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ade:	4aa4      	ldr	r2, [pc, #656]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002ae0:	f043 0308 	orr.w	r3, r3, #8
 8002ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ae6:	4ba2      	ldr	r3, [pc, #648]	@ (8002d70 <MX_GPIO_Init+0x30c>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8002af2:	2200      	movs	r2, #0
 8002af4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002af8:	489e      	ldr	r0, [pc, #632]	@ (8002d74 <MX_GPIO_Init+0x310>)
 8002afa:	f001 fce5 	bl	80044c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8002afe:	2200      	movs	r2, #0
 8002b00:	f248 1104 	movw	r1, #33028	@ 0x8104
 8002b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b08:	f001 fcde 	bl	80044c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8002b12:	4899      	ldr	r0, [pc, #612]	@ (8002d78 <MX_GPIO_Init+0x314>)
 8002b14:	f001 fcd8 	bl	80044c8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f241 0181 	movw	r1, #4225	@ 0x1081
 8002b1e:	4897      	ldr	r0, [pc, #604]	@ (8002d7c <MX_GPIO_Init+0x318>)
 8002b20:	f001 fcd2 	bl	80044c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002b24:	2201      	movs	r2, #1
 8002b26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b2a:	4894      	ldr	r0, [pc, #592]	@ (8002d7c <MX_GPIO_Init+0x318>)
 8002b2c:	f001 fccc 	bl	80044c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002b30:	2200      	movs	r2, #0
 8002b32:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8002b36:	4892      	ldr	r0, [pc, #584]	@ (8002d80 <MX_GPIO_Init+0x31c>)
 8002b38:	f001 fcc6 	bl	80044c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	2120      	movs	r1, #32
 8002b40:	488d      	ldr	r0, [pc, #564]	@ (8002d78 <MX_GPIO_Init+0x314>)
 8002b42:	f001 fcc1 	bl	80044c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002b46:	2201      	movs	r2, #1
 8002b48:	2101      	movs	r1, #1
 8002b4a:	488a      	ldr	r0, [pc, #552]	@ (8002d74 <MX_GPIO_Init+0x310>)
 8002b4c:	f001 fcbc 	bl	80044c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002b50:	f240 1315 	movw	r3, #277	@ 0x115
 8002b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b56:	2301      	movs	r3, #1
 8002b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	4882      	ldr	r0, [pc, #520]	@ (8002d74 <MX_GPIO_Init+0x310>)
 8002b6a:	f001 f9f7 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8002b6e:	236a      	movs	r3, #106	@ 0x6a
 8002b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	4619      	mov	r1, r3
 8002b82:	487c      	ldr	r0, [pc, #496]	@ (8002d74 <MX_GPIO_Init+0x310>)
 8002b84:	f001 f9ea 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8002b88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b8e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4878      	ldr	r0, [pc, #480]	@ (8002d80 <MX_GPIO_Init+0x31c>)
 8002ba0:	f001 f9dc 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002ba4:	233f      	movs	r3, #63	@ 0x3f
 8002ba6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002ba8:	230b      	movs	r3, #11
 8002baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4872      	ldr	r0, [pc, #456]	@ (8002d80 <MX_GPIO_Init+0x31c>)
 8002bb8:	f001 f9d0 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002bcc:	2308      	movs	r3, #8
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bda:	f001 f9bf 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8002bde:	f248 1304 	movw	r3, #33028	@ 0x8104
 8002be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be4:	2301      	movs	r3, #1
 8002be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bec:	2300      	movs	r3, #0
 8002bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bfa:	f001 f9af 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002bfe:	2308      	movs	r3, #8
 8002c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	4619      	mov	r1, r3
 8002c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c1c:	f001 f99e 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002c20:	2310      	movs	r3, #16
 8002c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c24:	230b      	movs	r3, #11
 8002c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	4619      	mov	r1, r3
 8002c32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c36:	f001 f991 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002c3a:	23e0      	movs	r3, #224	@ 0xe0
 8002c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c46:	2303      	movs	r3, #3
 8002c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c4a:	2305      	movs	r3, #5
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	4619      	mov	r1, r3
 8002c54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c58:	f001 f980 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4841      	ldr	r0, [pc, #260]	@ (8002d78 <MX_GPIO_Init+0x314>)
 8002c72:	f001 f973 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002c76:	2302      	movs	r3, #2
 8002c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c7a:	230b      	movs	r3, #11
 8002c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002c82:	f107 0314 	add.w	r3, r7, #20
 8002c86:	4619      	mov	r1, r3
 8002c88:	483b      	ldr	r0, [pc, #236]	@ (8002d78 <MX_GPIO_Init+0x314>)
 8002c8a:	f001 f967 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002c8e:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8002c92:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c94:	2301      	movs	r3, #1
 8002c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4834      	ldr	r0, [pc, #208]	@ (8002d78 <MX_GPIO_Init+0x314>)
 8002ca8:	f001 f958 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8002cac:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8002cb0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	482e      	ldr	r0, [pc, #184]	@ (8002d7c <MX_GPIO_Init+0x318>)
 8002cc4:	f001 f94a 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002cc8:	f243 0381 	movw	r3, #12417	@ 0x3081
 8002ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4826      	ldr	r0, [pc, #152]	@ (8002d7c <MX_GPIO_Init+0x318>)
 8002ce2:	f001 f93b 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002ce6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cec:	2301      	movs	r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4820      	ldr	r0, [pc, #128]	@ (8002d80 <MX_GPIO_Init+0x31c>)
 8002d00:	f001 f92c 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002d04:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4819      	ldr	r0, [pc, #100]	@ (8002d80 <MX_GPIO_Init+0x31c>)
 8002d1c:	f001 f91e 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002d20:	2302      	movs	r3, #2
 8002d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d30:	2305      	movs	r3, #5
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4810      	ldr	r0, [pc, #64]	@ (8002d7c <MX_GPIO_Init+0x318>)
 8002d3c:	f001 f90e 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002d40:	2378      	movs	r3, #120	@ 0x78
 8002d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d50:	2307      	movs	r3, #7
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4808      	ldr	r0, [pc, #32]	@ (8002d7c <MX_GPIO_Init+0x318>)
 8002d5c:	f001 f8fe 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002d60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d66:	2312      	movs	r3, #18
 8002d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e00a      	b.n	8002d84 <MX_GPIO_Init+0x320>
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	48001000 	.word	0x48001000
 8002d78:	48000400 	.word	0x48000400
 8002d7c:	48000c00 	.word	0x48000c00
 8002d80:	48000800 	.word	0x48000800
 8002d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d86:	2303      	movs	r3, #3
 8002d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8e:	f107 0314 	add.w	r3, r7, #20
 8002d92:	4619      	mov	r1, r3
 8002d94:	480b      	ldr	r0, [pc, #44]	@ (8002dc4 <MX_GPIO_Init+0x360>)
 8002d96:	f001 f8e1 	bl	8003f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2017      	movs	r0, #23
 8002da0:	f000 ff99 	bl	8003cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002da4:	2017      	movs	r0, #23
 8002da6:	f000 ffb2 	bl	8003d0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	2028      	movs	r0, #40	@ 0x28
 8002db0:	f000 ff91 	bl	8003cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002db4:	2028      	movs	r0, #40	@ 0x28
 8002db6:	f000 ffaa 	bl	8003d0e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002dba:	bf00      	nop
 8002dbc:	3728      	adds	r7, #40	@ 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	48000400 	.word	0x48000400

08002dc8 <send_http_post>:

/* USER CODE BEGIN 4 */
void send_http_post(float temp, float hum)
{
 8002dc8:	b5b0      	push	{r4, r5, r7, lr}
 8002dca:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8002dce:	af02      	add	r7, sp, #8
 8002dd0:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8002dd4:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8002dd8:	ed83 0a00 	vstr	s0, [r3]
 8002ddc:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8002de0:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8002de4:	edc3 0a00 	vstr	s1, [r3]
    WIFI_Status_t ret;
    int socket_id = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
    char json_body[100];
    char http_request[512];
    uint16_t len;

    sprintf(json_body, "{\"temp\":%.2f,\"hum\":%.2f}", temp, hum);
 8002dee:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8002df2:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	f7fd fba6 	bl	8000548 <__aeabi_f2d>
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	460d      	mov	r5, r1
 8002e00:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8002e04:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	f7fd fb9d 	bl	8000548 <__aeabi_f2d>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	f207 4014 	addw	r0, r7, #1044	@ 0x414
 8002e16:	e9cd 2300 	strd	r2, r3, [sp]
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	462b      	mov	r3, r5
 8002e1e:	493c      	ldr	r1, [pc, #240]	@ (8002f10 <send_http_post+0x148>)
 8002e20:	f006 f9f8 	bl	8009214 <siprintf>

    sprintf(http_request,
 8002e24:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd fa21 	bl	8000270 <strlen>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8002e34:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	9200      	str	r2, [sp, #0]
 8002e3c:	4b35      	ldr	r3, [pc, #212]	@ (8002f14 <send_http_post+0x14c>)
 8002e3e:	4a36      	ldr	r2, [pc, #216]	@ (8002f18 <send_http_post+0x150>)
 8002e40:	4936      	ldr	r1, [pc, #216]	@ (8002f1c <send_http_post+0x154>)
 8002e42:	f006 f9e7 	bl	8009214 <siprintf>
            "\r\n"
            "%s",
            RESOURCE, SERVER_NAME, strlen(json_body), json_body);

    // Open TCP connection
    ret = WIFI_OpenClientConnection(socket_id, WIFI_TCP_PROTOCOL, "api",
 8002e46:	f8d7 047c 	ldr.w	r0, [r7, #1148]	@ 0x47c
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	4b2f      	ldr	r3, [pc, #188]	@ (8002f14 <send_http_post+0x14c>)
 8002e56:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <send_http_post+0x158>)
 8002e58:	2100      	movs	r1, #0
 8002e5a:	f000 fcbd 	bl	80037d8 <WIFI_OpenClientConnection>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 347b 	strb.w	r3, [r7, #1147]	@ 0x47b
                                    SERVER_NAME, SERVER_PORT, 0);

    if (ret != WIFI_STATUS_OK) {
 8002e64:	f897 347b 	ldrb.w	r3, [r7, #1147]	@ 0x47b
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <send_http_post+0xac>
        printf("Failed to open TCP connection\n");
 8002e6c:	482d      	ldr	r0, [pc, #180]	@ (8002f24 <send_http_post+0x15c>)
 8002e6e:	f006 f9c9 	bl	8009204 <puts>
 8002e72:	e049      	b.n	8002f08 <send_http_post+0x140>
        return;
    }

    // Send HTTP request
    len = strlen(http_request);
 8002e74:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd f9f9 	bl	8000270 <strlen>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8002e86:	f2a3 236e 	subw	r3, r3, #622	@ 0x26e
 8002e8a:	801a      	strh	r2, [r3, #0]
    ret = WIFI_SendData(socket_id, (uint8_t *)http_request, len, &len, WIFI_WRITE_TIMEOUT);
 8002e8c:	f8d7 047c 	ldr.w	r0, [r7, #1148]	@ 0x47c
 8002e90:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8002e94:	f2a3 236e 	subw	r3, r3, #622	@ 0x26e
 8002e98:	881a      	ldrh	r2, [r3, #0]
 8002e9a:	f207 2312 	addw	r3, r7, #530	@ 0x212
 8002e9e:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8002ea2:	f242 7410 	movw	r4, #10000	@ 0x2710
 8002ea6:	9400      	str	r4, [sp, #0]
 8002ea8:	f000 fcee 	bl	8003888 <WIFI_SendData>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f887 347b 	strb.w	r3, [r7, #1147]	@ 0x47b
    if (ret != WIFI_STATUS_OK) {
 8002eb2:	f897 347b 	ldrb.w	r3, [r7, #1147]	@ 0x47b
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <send_http_post+0xf8>
        printf("Failed to send HTTP request\n");
 8002eba:	481b      	ldr	r0, [pc, #108]	@ (8002f28 <send_http_post+0x160>)
 8002ebc:	f006 f9a2 	bl	8009204 <puts>
    }

    // Optional: read response
    uint8_t resp_buffer[512];
    uint16_t resp_len;
    WIFI_ReceiveData(socket_id, resp_buffer, sizeof(resp_buffer) - 1, &resp_len, 2000);
 8002ec0:	f8d7 047c 	ldr.w	r0, [r7, #1148]	@ 0x47c
 8002ec4:	f107 030e 	add.w	r3, r7, #14
 8002ec8:	f107 0110 	add.w	r1, r7, #16
 8002ecc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002ed0:	9200      	str	r2, [sp, #0]
 8002ed2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002ed6:	f000 fcf9 	bl	80038cc <WIFI_ReceiveData>
    resp_buffer[resp_len] = '\0';
 8002eda:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8002ede:	f2a3 4372 	subw	r3, r3, #1138	@ 0x472
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8002eea:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8002eee:	2100      	movs	r1, #0
 8002ef0:	5499      	strb	r1, [r3, r2]
    printf("Server response:\n%s\n", resp_buffer);
 8002ef2:	f107 0310 	add.w	r3, r7, #16
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	480c      	ldr	r0, [pc, #48]	@ (8002f2c <send_http_post+0x164>)
 8002efa:	f006 f91b 	bl	8009134 <iprintf>

    WIFI_CloseClientConnection(socket_id);
 8002efe:	f8d7 347c 	ldr.w	r3, [r7, #1148]	@ 0x47c
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fca4 	bl	8003850 <WIFI_CloseClientConnection>
}
 8002f08:	f507 6790 	add.w	r7, r7, #1152	@ 0x480
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f10:	0800bbd8 	.word	0x0800bbd8
 8002f14:	0800bbf4 	.word	0x0800bbf4
 8002f18:	0800bc18 	.word	0x0800bc18
 8002f1c:	0800bc24 	.word	0x0800bc24
 8002f20:	0800bc7c 	.word	0x0800bc7c
 8002f24:	0800bc80 	.word	0x0800bc80
 8002f28:	0800bca0 	.word	0x0800bca0
 8002f2c:	0800bcbc 	.word	0x0800bcbc

08002f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f34:	b672      	cpsid	i
}
 8002f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <Error_Handler+0x8>

08002f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f42:	4b0f      	ldr	r3, [pc, #60]	@ (8002f80 <HAL_MspInit+0x44>)
 8002f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f46:	4a0e      	ldr	r2, [pc, #56]	@ (8002f80 <HAL_MspInit+0x44>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f80 <HAL_MspInit+0x44>)
 8002f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f5a:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <HAL_MspInit+0x44>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5e:	4a08      	ldr	r2, [pc, #32]	@ (8002f80 <HAL_MspInit+0x44>)
 8002f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f66:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <HAL_MspInit+0x44>)
 8002f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000

08002f84 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b0ac      	sub	sp, #176	@ 0xb0
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	2288      	movs	r2, #136	@ 0x88
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f006 fa3f 	bl	8009428 <memset>
  if(DFSDM1_Init == 0)
 8002faa:	4b25      	ldr	r3, [pc, #148]	@ (8003040 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d142      	bne.n	8003038 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002fb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f002 fc60 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002fce:	f7ff ffaf 	bl	8002f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003044 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003044 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002fd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fde:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fea:	4b16      	ldr	r3, [pc, #88]	@ (8003044 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fee:	4a15      	ldr	r2, [pc, #84]	@ (8003044 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002ff0:	f043 0310 	orr.w	r3, r3, #16
 8002ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ff6:	4b13      	ldr	r3, [pc, #76]	@ (8003044 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003002:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8003006:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003016:	2300      	movs	r3, #0
 8003018:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800301c:	2306      	movs	r3, #6
 800301e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003022:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003026:	4619      	mov	r1, r3
 8003028:	4807      	ldr	r0, [pc, #28]	@ (8003048 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800302a:	f000 ff97 	bl	8003f5c <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800302e:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	4a02      	ldr	r2, [pc, #8]	@ (8003040 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003036:	6013      	str	r3, [r2, #0]
  }

}
 8003038:	bf00      	nop
 800303a:	37b0      	adds	r7, #176	@ 0xb0
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000994 	.word	0x20000994
 8003044:	40021000 	.word	0x40021000
 8003048:	48001000 	.word	0x48001000

0800304c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b0ac      	sub	sp, #176	@ 0xb0
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	2288      	movs	r2, #136	@ 0x88
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f006 f9db 	bl	8009428 <memset>
  if(hi2c->Instance==I2C2)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a21      	ldr	r2, [pc, #132]	@ (80030fc <HAL_I2C_MspInit+0xb0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d13b      	bne.n	80030f4 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800307c:	2380      	movs	r3, #128	@ 0x80
 800307e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003080:	2300      	movs	r3, #0
 8003082:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003084:	f107 0314 	add.w	r3, r7, #20
 8003088:	4618      	mov	r0, r3
 800308a:	f002 fbfd 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003094:	f7ff ff4c 	bl	8002f30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003098:	4b19      	ldr	r3, [pc, #100]	@ (8003100 <HAL_I2C_MspInit+0xb4>)
 800309a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309c:	4a18      	ldr	r2, [pc, #96]	@ (8003100 <HAL_I2C_MspInit+0xb4>)
 800309e:	f043 0302 	orr.w	r3, r3, #2
 80030a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030a4:	4b16      	ldr	r3, [pc, #88]	@ (8003100 <HAL_I2C_MspInit+0xb4>)
 80030a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80030b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80030b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030b8:	2312      	movs	r3, #18
 80030ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030be:	2301      	movs	r3, #1
 80030c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c4:	2303      	movs	r3, #3
 80030c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80030ca:	2304      	movs	r3, #4
 80030cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030d4:	4619      	mov	r1, r3
 80030d6:	480b      	ldr	r0, [pc, #44]	@ (8003104 <HAL_I2C_MspInit+0xb8>)
 80030d8:	f000 ff40 	bl	8003f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80030dc:	4b08      	ldr	r3, [pc, #32]	@ (8003100 <HAL_I2C_MspInit+0xb4>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e0:	4a07      	ldr	r2, [pc, #28]	@ (8003100 <HAL_I2C_MspInit+0xb4>)
 80030e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80030e8:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <HAL_I2C_MspInit+0xb4>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80030f4:	bf00      	nop
 80030f6:	37b0      	adds	r7, #176	@ 0xb0
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40005800 	.word	0x40005800
 8003100:	40021000 	.word	0x40021000
 8003104:	48000400 	.word	0x48000400

08003108 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	@ 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a17      	ldr	r2, [pc, #92]	@ (8003184 <HAL_QSPI_MspInit+0x7c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d128      	bne.n	800317c <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800312a:	4b17      	ldr	r3, [pc, #92]	@ (8003188 <HAL_QSPI_MspInit+0x80>)
 800312c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800312e:	4a16      	ldr	r2, [pc, #88]	@ (8003188 <HAL_QSPI_MspInit+0x80>)
 8003130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003134:	6513      	str	r3, [r2, #80]	@ 0x50
 8003136:	4b14      	ldr	r3, [pc, #80]	@ (8003188 <HAL_QSPI_MspInit+0x80>)
 8003138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003142:	4b11      	ldr	r3, [pc, #68]	@ (8003188 <HAL_QSPI_MspInit+0x80>)
 8003144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003146:	4a10      	ldr	r2, [pc, #64]	@ (8003188 <HAL_QSPI_MspInit+0x80>)
 8003148:	f043 0310 	orr.w	r3, r3, #16
 800314c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800314e:	4b0e      	ldr	r3, [pc, #56]	@ (8003188 <HAL_QSPI_MspInit+0x80>)
 8003150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800315a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800315e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003160:	2302      	movs	r3, #2
 8003162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003168:	2303      	movs	r3, #3
 800316a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800316c:	230a      	movs	r3, #10
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	4619      	mov	r1, r3
 8003176:	4805      	ldr	r0, [pc, #20]	@ (800318c <HAL_QSPI_MspInit+0x84>)
 8003178:	f000 fef0 	bl	8003f5c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800317c:	bf00      	nop
 800317e:	3728      	adds	r7, #40	@ 0x28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	a0001000 	.word	0xa0001000
 8003188:	40021000 	.word	0x40021000
 800318c:	48001000 	.word	0x48001000

08003190 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	@ 0x28
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a17      	ldr	r2, [pc, #92]	@ (800320c <HAL_SPI_MspInit+0x7c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d128      	bne.n	8003204 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031b2:	4b17      	ldr	r3, [pc, #92]	@ (8003210 <HAL_SPI_MspInit+0x80>)
 80031b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b6:	4a16      	ldr	r2, [pc, #88]	@ (8003210 <HAL_SPI_MspInit+0x80>)
 80031b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80031be:	4b14      	ldr	r3, [pc, #80]	@ (8003210 <HAL_SPI_MspInit+0x80>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ca:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <HAL_SPI_MspInit+0x80>)
 80031cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ce:	4a10      	ldr	r2, [pc, #64]	@ (8003210 <HAL_SPI_MspInit+0x80>)
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <HAL_SPI_MspInit+0x80>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80031e2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80031e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e8:	2302      	movs	r3, #2
 80031ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f0:	2303      	movs	r3, #3
 80031f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031f4:	2306      	movs	r3, #6
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	4619      	mov	r1, r3
 80031fe:	4805      	ldr	r0, [pc, #20]	@ (8003214 <HAL_SPI_MspInit+0x84>)
 8003200:	f000 feac 	bl	8003f5c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003204:	bf00      	nop
 8003206:	3728      	adds	r7, #40	@ 0x28
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40003c00 	.word	0x40003c00
 8003210:	40021000 	.word	0x40021000
 8003214:	48000800 	.word	0x48000800

08003218 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a08      	ldr	r2, [pc, #32]	@ (8003248 <HAL_SPI_MspDeInit+0x30>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d10a      	bne.n	8003240 <HAL_SPI_MspDeInit+0x28>
  {
    /* USER CODE BEGIN SPI3_MspDeInit 0 */

    /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800322a:	4b08      	ldr	r3, [pc, #32]	@ (800324c <HAL_SPI_MspDeInit+0x34>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322e:	4a07      	ldr	r2, [pc, #28]	@ (800324c <HAL_SPI_MspDeInit+0x34>)
 8003230:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003234:	6593      	str	r3, [r2, #88]	@ 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8003236:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800323a:	4805      	ldr	r0, [pc, #20]	@ (8003250 <HAL_SPI_MspDeInit+0x38>)
 800323c:	f001 f838 	bl	80042b0 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI3_MspDeInit 1 */

    /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40003c00 	.word	0x40003c00
 800324c:	40021000 	.word	0x40021000
 8003250:	48000800 	.word	0x48000800

08003254 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b0ae      	sub	sp, #184	@ 0xb8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800326c:	f107 031c 	add.w	r3, r7, #28
 8003270:	2288      	movs	r2, #136	@ 0x88
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f006 f8d7 	bl	8009428 <memset>
  if(huart->Instance==USART1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a42      	ldr	r2, [pc, #264]	@ (8003388 <HAL_UART_MspInit+0x134>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d13b      	bne.n	80032fc <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003284:	2301      	movs	r3, #1
 8003286:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003288:	2300      	movs	r3, #0
 800328a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	4618      	mov	r0, r3
 8003292:	f002 faf9 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800329c:	f7ff fe48 	bl	8002f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032a0:	4b3a      	ldr	r3, [pc, #232]	@ (800338c <HAL_UART_MspInit+0x138>)
 80032a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a4:	4a39      	ldr	r2, [pc, #228]	@ (800338c <HAL_UART_MspInit+0x138>)
 80032a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80032ac:	4b37      	ldr	r3, [pc, #220]	@ (800338c <HAL_UART_MspInit+0x138>)
 80032ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b8:	4b34      	ldr	r3, [pc, #208]	@ (800338c <HAL_UART_MspInit+0x138>)
 80032ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032bc:	4a33      	ldr	r2, [pc, #204]	@ (800338c <HAL_UART_MspInit+0x138>)
 80032be:	f043 0302 	orr.w	r3, r3, #2
 80032c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032c4:	4b31      	ldr	r3, [pc, #196]	@ (800338c <HAL_UART_MspInit+0x138>)
 80032c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80032d0:	23c0      	movs	r3, #192	@ 0xc0
 80032d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d6:	2302      	movs	r3, #2
 80032d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e2:	2303      	movs	r3, #3
 80032e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032e8:	2307      	movs	r3, #7
 80032ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80032f2:	4619      	mov	r1, r3
 80032f4:	4826      	ldr	r0, [pc, #152]	@ (8003390 <HAL_UART_MspInit+0x13c>)
 80032f6:	f000 fe31 	bl	8003f5c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80032fa:	e040      	b.n	800337e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a24      	ldr	r2, [pc, #144]	@ (8003394 <HAL_UART_MspInit+0x140>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d13b      	bne.n	800337e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003306:	2304      	movs	r3, #4
 8003308:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800330a:	2300      	movs	r3, #0
 800330c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800330e:	f107 031c 	add.w	r3, r7, #28
 8003312:	4618      	mov	r0, r3
 8003314:	f002 fab8 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800331e:	f7ff fe07 	bl	8002f30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003322:	4b1a      	ldr	r3, [pc, #104]	@ (800338c <HAL_UART_MspInit+0x138>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003326:	4a19      	ldr	r2, [pc, #100]	@ (800338c <HAL_UART_MspInit+0x138>)
 8003328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800332c:	6593      	str	r3, [r2, #88]	@ 0x58
 800332e:	4b17      	ldr	r3, [pc, #92]	@ (800338c <HAL_UART_MspInit+0x138>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003332:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800333a:	4b14      	ldr	r3, [pc, #80]	@ (800338c <HAL_UART_MspInit+0x138>)
 800333c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333e:	4a13      	ldr	r2, [pc, #76]	@ (800338c <HAL_UART_MspInit+0x138>)
 8003340:	f043 0308 	orr.w	r3, r3, #8
 8003344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003346:	4b11      	ldr	r3, [pc, #68]	@ (800338c <HAL_UART_MspInit+0x138>)
 8003348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003352:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003366:	2303      	movs	r3, #3
 8003368:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800336c:	2307      	movs	r3, #7
 800336e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003372:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003376:	4619      	mov	r1, r3
 8003378:	4807      	ldr	r0, [pc, #28]	@ (8003398 <HAL_UART_MspInit+0x144>)
 800337a:	f000 fdef 	bl	8003f5c <HAL_GPIO_Init>
}
 800337e:	bf00      	nop
 8003380:	37b8      	adds	r7, #184	@ 0xb8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40013800 	.word	0x40013800
 800338c:	40021000 	.word	0x40021000
 8003390:	48000400 	.word	0x48000400
 8003394:	40004800 	.word	0x40004800
 8003398:	48000c00 	.word	0x48000c00

0800339c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b0ac      	sub	sp, #176	@ 0xb0
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	2288      	movs	r2, #136	@ 0x88
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f006 f833 	bl	8009428 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033ca:	d17c      	bne.n	80034c6 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80033cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80033d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80033d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80033da:	2301      	movs	r3, #1
 80033dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80033de:	2301      	movs	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80033e2:	2318      	movs	r3, #24
 80033e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80033e6:	2307      	movs	r3, #7
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80033ea:	2302      	movs	r3, #2
 80033ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80033ee:	2302      	movs	r3, #2
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80033f2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80033f6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	4618      	mov	r0, r3
 80033fe:	f002 fa43 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8003408:	f7ff fd92 	bl	8002f30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340c:	4b30      	ldr	r3, [pc, #192]	@ (80034d0 <HAL_PCD_MspInit+0x134>)
 800340e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003410:	4a2f      	ldr	r2, [pc, #188]	@ (80034d0 <HAL_PCD_MspInit+0x134>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003418:	4b2d      	ldr	r3, [pc, #180]	@ (80034d0 <HAL_PCD_MspInit+0x134>)
 800341a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003424:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003428:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003438:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800343c:	4619      	mov	r1, r3
 800343e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003442:	f000 fd8b 	bl	8003f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8003446:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800344a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345a:	2303      	movs	r3, #3
 800345c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003460:	230a      	movs	r3, #10
 8003462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003466:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800346a:	4619      	mov	r1, r3
 800346c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003470:	f000 fd74 	bl	8003f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003474:	4b16      	ldr	r3, [pc, #88]	@ (80034d0 <HAL_PCD_MspInit+0x134>)
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003478:	4a15      	ldr	r2, [pc, #84]	@ (80034d0 <HAL_PCD_MspInit+0x134>)
 800347a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800347e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003480:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <HAL_PCD_MspInit+0x134>)
 8003482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348c:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <HAL_PCD_MspInit+0x134>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d114      	bne.n	80034c2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003498:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <HAL_PCD_MspInit+0x134>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349c:	4a0c      	ldr	r2, [pc, #48]	@ (80034d0 <HAL_PCD_MspInit+0x134>)
 800349e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034a4:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <HAL_PCD_MspInit+0x134>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80034b0:	f001 fb1e 	bl	8004af0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b4:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <HAL_PCD_MspInit+0x134>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b8:	4a05      	ldr	r2, [pc, #20]	@ (80034d0 <HAL_PCD_MspInit+0x134>)
 80034ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80034c0:	e001      	b.n	80034c6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80034c2:	f001 fb15 	bl	8004af0 <HAL_PWREx_EnableVddUSB>
}
 80034c6:	bf00      	nop
 80034c8:	37b0      	adds	r7, #176	@ 0xb0
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000

080034d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034d8:	bf00      	nop
 80034da:	e7fd      	b.n	80034d8 <NMI_Handler+0x4>

080034dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <HardFault_Handler+0x4>

080034e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e8:	bf00      	nop
 80034ea:	e7fd      	b.n	80034e8 <MemManage_Handler+0x4>

080034ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034f0:	bf00      	nop
 80034f2:	e7fd      	b.n	80034f0 <BusFault_Handler+0x4>

080034f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034f8:	bf00      	nop
 80034fa:	e7fd      	b.n	80034f8 <UsageFault_Handler+0x4>

080034fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800352a:	f000 fab5 	bl	8003a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}

08003532 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003536:	2020      	movs	r0, #32
 8003538:	f000 ffde 	bl	80044f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800353c:	2040      	movs	r0, #64	@ 0x40
 800353e:	f000 ffdb 	bl	80044f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003542:	2080      	movs	r0, #128	@ 0x80
 8003544:	f000 ffd8 	bl	80044f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003548:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800354c:	f000 ffd4 	bl	80044f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003550:	bf00      	nop
 8003552:	bd80      	pop	{r7, pc}

08003554 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8003558:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800355c:	f000 ffcc 	bl	80044f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003560:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003564:	f000 ffc8 	bl	80044f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003568:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800356c:	f000 ffc4 	bl	80044f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8003570:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003574:	f000 ffc0 	bl	80044f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003578:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800357c:	f000 ffbc 	bl	80044f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003580:	bf00      	nop
 8003582:	bd80      	pop	{r7, pc}

08003584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return 1;
 8003588:	2301      	movs	r3, #1
}
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <_kill>:

int _kill(int pid, int sig)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800359e:	f006 f81b 	bl	80095d8 <__errno>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2216      	movs	r2, #22
 80035a6:	601a      	str	r2, [r3, #0]
  return -1;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_exit>:

void _exit (int status)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035bc:	f04f 31ff 	mov.w	r1, #4294967295
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ffe7 	bl	8003594 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035c6:	bf00      	nop
 80035c8:	e7fd      	b.n	80035c6 <_exit+0x12>

080035ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e00a      	b.n	80035f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035dc:	f3af 8000 	nop.w
 80035e0:	4601      	mov	r1, r0
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	60ba      	str	r2, [r7, #8]
 80035e8:	b2ca      	uxtb	r2, r1
 80035ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3301      	adds	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	dbf0      	blt.n	80035dc <_read+0x12>
  }

  return len;
 80035fa:	687b      	ldr	r3, [r7, #4]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800360c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800362c:	605a      	str	r2, [r3, #4]
  return 0;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_isatty>:

int _isatty(int file)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003644:	2301      	movs	r3, #1
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003674:	4a14      	ldr	r2, [pc, #80]	@ (80036c8 <_sbrk+0x5c>)
 8003676:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <_sbrk+0x60>)
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003680:	4b13      	ldr	r3, [pc, #76]	@ (80036d0 <_sbrk+0x64>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003688:	4b11      	ldr	r3, [pc, #68]	@ (80036d0 <_sbrk+0x64>)
 800368a:	4a12      	ldr	r2, [pc, #72]	@ (80036d4 <_sbrk+0x68>)
 800368c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800368e:	4b10      	ldr	r3, [pc, #64]	@ (80036d0 <_sbrk+0x64>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	429a      	cmp	r2, r3
 800369a:	d207      	bcs.n	80036ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800369c:	f005 ff9c 	bl	80095d8 <__errno>
 80036a0:	4603      	mov	r3, r0
 80036a2:	220c      	movs	r2, #12
 80036a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036a6:	f04f 33ff 	mov.w	r3, #4294967295
 80036aa:	e009      	b.n	80036c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036ac:	4b08      	ldr	r3, [pc, #32]	@ (80036d0 <_sbrk+0x64>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036b2:	4b07      	ldr	r3, [pc, #28]	@ (80036d0 <_sbrk+0x64>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	4a05      	ldr	r2, [pc, #20]	@ (80036d0 <_sbrk+0x64>)
 80036bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036be:	68fb      	ldr	r3, [r7, #12]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20018000 	.word	0x20018000
 80036cc:	00000400 	.word	0x00000400
 80036d0:	20000998 	.word	0x20000998
 80036d4:	200011b8 	.word	0x200011b8

080036d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80036dc:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <SystemInit+0x20>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	4a05      	ldr	r2, [pc, #20]	@ (80036f8 <SystemInit+0x20>)
 80036e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8003706:	4b0d      	ldr	r3, [pc, #52]	@ (800373c <WIFI_Init+0x40>)
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	4b0d      	ldr	r3, [pc, #52]	@ (8003740 <WIFI_Init+0x44>)
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <WIFI_Init+0x48>)
 8003710:	4a0d      	ldr	r2, [pc, #52]	@ (8003748 <WIFI_Init+0x4c>)
 8003712:	490e      	ldr	r1, [pc, #56]	@ (800374c <WIFI_Init+0x50>)
 8003714:	480e      	ldr	r0, [pc, #56]	@ (8003750 <WIFI_Init+0x54>)
 8003716:	f7fe f80f 	bl	8001738 <ES_WIFI_RegisterBusIO>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003720:	480b      	ldr	r0, [pc, #44]	@ (8003750 <WIFI_Init+0x54>)
 8003722:	f7fd ffd5 	bl	80016d0 <ES_WIFI_Init>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8003730:	79fb      	ldrb	r3, [r7, #7]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	08002295 	.word	0x08002295
 8003740:	08002389 	.word	0x08002389
 8003744:	08002465 	.word	0x08002465
 8003748:	0800217d 	.word	0x0800217d
 800374c:	08001fcd 	.word	0x08001fcd
 8003750:	2000099c 	.word	0x2000099c

08003754 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	4613      	mov	r3, r2
 8003760:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	68f9      	ldr	r1, [r7, #12]
 800376c:	4809      	ldr	r0, [pc, #36]	@ (8003794 <WIFI_Connect+0x40>)
 800376e:	f7fe f817 	bl	80017a0 <ES_WIFI_Connect>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003778:	4806      	ldr	r0, [pc, #24]	@ (8003794 <WIFI_Connect+0x40>)
 800377a:	f7fe f889 	bl	8001890 <ES_WIFI_GetNetworkSettings>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8003788:	7dfb      	ldrb	r3, [r7, #23]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	2000099c 	.word	0x2000099c

08003798 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <WIFI_GetMAC_Address+0x32>
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	461a      	mov	r2, r3
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4806      	ldr	r0, [pc, #24]	@ (80037d4 <WIFI_GetMAC_Address+0x3c>)
 80037bc:	f7fe f892 	bl	80018e4 <ES_WIFI_GetMACAddress>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	2000099c 	.word	0x2000099c

080037d8 <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	@ 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	460b      	mov	r3, r1
 80037e6:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 80037f4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80037f6:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 80037f8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80037fa:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 80037fc:	7afb      	ldrb	r3, [r7, #11]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	3302      	adds	r3, #2
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	3303      	adds	r3, #3
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	767b      	strb	r3, [r7, #25]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003828:	f107 0310 	add.w	r3, r7, #16
 800382c:	4619      	mov	r1, r3
 800382e:	4807      	ldr	r0, [pc, #28]	@ (800384c <WIFI_OpenClientConnection+0x74>)
 8003830:	f7fe f88e 	bl	8001950 <ES_WIFI_StartClientConnection>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8003840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003844:	4618      	mov	r0, r3
 8003846:	3728      	adds	r7, #40	@ 0x28
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	2000099c 	.word	0x2000099c

08003850 <WIFI_CloseClientConnection>:
  * @brief  Close client connection
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	77fb      	strb	r3, [r7, #31]
  ES_WIFI_Conn_t conn;
  conn.Number = (uint8_t)socket;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	727b      	strb	r3, [r7, #9]

  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003862:	f107 0308 	add.w	r3, r7, #8
 8003866:	4619      	mov	r1, r3
 8003868:	4806      	ldr	r0, [pc, #24]	@ (8003884 <WIFI_CloseClientConnection+0x34>)
 800386a:	f7fe f95b 	bl	8001b24 <ES_WIFI_StopClientConnection>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <WIFI_CloseClientConnection+0x28>
  {
    ret = WIFI_STATUS_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8003878:	7ffb      	ldrb	r3, [r7, #31]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	2000099c 	.word	0x2000099c

08003888 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af02      	add	r7, sp, #8
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	b2d9      	uxtb	r1, r3
 80038a0:	88fa      	ldrh	r2, [r7, #6]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	4806      	ldr	r0, [pc, #24]	@ (80038c8 <WIFI_SendData+0x40>)
 80038b0:	f7fe f972 	bl	8001b98 <ES_WIFI_SendData>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	2000099c 	.word	0x2000099c

080038cc <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	b2d9      	uxtb	r1, r3
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	4806      	ldr	r0, [pc, #24]	@ (800390c <WIFI_ReceiveData+0x40>)
 80038f4:	f7fe f9fe 	bl	8001cf4 <ES_WIFI_ReceiveData>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8003902:	7dfb      	ldrb	r3, [r7, #23]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	2000099c 	.word	0x2000099c

08003910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003910:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003948 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003914:	f7ff fee0 	bl	80036d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003918:	480c      	ldr	r0, [pc, #48]	@ (800394c <LoopForever+0x6>)
  ldr r1, =_edata
 800391a:	490d      	ldr	r1, [pc, #52]	@ (8003950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800391c:	4a0d      	ldr	r2, [pc, #52]	@ (8003954 <LoopForever+0xe>)
  movs r3, #0
 800391e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003920:	e002      	b.n	8003928 <LoopCopyDataInit>

08003922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003926:	3304      	adds	r3, #4

08003928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800392a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800392c:	d3f9      	bcc.n	8003922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800392e:	4a0a      	ldr	r2, [pc, #40]	@ (8003958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003930:	4c0a      	ldr	r4, [pc, #40]	@ (800395c <LoopForever+0x16>)
  movs r3, #0
 8003932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003934:	e001      	b.n	800393a <LoopFillZerobss>

08003936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003938:	3204      	adds	r2, #4

0800393a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800393a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800393c:	d3fb      	bcc.n	8003936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800393e:	f005 fe51 	bl	80095e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003942:	f7fe fe3b 	bl	80025bc <main>

08003946 <LoopForever>:

LoopForever:
    b LoopForever
 8003946:	e7fe      	b.n	8003946 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003948:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800394c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003950:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003954:	0800c0fc 	.word	0x0800c0fc
  ldr r2, =_sbss
 8003958:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800395c:	200011b8 	.word	0x200011b8

08003960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003960:	e7fe      	b.n	8003960 <ADC1_2_IRQHandler>
	...

08003964 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10b      	bne.n	800398c <BSP_LED_Init+0x28>
 8003974:	4b11      	ldr	r3, [pc, #68]	@ (80039bc <BSP_LED_Init+0x58>)
 8003976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003978:	4a10      	ldr	r2, [pc, #64]	@ (80039bc <BSP_LED_Init+0x58>)
 800397a:	f043 0302 	orr.w	r3, r3, #2
 800397e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003980:	4b0e      	ldr	r3, [pc, #56]	@ (80039bc <BSP_LED_Init+0x58>)
 8003982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 800398c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003990:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003992:	2301      	movs	r3, #1
 8003994:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800399a:	2302      	movs	r3, #2
 800399c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	4a07      	ldr	r2, [pc, #28]	@ (80039c0 <BSP_LED_Init+0x5c>)
 80039a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a6:	f107 020c 	add.w	r2, r7, #12
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fad5 	bl	8003f5c <HAL_GPIO_Init>
}
 80039b2:	bf00      	nop
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	20000004 	.word	0x20000004

080039c4 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	4a06      	ldr	r2, [pc, #24]	@ (80039ec <BSP_LED_On+0x28>)
 80039d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039da:	b291      	uxth	r1, r2
 80039dc:	2201      	movs	r2, #1
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fd72 	bl	80044c8 <HAL_GPIO_WritePin>
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000004 	.word	0x20000004

080039f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039fa:	2003      	movs	r0, #3
 80039fc:	f000 f960 	bl	8003cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a00:	2000      	movs	r0, #0
 8003a02:	f000 f80d 	bl	8003a20 <HAL_InitTick>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	71fb      	strb	r3, [r7, #7]
 8003a10:	e001      	b.n	8003a16 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a12:	f7ff fa93 	bl	8002f3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a16:	79fb      	ldrb	r3, [r7, #7]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a2c:	4b17      	ldr	r3, [pc, #92]	@ (8003a8c <HAL_InitTick+0x6c>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d023      	beq.n	8003a7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a34:	4b16      	ldr	r3, [pc, #88]	@ (8003a90 <HAL_InitTick+0x70>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4b14      	ldr	r3, [pc, #80]	@ (8003a8c <HAL_InitTick+0x6c>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f96d 	bl	8003d2a <HAL_SYSTICK_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10f      	bne.n	8003a76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b0f      	cmp	r3, #15
 8003a5a:	d809      	bhi.n	8003a70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	f000 f937 	bl	8003cd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a68:	4a0a      	ldr	r2, [pc, #40]	@ (8003a94 <HAL_InitTick+0x74>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e007      	b.n	8003a80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
 8003a74:	e004      	b.n	8003a80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
 8003a7a:	e001      	b.n	8003a80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	2000000c 	.word	0x2000000c
 8003a90:	20000000 	.word	0x20000000
 8003a94:	20000008 	.word	0x20000008

08003a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <HAL_IncTick+0x20>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <HAL_IncTick+0x24>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	4a04      	ldr	r2, [pc, #16]	@ (8003abc <HAL_IncTick+0x24>)
 8003aaa:	6013      	str	r3, [r2, #0]
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	2000000c 	.word	0x2000000c
 8003abc:	20001044 	.word	0x20001044

08003ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	@ (8003ad4 <HAL_GetTick+0x14>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20001044 	.word	0x20001044

08003ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ae0:	f7ff ffee 	bl	8003ac0 <HAL_GetTick>
 8003ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d005      	beq.n	8003afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003af2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <HAL_Delay+0x44>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003afe:	bf00      	nop
 8003b00:	f7ff ffde 	bl	8003ac0 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d8f7      	bhi.n	8003b00 <HAL_Delay+0x28>
  {
  }
}
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	2000000c 	.word	0x2000000c

08003b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b30:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b52:	4a04      	ldr	r2, [pc, #16]	@ (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	60d3      	str	r3, [r2, #12]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b6c:	4b04      	ldr	r3, [pc, #16]	@ (8003b80 <__NVIC_GetPriorityGrouping+0x18>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	0a1b      	lsrs	r3, r3, #8
 8003b72:	f003 0307 	and.w	r3, r3, #7
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	db0b      	blt.n	8003bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	f003 021f 	and.w	r2, r3, #31
 8003b9c:	4907      	ldr	r1, [pc, #28]	@ (8003bbc <__NVIC_EnableIRQ+0x38>)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8003baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e000e100 	.word	0xe000e100

08003bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	db0a      	blt.n	8003bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	490c      	ldr	r1, [pc, #48]	@ (8003c0c <__NVIC_SetPriority+0x4c>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	0112      	lsls	r2, r2, #4
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	440b      	add	r3, r1
 8003be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be8:	e00a      	b.n	8003c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4908      	ldr	r1, [pc, #32]	@ (8003c10 <__NVIC_SetPriority+0x50>)
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	3b04      	subs	r3, #4
 8003bf8:	0112      	lsls	r2, r2, #4
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	761a      	strb	r2, [r3, #24]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000e100 	.word	0xe000e100
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b089      	sub	sp, #36	@ 0x24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f1c3 0307 	rsb	r3, r3, #7
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	bf28      	it	cs
 8003c32:	2304      	movcs	r3, #4
 8003c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d902      	bls.n	8003c44 <NVIC_EncodePriority+0x30>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3b03      	subs	r3, #3
 8003c42:	e000      	b.n	8003c46 <NVIC_EncodePriority+0x32>
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43da      	mvns	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	401a      	ands	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	43d9      	mvns	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c6c:	4313      	orrs	r3, r2
         );
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3724      	adds	r7, #36	@ 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c8c:	d301      	bcc.n	8003c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e00f      	b.n	8003cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c92:	4a0a      	ldr	r2, [pc, #40]	@ (8003cbc <SysTick_Config+0x40>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c9a:	210f      	movs	r1, #15
 8003c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca0:	f7ff ff8e 	bl	8003bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca4:	4b05      	ldr	r3, [pc, #20]	@ (8003cbc <SysTick_Config+0x40>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003caa:	4b04      	ldr	r3, [pc, #16]	@ (8003cbc <SysTick_Config+0x40>)
 8003cac:	2207      	movs	r2, #7
 8003cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	e000e010 	.word	0xe000e010

08003cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ff29 	bl	8003b20 <__NVIC_SetPriorityGrouping>
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b086      	sub	sp, #24
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	4603      	mov	r3, r0
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce8:	f7ff ff3e 	bl	8003b68 <__NVIC_GetPriorityGrouping>
 8003cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	6978      	ldr	r0, [r7, #20]
 8003cf4:	f7ff ff8e 	bl	8003c14 <NVIC_EncodePriority>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff ff5d 	bl	8003bc0 <__NVIC_SetPriority>
}
 8003d06:	bf00      	nop
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	4603      	mov	r3, r0
 8003d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff ff31 	bl	8003b84 <__NVIC_EnableIRQ>
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff ffa2 	bl	8003c7c <SysTick_Config>
 8003d38:	4603      	mov	r3, r0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e0ac      	b.n	8003eb0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f8b2 	bl	8003ec4 <DFSDM_GetChannelFromInstance>
 8003d60:	4603      	mov	r3, r0
 8003d62:	4a55      	ldr	r2, [pc, #340]	@ (8003eb8 <HAL_DFSDM_ChannelInit+0x174>)
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e09f      	b.n	8003eb0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff f907 	bl	8002f84 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003d76:	4b51      	ldr	r3, [pc, #324]	@ (8003ebc <HAL_DFSDM_ChannelInit+0x178>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	4a4f      	ldr	r2, [pc, #316]	@ (8003ebc <HAL_DFSDM_ChannelInit+0x178>)
 8003d7e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003d80:	4b4e      	ldr	r3, [pc, #312]	@ (8003ebc <HAL_DFSDM_ChannelInit+0x178>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d125      	bne.n	8003dd4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003d88:	4b4d      	ldr	r3, [pc, #308]	@ (8003ec0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8003ec0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003d8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d92:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003d94:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4948      	ldr	r1, [pc, #288]	@ (8003ec0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003da2:	4b47      	ldr	r3, [pc, #284]	@ (8003ec0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a46      	ldr	r2, [pc, #280]	@ (8003ec0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003da8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003dac:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	791b      	ldrb	r3, [r3, #4]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d108      	bne.n	8003dc8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003db6:	4b42      	ldr	r3, [pc, #264]	@ (8003ec0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	041b      	lsls	r3, r3, #16
 8003dc2:	493f      	ldr	r1, [pc, #252]	@ (8003ec0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a3c      	ldr	r2, [pc, #240]	@ (8003ec0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003dce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003dd2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003de2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6819      	ldr	r1, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003df2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003df8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 020f 	bic.w	r2, r2, #15
 8003e10:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6819      	ldr	r1, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003e38:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6899      	ldr	r1, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f002 0207 	and.w	r2, r2, #7
 8003e64:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e70:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e76:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e90:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f810 	bl	8003ec4 <DFSDM_GetChannelFromInstance>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4904      	ldr	r1, [pc, #16]	@ (8003eb8 <HAL_DFSDM_ChannelInit+0x174>)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	2000104c 	.word	0x2000104c
 8003ebc:	20001048 	.word	0x20001048
 8003ec0:	40016000 	.word	0x40016000

08003ec4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a1c      	ldr	r2, [pc, #112]	@ (8003f40 <DFSDM_GetChannelFromInstance+0x7c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d102      	bne.n	8003eda <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e02b      	b.n	8003f32 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a19      	ldr	r2, [pc, #100]	@ (8003f44 <DFSDM_GetChannelFromInstance+0x80>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d102      	bne.n	8003ee8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e024      	b.n	8003f32 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a17      	ldr	r2, [pc, #92]	@ (8003f48 <DFSDM_GetChannelFromInstance+0x84>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d102      	bne.n	8003ef6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	e01d      	b.n	8003f32 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a14      	ldr	r2, [pc, #80]	@ (8003f4c <DFSDM_GetChannelFromInstance+0x88>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d102      	bne.n	8003f04 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003efe:	2304      	movs	r3, #4
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e016      	b.n	8003f32 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a12      	ldr	r2, [pc, #72]	@ (8003f50 <DFSDM_GetChannelFromInstance+0x8c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d102      	bne.n	8003f12 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003f0c:	2305      	movs	r3, #5
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	e00f      	b.n	8003f32 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a0f      	ldr	r2, [pc, #60]	@ (8003f54 <DFSDM_GetChannelFromInstance+0x90>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d102      	bne.n	8003f20 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003f1a:	2306      	movs	r3, #6
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	e008      	b.n	8003f32 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a0d      	ldr	r2, [pc, #52]	@ (8003f58 <DFSDM_GetChannelFromInstance+0x94>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d102      	bne.n	8003f2e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003f28:	2307      	movs	r3, #7
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e001      	b.n	8003f32 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003f32:	68fb      	ldr	r3, [r7, #12]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40016000 	.word	0x40016000
 8003f44:	40016020 	.word	0x40016020
 8003f48:	40016040 	.word	0x40016040
 8003f4c:	40016080 	.word	0x40016080
 8003f50:	400160a0 	.word	0x400160a0
 8003f54:	400160c0 	.word	0x400160c0
 8003f58:	400160e0 	.word	0x400160e0

08003f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f6a:	e17f      	b.n	800426c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2101      	movs	r1, #1
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	fa01 f303 	lsl.w	r3, r1, r3
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8171 	beq.w	8004266 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d005      	beq.n	8003f9c <HAL_GPIO_Init+0x40>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d130      	bne.n	8003ffe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	f003 0201 	and.w	r2, r3, #1
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b03      	cmp	r3, #3
 8004008:	d118      	bne.n	800403c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004010:	2201      	movs	r2, #1
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4013      	ands	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	08db      	lsrs	r3, r3, #3
 8004026:	f003 0201 	and.w	r2, r3, #1
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b03      	cmp	r3, #3
 8004046:	d017      	beq.n	8004078 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	2203      	movs	r2, #3
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4013      	ands	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d123      	bne.n	80040cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	08da      	lsrs	r2, r3, #3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3208      	adds	r2, #8
 800408c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004090:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	220f      	movs	r2, #15
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	08da      	lsrs	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3208      	adds	r2, #8
 80040c6:	6939      	ldr	r1, [r7, #16]
 80040c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	2203      	movs	r2, #3
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4013      	ands	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0203 	and.w	r2, r3, #3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80ac 	beq.w	8004266 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800410e:	4b5f      	ldr	r3, [pc, #380]	@ (800428c <HAL_GPIO_Init+0x330>)
 8004110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004112:	4a5e      	ldr	r2, [pc, #376]	@ (800428c <HAL_GPIO_Init+0x330>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6613      	str	r3, [r2, #96]	@ 0x60
 800411a:	4b5c      	ldr	r3, [pc, #368]	@ (800428c <HAL_GPIO_Init+0x330>)
 800411c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004126:	4a5a      	ldr	r2, [pc, #360]	@ (8004290 <HAL_GPIO_Init+0x334>)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	089b      	lsrs	r3, r3, #2
 800412c:	3302      	adds	r3, #2
 800412e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004132:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	220f      	movs	r2, #15
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4013      	ands	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004150:	d025      	beq.n	800419e <HAL_GPIO_Init+0x242>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a4f      	ldr	r2, [pc, #316]	@ (8004294 <HAL_GPIO_Init+0x338>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01f      	beq.n	800419a <HAL_GPIO_Init+0x23e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a4e      	ldr	r2, [pc, #312]	@ (8004298 <HAL_GPIO_Init+0x33c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d019      	beq.n	8004196 <HAL_GPIO_Init+0x23a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a4d      	ldr	r2, [pc, #308]	@ (800429c <HAL_GPIO_Init+0x340>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d013      	beq.n	8004192 <HAL_GPIO_Init+0x236>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a4c      	ldr	r2, [pc, #304]	@ (80042a0 <HAL_GPIO_Init+0x344>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00d      	beq.n	800418e <HAL_GPIO_Init+0x232>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a4b      	ldr	r2, [pc, #300]	@ (80042a4 <HAL_GPIO_Init+0x348>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d007      	beq.n	800418a <HAL_GPIO_Init+0x22e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a4a      	ldr	r2, [pc, #296]	@ (80042a8 <HAL_GPIO_Init+0x34c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <HAL_GPIO_Init+0x22a>
 8004182:	2306      	movs	r3, #6
 8004184:	e00c      	b.n	80041a0 <HAL_GPIO_Init+0x244>
 8004186:	2307      	movs	r3, #7
 8004188:	e00a      	b.n	80041a0 <HAL_GPIO_Init+0x244>
 800418a:	2305      	movs	r3, #5
 800418c:	e008      	b.n	80041a0 <HAL_GPIO_Init+0x244>
 800418e:	2304      	movs	r3, #4
 8004190:	e006      	b.n	80041a0 <HAL_GPIO_Init+0x244>
 8004192:	2303      	movs	r3, #3
 8004194:	e004      	b.n	80041a0 <HAL_GPIO_Init+0x244>
 8004196:	2302      	movs	r3, #2
 8004198:	e002      	b.n	80041a0 <HAL_GPIO_Init+0x244>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <HAL_GPIO_Init+0x244>
 800419e:	2300      	movs	r3, #0
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	f002 0203 	and.w	r2, r2, #3
 80041a6:	0092      	lsls	r2, r2, #2
 80041a8:	4093      	lsls	r3, r2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041b0:	4937      	ldr	r1, [pc, #220]	@ (8004290 <HAL_GPIO_Init+0x334>)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	3302      	adds	r3, #2
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041be:	4b3b      	ldr	r3, [pc, #236]	@ (80042ac <HAL_GPIO_Init+0x350>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	43db      	mvns	r3, r3
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4013      	ands	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041e2:	4a32      	ldr	r2, [pc, #200]	@ (80042ac <HAL_GPIO_Init+0x350>)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041e8:	4b30      	ldr	r3, [pc, #192]	@ (80042ac <HAL_GPIO_Init+0x350>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	43db      	mvns	r3, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800420c:	4a27      	ldr	r2, [pc, #156]	@ (80042ac <HAL_GPIO_Init+0x350>)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004212:	4b26      	ldr	r3, [pc, #152]	@ (80042ac <HAL_GPIO_Init+0x350>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	43db      	mvns	r3, r3
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4013      	ands	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004236:	4a1d      	ldr	r2, [pc, #116]	@ (80042ac <HAL_GPIO_Init+0x350>)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800423c:	4b1b      	ldr	r3, [pc, #108]	@ (80042ac <HAL_GPIO_Init+0x350>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	43db      	mvns	r3, r3
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4013      	ands	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004260:	4a12      	ldr	r2, [pc, #72]	@ (80042ac <HAL_GPIO_Init+0x350>)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	3301      	adds	r3, #1
 800426a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	fa22 f303 	lsr.w	r3, r2, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	f47f ae78 	bne.w	8003f6c <HAL_GPIO_Init+0x10>
  }
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000
 8004290:	40010000 	.word	0x40010000
 8004294:	48000400 	.word	0x48000400
 8004298:	48000800 	.word	0x48000800
 800429c:	48000c00 	.word	0x48000c00
 80042a0:	48001000 	.word	0x48001000
 80042a4:	48001400 	.word	0x48001400
 80042a8:	48001800 	.word	0x48001800
 80042ac:	40010400 	.word	0x40010400

080042b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80042be:	e0cd      	b.n	800445c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80042c0:	2201      	movs	r2, #1
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80c0 	beq.w	8004456 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80042d6:	4a68      	ldr	r2, [pc, #416]	@ (8004478 <HAL_GPIO_DeInit+0x1c8>)
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	089b      	lsrs	r3, r3, #2
 80042dc:	3302      	adds	r3, #2
 80042de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	220f      	movs	r2, #15
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4013      	ands	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042fe:	d025      	beq.n	800434c <HAL_GPIO_DeInit+0x9c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a5e      	ldr	r2, [pc, #376]	@ (800447c <HAL_GPIO_DeInit+0x1cc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d01f      	beq.n	8004348 <HAL_GPIO_DeInit+0x98>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a5d      	ldr	r2, [pc, #372]	@ (8004480 <HAL_GPIO_DeInit+0x1d0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d019      	beq.n	8004344 <HAL_GPIO_DeInit+0x94>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a5c      	ldr	r2, [pc, #368]	@ (8004484 <HAL_GPIO_DeInit+0x1d4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d013      	beq.n	8004340 <HAL_GPIO_DeInit+0x90>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a5b      	ldr	r2, [pc, #364]	@ (8004488 <HAL_GPIO_DeInit+0x1d8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00d      	beq.n	800433c <HAL_GPIO_DeInit+0x8c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a5a      	ldr	r2, [pc, #360]	@ (800448c <HAL_GPIO_DeInit+0x1dc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d007      	beq.n	8004338 <HAL_GPIO_DeInit+0x88>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a59      	ldr	r2, [pc, #356]	@ (8004490 <HAL_GPIO_DeInit+0x1e0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d101      	bne.n	8004334 <HAL_GPIO_DeInit+0x84>
 8004330:	2306      	movs	r3, #6
 8004332:	e00c      	b.n	800434e <HAL_GPIO_DeInit+0x9e>
 8004334:	2307      	movs	r3, #7
 8004336:	e00a      	b.n	800434e <HAL_GPIO_DeInit+0x9e>
 8004338:	2305      	movs	r3, #5
 800433a:	e008      	b.n	800434e <HAL_GPIO_DeInit+0x9e>
 800433c:	2304      	movs	r3, #4
 800433e:	e006      	b.n	800434e <HAL_GPIO_DeInit+0x9e>
 8004340:	2303      	movs	r3, #3
 8004342:	e004      	b.n	800434e <HAL_GPIO_DeInit+0x9e>
 8004344:	2302      	movs	r3, #2
 8004346:	e002      	b.n	800434e <HAL_GPIO_DeInit+0x9e>
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <HAL_GPIO_DeInit+0x9e>
 800434c:	2300      	movs	r3, #0
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	f002 0203 	and.w	r2, r2, #3
 8004354:	0092      	lsls	r2, r2, #2
 8004356:	4093      	lsls	r3, r2
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	429a      	cmp	r2, r3
 800435c:	d132      	bne.n	80043c4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800435e:	4b4d      	ldr	r3, [pc, #308]	@ (8004494 <HAL_GPIO_DeInit+0x1e4>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	43db      	mvns	r3, r3
 8004366:	494b      	ldr	r1, [pc, #300]	@ (8004494 <HAL_GPIO_DeInit+0x1e4>)
 8004368:	4013      	ands	r3, r2
 800436a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800436c:	4b49      	ldr	r3, [pc, #292]	@ (8004494 <HAL_GPIO_DeInit+0x1e4>)
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	43db      	mvns	r3, r3
 8004374:	4947      	ldr	r1, [pc, #284]	@ (8004494 <HAL_GPIO_DeInit+0x1e4>)
 8004376:	4013      	ands	r3, r2
 8004378:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800437a:	4b46      	ldr	r3, [pc, #280]	@ (8004494 <HAL_GPIO_DeInit+0x1e4>)
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	43db      	mvns	r3, r3
 8004382:	4944      	ldr	r1, [pc, #272]	@ (8004494 <HAL_GPIO_DeInit+0x1e4>)
 8004384:	4013      	ands	r3, r2
 8004386:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004388:	4b42      	ldr	r3, [pc, #264]	@ (8004494 <HAL_GPIO_DeInit+0x1e4>)
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	43db      	mvns	r3, r3
 8004390:	4940      	ldr	r1, [pc, #256]	@ (8004494 <HAL_GPIO_DeInit+0x1e4>)
 8004392:	4013      	ands	r3, r2
 8004394:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	220f      	movs	r2, #15
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80043a6:	4a34      	ldr	r2, [pc, #208]	@ (8004478 <HAL_GPIO_DeInit+0x1c8>)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	3302      	adds	r3, #2
 80043ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	43da      	mvns	r2, r3
 80043b6:	4830      	ldr	r0, [pc, #192]	@ (8004478 <HAL_GPIO_DeInit+0x1c8>)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	400a      	ands	r2, r1
 80043be:	3302      	adds	r3, #2
 80043c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	2103      	movs	r1, #3
 80043ce:	fa01 f303 	lsl.w	r3, r1, r3
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	08da      	lsrs	r2, r3, #3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3208      	adds	r2, #8
 80043e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	220f      	movs	r2, #15
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43db      	mvns	r3, r3
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	08d2      	lsrs	r2, r2, #3
 80043f8:	4019      	ands	r1, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3208      	adds	r2, #8
 80043fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	2103      	movs	r1, #3
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	401a      	ands	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	2101      	movs	r1, #1
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	fa01 f303 	lsl.w	r3, r1, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	401a      	ands	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	2103      	movs	r1, #3
 8004436:	fa01 f303 	lsl.w	r3, r1, r3
 800443a:	43db      	mvns	r3, r3
 800443c:	401a      	ands	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004446:	2101      	movs	r1, #1
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	fa01 f303 	lsl.w	r3, r1, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	401a      	ands	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	3301      	adds	r3, #1
 800445a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	f47f af2b 	bne.w	80042c0 <HAL_GPIO_DeInit+0x10>
  }
}
 800446a:	bf00      	nop
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	40010000 	.word	0x40010000
 800447c:	48000400 	.word	0x48000400
 8004480:	48000800 	.word	0x48000800
 8004484:	48000c00 	.word	0x48000c00
 8004488:	48001000 	.word	0x48001000
 800448c:	48001400 	.word	0x48001400
 8004490:	48001800 	.word	0x48001800
 8004494:	40010400 	.word	0x40010400

08004498 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	887b      	ldrh	r3, [r7, #2]
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e001      	b.n	80044ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	807b      	strh	r3, [r7, #2]
 80044d4:	4613      	mov	r3, r2
 80044d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044d8:	787b      	ldrb	r3, [r7, #1]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044de:	887a      	ldrh	r2, [r7, #2]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044e4:	e002      	b.n	80044ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044e6:	887a      	ldrh	r2, [r7, #2]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004502:	4b08      	ldr	r3, [pc, #32]	@ (8004524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d006      	beq.n	800451c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800450e:	4a05      	ldr	r2, [pc, #20]	@ (8004524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 f806 	bl	8004528 <HAL_GPIO_EXTI_Callback>
  }
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40010400 	.word	0x40010400

08004528 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e08d      	b.n	800466c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7fe fd71 	bl	800304c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2224      	movs	r2, #36	@ 0x24
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0201 	bic.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800458e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800459e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d107      	bne.n	80045b8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045b4:	609a      	str	r2, [r3, #8]
 80045b6:	e006      	b.n	80045c6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80045c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d108      	bne.n	80045e0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	e007      	b.n	80045f0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004602:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004612:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69d9      	ldr	r1, [r3, #28]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1a      	ldr	r2, [r3, #32]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b20      	cmp	r3, #32
 8004688:	d138      	bne.n	80046fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004694:	2302      	movs	r3, #2
 8004696:	e032      	b.n	80046fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	@ 0x24
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6819      	ldr	r1, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e000      	b.n	80046fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046fc:	2302      	movs	r3, #2
  }
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b20      	cmp	r3, #32
 800471e:	d139      	bne.n	8004794 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800472a:	2302      	movs	r3, #2
 800472c:	e033      	b.n	8004796 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2224      	movs	r2, #36	@ 0x24
 800473a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800475c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	e000      	b.n	8004796 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004794:	2302      	movs	r3, #2
  }
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b086      	sub	sp, #24
 80047a6:	af02      	add	r7, sp, #8
 80047a8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e101      	b.n	80049b8 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d106      	bne.n	80047ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7fe fde7 	bl	800339c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2203      	movs	r2, #3
 80047d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f003 fd11 	bl	8008208 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	7c1a      	ldrb	r2, [r3, #16]
 80047ee:	f88d 2000 	strb.w	r2, [sp]
 80047f2:	3304      	adds	r3, #4
 80047f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047f6:	f003 fcda 	bl	80081ae <USB_CoreInit>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0d5      	b.n	80049b8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2100      	movs	r1, #0
 8004812:	4618      	mov	r0, r3
 8004814:	f003 fd09 	bl	800822a <USB_SetCurrentMode>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2202      	movs	r2, #2
 8004822:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e0c6      	b.n	80049b8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800482a:	2300      	movs	r3, #0
 800482c:	73fb      	strb	r3, [r7, #15]
 800482e:	e04a      	b.n	80048c6 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004830:	7bfa      	ldrb	r2, [r7, #15]
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	3315      	adds	r3, #21
 8004840:	2201      	movs	r2, #1
 8004842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004844:	7bfa      	ldrb	r2, [r7, #15]
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	3314      	adds	r3, #20
 8004854:	7bfa      	ldrb	r2, [r7, #15]
 8004856:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004858:	7bfa      	ldrb	r2, [r7, #15]
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	b298      	uxth	r0, r3
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	332e      	adds	r3, #46	@ 0x2e
 800486c:	4602      	mov	r2, r0
 800486e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004870:	7bfa      	ldrb	r2, [r7, #15]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	3318      	adds	r3, #24
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004884:	7bfa      	ldrb	r2, [r7, #15]
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	331c      	adds	r3, #28
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004898:	7bfa      	ldrb	r2, [r7, #15]
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	3320      	adds	r3, #32
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048ac:	7bfa      	ldrb	r2, [r7, #15]
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	4613      	mov	r3, r2
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	3324      	adds	r3, #36	@ 0x24
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	3301      	adds	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	791b      	ldrb	r3, [r3, #4]
 80048ca:	7bfa      	ldrb	r2, [r7, #15]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d3af      	bcc.n	8004830 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	73fb      	strb	r3, [r7, #15]
 80048d4:	e044      	b.n	8004960 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048d6:	7bfa      	ldrb	r2, [r7, #15]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048ec:	7bfa      	ldrb	r2, [r7, #15]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80048fe:	7bfa      	ldrb	r2, [r7, #15]
 8004900:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004902:	7bfa      	ldrb	r2, [r7, #15]
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004918:	7bfa      	ldrb	r2, [r7, #15]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800492e:	7bfa      	ldrb	r2, [r7, #15]
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004944:	7bfa      	ldrb	r2, [r7, #15]
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	3301      	adds	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	791b      	ldrb	r3, [r3, #4]
 8004964:	7bfa      	ldrb	r2, [r7, #15]
 8004966:	429a      	cmp	r2, r3
 8004968:	d3b5      	bcc.n	80048d6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	7c1a      	ldrb	r2, [r3, #16]
 8004972:	f88d 2000 	strb.w	r2, [sp]
 8004976:	3304      	adds	r3, #4
 8004978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800497a:	f003 fca3 	bl	80082c4 <USB_DevInit>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e013      	b.n	80049b8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	7b1b      	ldrb	r3, [r3, #12]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d102      	bne.n	80049ac <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f80a 	bl	80049c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f003 fe48 	bl	8008646 <USB_DevDisconnect>

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f2:	f043 0303 	orr.w	r3, r3, #3
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a0c:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a04      	ldr	r2, [pc, #16]	@ (8004a24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a16:	6013      	str	r3, [r2, #0]
}
 8004a18:	bf00      	nop
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40007000 	.word	0x40007000

08004a28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a2c:	4b04      	ldr	r3, [pc, #16]	@ (8004a40 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40007000 	.word	0x40007000

08004a44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a52:	d130      	bne.n	8004ab6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a54:	4b23      	ldr	r3, [pc, #140]	@ (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a60:	d038      	beq.n	8004ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a62:	4b20      	ldr	r3, [pc, #128]	@ (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a72:	4b1d      	ldr	r3, [pc, #116]	@ (8004ae8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2232      	movs	r2, #50	@ 0x32
 8004a78:	fb02 f303 	mul.w	r3, r2, r3
 8004a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004aec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	0c9b      	lsrs	r3, r3, #18
 8004a84:	3301      	adds	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a88:	e002      	b.n	8004a90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a90:	4b14      	ldr	r3, [pc, #80]	@ (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9c:	d102      	bne.n	8004aa4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1f2      	bne.n	8004a8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab0:	d110      	bne.n	8004ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e00f      	b.n	8004ad6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac2:	d007      	beq.n	8004ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ac4:	4b07      	ldr	r3, [pc, #28]	@ (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004acc:	4a05      	ldr	r2, [pc, #20]	@ (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ace:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ad2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40007000 	.word	0x40007000
 8004ae8:	20000000 	.word	0x20000000
 8004aec:	431bde83 	.word	0x431bde83

08004af0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004af4:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a04      	ldr	r2, [pc, #16]	@ (8004b0c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004afe:	6053      	str	r3, [r2, #4]
}
 8004b00:	bf00      	nop
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40007000 	.word	0x40007000

08004b10 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004b18:	f7fe ffd2 	bl	8003ac0 <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e063      	b.n	8004bf0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fe fae3 	bl	8003108 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004b42:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f858 	bl	8004bfc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	021a      	lsls	r2, r3, #8
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2120      	movs	r1, #32
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f850 	bl	8004c18 <QSPI_WaitFlagStateUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004b7c:	7afb      	ldrb	r3, [r7, #11]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d131      	bne.n	8004be6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b8c:	f023 0310 	bic.w	r3, r3, #16
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6852      	ldr	r2, [r2, #4]
 8004b94:	0611      	lsls	r1, r2, #24
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68d2      	ldr	r2, [r2, #12]
 8004b9a:	4311      	orrs	r1, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	4b13      	ldr	r3, [pc, #76]	@ (8004bf8 <HAL_QSPI_Init+0xe8>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6912      	ldr	r2, [r2, #16]
 8004bb2:	0411      	lsls	r1, r2, #16
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6952      	ldr	r2, [r2, #20]
 8004bb8:	4311      	orrs	r1, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6992      	ldr	r2, [r2, #24]
 8004bbe:	4311      	orrs	r1, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8004bee:	7afb      	ldrb	r3, [r7, #11]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	ffe0f8fe 	.word	0xffe0f8fe

08004bfc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	4613      	mov	r3, r2
 8004c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004c28:	e01a      	b.n	8004c60 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c30:	d016      	beq.n	8004c60 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c32:	f7fe ff45 	bl	8003ac0 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d302      	bcc.n	8004c48 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2204      	movs	r2, #4
 8004c4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c54:	f043 0201 	orr.w	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e00e      	b.n	8004c7e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bf14      	ite	ne
 8004c6e:	2301      	movne	r3, #1
 8004c70:	2300      	moveq	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	461a      	mov	r2, r3
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d1d6      	bne.n	8004c2a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e3ca      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c9a:	4b97      	ldr	r3, [pc, #604]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ca4:	4b94      	ldr	r3, [pc, #592]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80e4 	beq.w	8004e84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x4a>
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b0c      	cmp	r3, #12
 8004cc6:	f040 808b 	bne.w	8004de0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	f040 8087 	bne.w	8004de0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cd2:	4b89      	ldr	r3, [pc, #548]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <HAL_RCC_OscConfig+0x62>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e3a2      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1a      	ldr	r2, [r3, #32]
 8004cee:	4b82      	ldr	r3, [pc, #520]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d004      	beq.n	8004d04 <HAL_RCC_OscConfig+0x7c>
 8004cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d02:	e005      	b.n	8004d10 <HAL_RCC_OscConfig+0x88>
 8004d04:	4b7c      	ldr	r3, [pc, #496]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d223      	bcs.n	8004d5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fd55 	bl	80057c8 <RCC_SetFlashLatencyFromMSIRange>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e383      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d28:	4b73      	ldr	r3, [pc, #460]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a72      	ldr	r2, [pc, #456]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d2e:	f043 0308 	orr.w	r3, r3, #8
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	4b70      	ldr	r3, [pc, #448]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	496d      	ldr	r1, [pc, #436]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d46:	4b6c      	ldr	r3, [pc, #432]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	4968      	ldr	r1, [pc, #416]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	604b      	str	r3, [r1, #4]
 8004d5a:	e025      	b.n	8004da8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d5c:	4b66      	ldr	r3, [pc, #408]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a65      	ldr	r2, [pc, #404]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d62:	f043 0308 	orr.w	r3, r3, #8
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	4b63      	ldr	r3, [pc, #396]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	4960      	ldr	r1, [pc, #384]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	495b      	ldr	r1, [pc, #364]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fd15 	bl	80057c8 <RCC_SetFlashLatencyFromMSIRange>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e343      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004da8:	f000 fc4a 	bl	8005640 <HAL_RCC_GetSysClockFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b52      	ldr	r3, [pc, #328]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	4950      	ldr	r1, [pc, #320]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	f003 031f 	and.w	r3, r3, #31
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc4:	4a4e      	ldr	r2, [pc, #312]	@ (8004f00 <HAL_RCC_OscConfig+0x278>)
 8004dc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe fe27 	bl	8003a20 <HAL_InitTick>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d052      	beq.n	8004e82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	e327      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d032      	beq.n	8004e4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004de8:	4b43      	ldr	r3, [pc, #268]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a42      	ldr	r2, [pc, #264]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004df4:	f7fe fe64 	bl	8003ac0 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dfc:	f7fe fe60 	bl	8003ac0 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e310      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e1a:	4b37      	ldr	r3, [pc, #220]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a36      	ldr	r2, [pc, #216]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e20:	f043 0308 	orr.w	r3, r3, #8
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4b34      	ldr	r3, [pc, #208]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	4931      	ldr	r1, [pc, #196]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e38:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	492c      	ldr	r1, [pc, #176]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	604b      	str	r3, [r1, #4]
 8004e4c:	e01a      	b.n	8004e84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a29      	ldr	r2, [pc, #164]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e5a:	f7fe fe31 	bl	8003ac0 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e62:	f7fe fe2d 	bl	8003ac0 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e2dd      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e74:	4b20      	ldr	r3, [pc, #128]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1f0      	bne.n	8004e62 <HAL_RCC_OscConfig+0x1da>
 8004e80:	e000      	b.n	8004e84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d074      	beq.n	8004f7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d005      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x21a>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b0c      	cmp	r3, #12
 8004e9a:	d10e      	bne.n	8004eba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d10b      	bne.n	8004eba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea2:	4b15      	ldr	r3, [pc, #84]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d064      	beq.n	8004f78 <HAL_RCC_OscConfig+0x2f0>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d160      	bne.n	8004f78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e2ba      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x24a>
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004eca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e026      	b.n	8004f20 <HAL_RCC_OscConfig+0x298>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eda:	d115      	bne.n	8004f08 <HAL_RCC_OscConfig+0x280>
 8004edc:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a05      	ldr	r2, [pc, #20]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ee2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	4b03      	ldr	r3, [pc, #12]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a02      	ldr	r2, [pc, #8]	@ (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	e014      	b.n	8004f20 <HAL_RCC_OscConfig+0x298>
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	0800bcd4 	.word	0x0800bcd4
 8004f00:	20000000 	.word	0x20000000
 8004f04:	20000008 	.word	0x20000008
 8004f08:	4ba0      	ldr	r3, [pc, #640]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a9f      	ldr	r2, [pc, #636]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8004f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	4b9d      	ldr	r3, [pc, #628]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a9c      	ldr	r2, [pc, #624]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8004f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d013      	beq.n	8004f50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fe fdca 	bl	8003ac0 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f30:	f7fe fdc6 	bl	8003ac0 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	@ 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e276      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f42:	4b92      	ldr	r3, [pc, #584]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f0      	beq.n	8004f30 <HAL_RCC_OscConfig+0x2a8>
 8004f4e:	e014      	b.n	8004f7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fe fdb6 	bl	8003ac0 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f58:	f7fe fdb2 	bl	8003ac0 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b64      	cmp	r3, #100	@ 0x64
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e262      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f6a:	4b88      	ldr	r3, [pc, #544]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x2d0>
 8004f76:	e000      	b.n	8004f7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d060      	beq.n	8005048 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_OscConfig+0x310>
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b0c      	cmp	r3, #12
 8004f90:	d119      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d116      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f98:	4b7c      	ldr	r3, [pc, #496]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x328>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e23f      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb0:	4b76      	ldr	r3, [pc, #472]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	061b      	lsls	r3, r3, #24
 8004fbe:	4973      	ldr	r1, [pc, #460]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fc4:	e040      	b.n	8005048 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d023      	beq.n	8005016 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fce:	4b6f      	ldr	r3, [pc, #444]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a6e      	ldr	r2, [pc, #440]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8004fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fda:	f7fe fd71 	bl	8003ac0 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fe2:	f7fe fd6d 	bl	8003ac0 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e21d      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ff4:	4b65      	ldr	r3, [pc, #404]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f0      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005000:	4b62      	ldr	r3, [pc, #392]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	061b      	lsls	r3, r3, #24
 800500e:	495f      	ldr	r1, [pc, #380]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8005010:	4313      	orrs	r3, r2
 8005012:	604b      	str	r3, [r1, #4]
 8005014:	e018      	b.n	8005048 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005016:	4b5d      	ldr	r3, [pc, #372]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a5c      	ldr	r2, [pc, #368]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 800501c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005022:	f7fe fd4d 	bl	8003ac0 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800502a:	f7fe fd49 	bl	8003ac0 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e1f9      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800503c:	4b53      	ldr	r3, [pc, #332]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f0      	bne.n	800502a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d03c      	beq.n	80050ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01c      	beq.n	8005096 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800505c:	4b4b      	ldr	r3, [pc, #300]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 800505e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005062:	4a4a      	ldr	r2, [pc, #296]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506c:	f7fe fd28 	bl	8003ac0 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005074:	f7fe fd24 	bl	8003ac0 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e1d4      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005086:	4b41      	ldr	r3, [pc, #260]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8005088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0ef      	beq.n	8005074 <HAL_RCC_OscConfig+0x3ec>
 8005094:	e01b      	b.n	80050ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005096:	4b3d      	ldr	r3, [pc, #244]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8005098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800509c:	4a3b      	ldr	r2, [pc, #236]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a6:	f7fe fd0b 	bl	8003ac0 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ae:	f7fe fd07 	bl	8003ac0 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e1b7      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050c0:	4b32      	ldr	r3, [pc, #200]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 80050c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ef      	bne.n	80050ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 80a6 	beq.w	8005228 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050dc:	2300      	movs	r3, #0
 80050de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80050e0:	4b2a      	ldr	r3, [pc, #168]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 80050e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10d      	bne.n	8005108 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ec:	4b27      	ldr	r3, [pc, #156]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 80050ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f0:	4a26      	ldr	r2, [pc, #152]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 80050f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80050f8:	4b24      	ldr	r3, [pc, #144]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 80050fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005104:	2301      	movs	r3, #1
 8005106:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005108:	4b21      	ldr	r3, [pc, #132]	@ (8005190 <HAL_RCC_OscConfig+0x508>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d118      	bne.n	8005146 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005114:	4b1e      	ldr	r3, [pc, #120]	@ (8005190 <HAL_RCC_OscConfig+0x508>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1d      	ldr	r2, [pc, #116]	@ (8005190 <HAL_RCC_OscConfig+0x508>)
 800511a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800511e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005120:	f7fe fcce 	bl	8003ac0 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005128:	f7fe fcca 	bl	8003ac0 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e17a      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800513a:	4b15      	ldr	r3, [pc, #84]	@ (8005190 <HAL_RCC_OscConfig+0x508>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d108      	bne.n	8005160 <HAL_RCC_OscConfig+0x4d8>
 800514e:	4b0f      	ldr	r3, [pc, #60]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005154:	4a0d      	ldr	r2, [pc, #52]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800515e:	e029      	b.n	80051b4 <HAL_RCC_OscConfig+0x52c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b05      	cmp	r3, #5
 8005166:	d115      	bne.n	8005194 <HAL_RCC_OscConfig+0x50c>
 8005168:	4b08      	ldr	r3, [pc, #32]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516e:	4a07      	ldr	r2, [pc, #28]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8005170:	f043 0304 	orr.w	r3, r3, #4
 8005174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005178:	4b04      	ldr	r3, [pc, #16]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517e:	4a03      	ldr	r2, [pc, #12]	@ (800518c <HAL_RCC_OscConfig+0x504>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005188:	e014      	b.n	80051b4 <HAL_RCC_OscConfig+0x52c>
 800518a:	bf00      	nop
 800518c:	40021000 	.word	0x40021000
 8005190:	40007000 	.word	0x40007000
 8005194:	4b9c      	ldr	r3, [pc, #624]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519a:	4a9b      	ldr	r2, [pc, #620]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051a4:	4b98      	ldr	r3, [pc, #608]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051aa:	4a97      	ldr	r2, [pc, #604]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80051ac:	f023 0304 	bic.w	r3, r3, #4
 80051b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d016      	beq.n	80051ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fe fc80 	bl	8003ac0 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7fe fc7c 	bl	8003ac0 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e12a      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051da:	4b8b      	ldr	r3, [pc, #556]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80051dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0ed      	beq.n	80051c4 <HAL_RCC_OscConfig+0x53c>
 80051e8:	e015      	b.n	8005216 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ea:	f7fe fc69 	bl	8003ac0 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051f0:	e00a      	b.n	8005208 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f2:	f7fe fc65 	bl	8003ac0 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005200:	4293      	cmp	r3, r2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e113      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005208:	4b7f      	ldr	r3, [pc, #508]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1ed      	bne.n	80051f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005216:	7ffb      	ldrb	r3, [r7, #31]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d105      	bne.n	8005228 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521c:	4b7a      	ldr	r3, [pc, #488]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 800521e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005220:	4a79      	ldr	r2, [pc, #484]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 8005222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005226:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 80fe 	beq.w	800542e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	2b02      	cmp	r3, #2
 8005238:	f040 80d0 	bne.w	80053dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800523c:	4b72      	ldr	r3, [pc, #456]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f003 0203 	and.w	r2, r3, #3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	429a      	cmp	r2, r3
 800524e:	d130      	bne.n	80052b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525a:	3b01      	subs	r3, #1
 800525c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800525e:	429a      	cmp	r2, r3
 8005260:	d127      	bne.n	80052b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800526c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d11f      	bne.n	80052b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800527c:	2a07      	cmp	r2, #7
 800527e:	bf14      	ite	ne
 8005280:	2201      	movne	r2, #1
 8005282:	2200      	moveq	r2, #0
 8005284:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005286:	4293      	cmp	r3, r2
 8005288:	d113      	bne.n	80052b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005294:	085b      	lsrs	r3, r3, #1
 8005296:	3b01      	subs	r3, #1
 8005298:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800529a:	429a      	cmp	r2, r3
 800529c:	d109      	bne.n	80052b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a8:	085b      	lsrs	r3, r3, #1
 80052aa:	3b01      	subs	r3, #1
 80052ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d06e      	beq.n	8005390 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b0c      	cmp	r3, #12
 80052b6:	d069      	beq.n	800538c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80052b8:	4b53      	ldr	r3, [pc, #332]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d105      	bne.n	80052d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80052c4:	4b50      	ldr	r3, [pc, #320]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0ad      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052d4:	4b4c      	ldr	r3, [pc, #304]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80052da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052e0:	f7fe fbee 	bl	8003ac0 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fe fbea 	bl	8003ac0 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e09a      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052fa:	4b43      	ldr	r3, [pc, #268]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005306:	4b40      	ldr	r3, [pc, #256]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	4b40      	ldr	r3, [pc, #256]	@ (800540c <HAL_RCC_OscConfig+0x784>)
 800530c:	4013      	ands	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005316:	3a01      	subs	r2, #1
 8005318:	0112      	lsls	r2, r2, #4
 800531a:	4311      	orrs	r1, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005320:	0212      	lsls	r2, r2, #8
 8005322:	4311      	orrs	r1, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005328:	0852      	lsrs	r2, r2, #1
 800532a:	3a01      	subs	r2, #1
 800532c:	0552      	lsls	r2, r2, #21
 800532e:	4311      	orrs	r1, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005334:	0852      	lsrs	r2, r2, #1
 8005336:	3a01      	subs	r2, #1
 8005338:	0652      	lsls	r2, r2, #25
 800533a:	4311      	orrs	r1, r2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005340:	0912      	lsrs	r2, r2, #4
 8005342:	0452      	lsls	r2, r2, #17
 8005344:	430a      	orrs	r2, r1
 8005346:	4930      	ldr	r1, [pc, #192]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 8005348:	4313      	orrs	r3, r2
 800534a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800534c:	4b2e      	ldr	r3, [pc, #184]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a2d      	ldr	r2, [pc, #180]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 8005352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005356:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005358:	4b2b      	ldr	r3, [pc, #172]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a2a      	ldr	r2, [pc, #168]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 800535e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005362:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005364:	f7fe fbac 	bl	8003ac0 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536c:	f7fe fba8 	bl	8003ac0 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e058      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800537e:	4b22      	ldr	r3, [pc, #136]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f0      	beq.n	800536c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800538a:	e050      	b.n	800542e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e04f      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005390:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d148      	bne.n	800542e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800539c:	4b1a      	ldr	r3, [pc, #104]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a19      	ldr	r2, [pc, #100]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80053a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053a8:	4b17      	ldr	r3, [pc, #92]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80053ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053b4:	f7fe fb84 	bl	8003ac0 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053bc:	f7fe fb80 	bl	8003ac0 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e030      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCC_OscConfig+0x734>
 80053da:	e028      	b.n	800542e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b0c      	cmp	r3, #12
 80053e0:	d023      	beq.n	800542a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e2:	4b09      	ldr	r3, [pc, #36]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a08      	ldr	r2, [pc, #32]	@ (8005408 <HAL_RCC_OscConfig+0x780>)
 80053e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ee:	f7fe fb67 	bl	8003ac0 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053f4:	e00c      	b.n	8005410 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f6:	f7fe fb63 	bl	8003ac0 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d905      	bls.n	8005410 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e013      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
 8005408:	40021000 	.word	0x40021000
 800540c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005410:	4b09      	ldr	r3, [pc, #36]	@ (8005438 <HAL_RCC_OscConfig+0x7b0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1ec      	bne.n	80053f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800541c:	4b06      	ldr	r3, [pc, #24]	@ (8005438 <HAL_RCC_OscConfig+0x7b0>)
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	4905      	ldr	r1, [pc, #20]	@ (8005438 <HAL_RCC_OscConfig+0x7b0>)
 8005422:	4b06      	ldr	r3, [pc, #24]	@ (800543c <HAL_RCC_OscConfig+0x7b4>)
 8005424:	4013      	ands	r3, r2
 8005426:	60cb      	str	r3, [r1, #12]
 8005428:	e001      	b.n	800542e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40021000 	.word	0x40021000
 800543c:	feeefffc 	.word	0xfeeefffc

08005440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0e7      	b.n	8005624 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005454:	4b75      	ldr	r3, [pc, #468]	@ (800562c <HAL_RCC_ClockConfig+0x1ec>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d910      	bls.n	8005484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005462:	4b72      	ldr	r3, [pc, #456]	@ (800562c <HAL_RCC_ClockConfig+0x1ec>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f023 0207 	bic.w	r2, r3, #7
 800546a:	4970      	ldr	r1, [pc, #448]	@ (800562c <HAL_RCC_ClockConfig+0x1ec>)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	4313      	orrs	r3, r2
 8005470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005472:	4b6e      	ldr	r3, [pc, #440]	@ (800562c <HAL_RCC_ClockConfig+0x1ec>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d001      	beq.n	8005484 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0cf      	b.n	8005624 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d010      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	4b66      	ldr	r3, [pc, #408]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800549c:	429a      	cmp	r2, r3
 800549e:	d908      	bls.n	80054b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a0:	4b63      	ldr	r3, [pc, #396]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4960      	ldr	r1, [pc, #384]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d04c      	beq.n	8005558 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d107      	bne.n	80054d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c6:	4b5a      	ldr	r3, [pc, #360]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d121      	bne.n	8005516 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e0a6      	b.n	8005624 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d107      	bne.n	80054ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054de:	4b54      	ldr	r3, [pc, #336]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d115      	bne.n	8005516 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e09a      	b.n	8005624 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d107      	bne.n	8005506 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054f6:	4b4e      	ldr	r3, [pc, #312]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e08e      	b.n	8005624 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005506:	4b4a      	ldr	r3, [pc, #296]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e086      	b.n	8005624 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005516:	4b46      	ldr	r3, [pc, #280]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f023 0203 	bic.w	r2, r3, #3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	4943      	ldr	r1, [pc, #268]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 8005524:	4313      	orrs	r3, r2
 8005526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005528:	f7fe faca 	bl	8003ac0 <HAL_GetTick>
 800552c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552e:	e00a      	b.n	8005546 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005530:	f7fe fac6 	bl	8003ac0 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800553e:	4293      	cmp	r3, r2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e06e      	b.n	8005624 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005546:	4b3a      	ldr	r3, [pc, #232]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 020c 	and.w	r2, r3, #12
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	429a      	cmp	r2, r3
 8005556:	d1eb      	bne.n	8005530 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d010      	beq.n	8005586 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	4b31      	ldr	r3, [pc, #196]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005570:	429a      	cmp	r2, r3
 8005572:	d208      	bcs.n	8005586 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005574:	4b2e      	ldr	r3, [pc, #184]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	492b      	ldr	r1, [pc, #172]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 8005582:	4313      	orrs	r3, r2
 8005584:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005586:	4b29      	ldr	r3, [pc, #164]	@ (800562c <HAL_RCC_ClockConfig+0x1ec>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d210      	bcs.n	80055b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005594:	4b25      	ldr	r3, [pc, #148]	@ (800562c <HAL_RCC_ClockConfig+0x1ec>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f023 0207 	bic.w	r2, r3, #7
 800559c:	4923      	ldr	r1, [pc, #140]	@ (800562c <HAL_RCC_ClockConfig+0x1ec>)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a4:	4b21      	ldr	r3, [pc, #132]	@ (800562c <HAL_RCC_ClockConfig+0x1ec>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d001      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e036      	b.n	8005624 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	4918      	ldr	r1, [pc, #96]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055e0:	4b13      	ldr	r3, [pc, #76]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	4910      	ldr	r1, [pc, #64]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055f4:	f000 f824 	bl	8005640 <HAL_RCC_GetSysClockFreq>
 80055f8:	4602      	mov	r2, r0
 80055fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005630 <HAL_RCC_ClockConfig+0x1f0>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	091b      	lsrs	r3, r3, #4
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	490b      	ldr	r1, [pc, #44]	@ (8005634 <HAL_RCC_ClockConfig+0x1f4>)
 8005606:	5ccb      	ldrb	r3, [r1, r3]
 8005608:	f003 031f 	and.w	r3, r3, #31
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
 8005610:	4a09      	ldr	r2, [pc, #36]	@ (8005638 <HAL_RCC_ClockConfig+0x1f8>)
 8005612:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005614:	4b09      	ldr	r3, [pc, #36]	@ (800563c <HAL_RCC_ClockConfig+0x1fc>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4618      	mov	r0, r3
 800561a:	f7fe fa01 	bl	8003a20 <HAL_InitTick>
 800561e:	4603      	mov	r3, r0
 8005620:	72fb      	strb	r3, [r7, #11]

  return status;
 8005622:	7afb      	ldrb	r3, [r7, #11]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40022000 	.word	0x40022000
 8005630:	40021000 	.word	0x40021000
 8005634:	0800bcd4 	.word	0x0800bcd4
 8005638:	20000000 	.word	0x20000000
 800563c:	20000008 	.word	0x20000008

08005640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005640:	b480      	push	{r7}
 8005642:	b089      	sub	sp, #36	@ 0x24
 8005644:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
 800564a:	2300      	movs	r3, #0
 800564c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800564e:	4b3e      	ldr	r3, [pc, #248]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x108>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 030c 	and.w	r3, r3, #12
 8005656:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005658:	4b3b      	ldr	r3, [pc, #236]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x108>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_RCC_GetSysClockFreq+0x34>
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b0c      	cmp	r3, #12
 800566c:	d121      	bne.n	80056b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d11e      	bne.n	80056b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005674:	4b34      	ldr	r3, [pc, #208]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x108>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b00      	cmp	r3, #0
 800567e:	d107      	bne.n	8005690 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005680:	4b31      	ldr	r3, [pc, #196]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x108>)
 8005682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	f003 030f 	and.w	r3, r3, #15
 800568c:	61fb      	str	r3, [r7, #28]
 800568e:	e005      	b.n	800569c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005690:	4b2d      	ldr	r3, [pc, #180]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x108>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800569c:	4a2b      	ldr	r2, [pc, #172]	@ (800574c <HAL_RCC_GetSysClockFreq+0x10c>)
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10d      	bne.n	80056c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056b0:	e00a      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d102      	bne.n	80056be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056b8:	4b25      	ldr	r3, [pc, #148]	@ (8005750 <HAL_RCC_GetSysClockFreq+0x110>)
 80056ba:	61bb      	str	r3, [r7, #24]
 80056bc:	e004      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d101      	bne.n	80056c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056c4:	4b23      	ldr	r3, [pc, #140]	@ (8005754 <HAL_RCC_GetSysClockFreq+0x114>)
 80056c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b0c      	cmp	r3, #12
 80056cc:	d134      	bne.n	8005738 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x108>)
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d003      	beq.n	80056e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d003      	beq.n	80056ec <HAL_RCC_GetSysClockFreq+0xac>
 80056e4:	e005      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80056e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005750 <HAL_RCC_GetSysClockFreq+0x110>)
 80056e8:	617b      	str	r3, [r7, #20]
      break;
 80056ea:	e005      	b.n	80056f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80056ec:	4b19      	ldr	r3, [pc, #100]	@ (8005754 <HAL_RCC_GetSysClockFreq+0x114>)
 80056ee:	617b      	str	r3, [r7, #20]
      break;
 80056f0:	e002      	b.n	80056f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	617b      	str	r3, [r7, #20]
      break;
 80056f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056f8:	4b13      	ldr	r3, [pc, #76]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x108>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	091b      	lsrs	r3, r3, #4
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	3301      	adds	r3, #1
 8005704:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005706:	4b10      	ldr	r3, [pc, #64]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x108>)
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	fb03 f202 	mul.w	r2, r3, r2
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	fbb2 f3f3 	udiv	r3, r2, r3
 800571c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800571e:	4b0a      	ldr	r3, [pc, #40]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x108>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	0e5b      	lsrs	r3, r3, #25
 8005724:	f003 0303 	and.w	r3, r3, #3
 8005728:	3301      	adds	r3, #1
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	fbb2 f3f3 	udiv	r3, r2, r3
 8005736:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005738:	69bb      	ldr	r3, [r7, #24]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3724      	adds	r7, #36	@ 0x24
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40021000 	.word	0x40021000
 800574c:	0800bcec 	.word	0x0800bcec
 8005750:	00f42400 	.word	0x00f42400
 8005754:	007a1200 	.word	0x007a1200

08005758 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800575c:	4b03      	ldr	r3, [pc, #12]	@ (800576c <HAL_RCC_GetHCLKFreq+0x14>)
 800575e:	681b      	ldr	r3, [r3, #0]
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000000 	.word	0x20000000

08005770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005774:	f7ff fff0 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 8005778:	4602      	mov	r2, r0
 800577a:	4b06      	ldr	r3, [pc, #24]	@ (8005794 <HAL_RCC_GetPCLK1Freq+0x24>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	0a1b      	lsrs	r3, r3, #8
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	4904      	ldr	r1, [pc, #16]	@ (8005798 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005786:	5ccb      	ldrb	r3, [r1, r3]
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005790:	4618      	mov	r0, r3
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40021000 	.word	0x40021000
 8005798:	0800bce4 	.word	0x0800bce4

0800579c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057a0:	f7ff ffda 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 80057a4:	4602      	mov	r2, r0
 80057a6:	4b06      	ldr	r3, [pc, #24]	@ (80057c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	0adb      	lsrs	r3, r3, #11
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	4904      	ldr	r1, [pc, #16]	@ (80057c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057b2:	5ccb      	ldrb	r3, [r1, r3]
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057bc:	4618      	mov	r0, r3
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40021000 	.word	0x40021000
 80057c4:	0800bce4 	.word	0x0800bce4

080057c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80057d0:	2300      	movs	r3, #0
 80057d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80057d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80057e0:	f7ff f922 	bl	8004a28 <HAL_PWREx_GetVoltageRange>
 80057e4:	6178      	str	r0, [r7, #20]
 80057e6:	e014      	b.n	8005812 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80057e8:	4b25      	ldr	r3, [pc, #148]	@ (8005880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ec:	4a24      	ldr	r2, [pc, #144]	@ (8005880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80057f4:	4b22      	ldr	r3, [pc, #136]	@ (8005880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005800:	f7ff f912 	bl	8004a28 <HAL_PWREx_GetVoltageRange>
 8005804:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005806:	4b1e      	ldr	r3, [pc, #120]	@ (8005880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800580a:	4a1d      	ldr	r2, [pc, #116]	@ (8005880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800580c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005810:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005818:	d10b      	bne.n	8005832 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b80      	cmp	r3, #128	@ 0x80
 800581e:	d919      	bls.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2ba0      	cmp	r3, #160	@ 0xa0
 8005824:	d902      	bls.n	800582c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005826:	2302      	movs	r3, #2
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	e013      	b.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800582c:	2301      	movs	r3, #1
 800582e:	613b      	str	r3, [r7, #16]
 8005830:	e010      	b.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b80      	cmp	r3, #128	@ 0x80
 8005836:	d902      	bls.n	800583e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005838:	2303      	movs	r3, #3
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	e00a      	b.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b80      	cmp	r3, #128	@ 0x80
 8005842:	d102      	bne.n	800584a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005844:	2302      	movs	r3, #2
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	e004      	b.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b70      	cmp	r3, #112	@ 0x70
 800584e:	d101      	bne.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005850:	2301      	movs	r3, #1
 8005852:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005854:	4b0b      	ldr	r3, [pc, #44]	@ (8005884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f023 0207 	bic.w	r2, r3, #7
 800585c:	4909      	ldr	r1, [pc, #36]	@ (8005884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005864:	4b07      	ldr	r3, [pc, #28]	@ (8005884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	429a      	cmp	r2, r3
 8005870:	d001      	beq.n	8005876 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40021000 	.word	0x40021000
 8005884:	40022000 	.word	0x40022000

08005888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005890:	2300      	movs	r3, #0
 8005892:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005894:	2300      	movs	r3, #0
 8005896:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d041      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058ac:	d02a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80058ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058b2:	d824      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058b8:	d008      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80058ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058be:	d81e      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80058c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058c8:	d010      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058ca:	e018      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058cc:	4b86      	ldr	r3, [pc, #536]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a85      	ldr	r2, [pc, #532]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058d8:	e015      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3304      	adds	r3, #4
 80058de:	2100      	movs	r1, #0
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 facb 	bl	8005e7c <RCCEx_PLLSAI1_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058ea:	e00c      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3320      	adds	r3, #32
 80058f0:	2100      	movs	r1, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fbb6 	bl	8006064 <RCCEx_PLLSAI2_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058fc:	e003      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	74fb      	strb	r3, [r7, #19]
      break;
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005906:	7cfb      	ldrb	r3, [r7, #19]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800590c:	4b76      	ldr	r3, [pc, #472]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005912:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800591a:	4973      	ldr	r1, [pc, #460]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005922:	e001      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005924:	7cfb      	ldrb	r3, [r7, #19]
 8005926:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d041      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005938:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800593c:	d02a      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800593e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005942:	d824      	bhi.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005944:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005948:	d008      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800594a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800594e:	d81e      	bhi.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005958:	d010      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800595a:	e018      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800595c:	4b62      	ldr	r3, [pc, #392]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4a61      	ldr	r2, [pc, #388]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005962:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005966:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005968:	e015      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3304      	adds	r3, #4
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fa83 	bl	8005e7c <RCCEx_PLLSAI1_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800597a:	e00c      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3320      	adds	r3, #32
 8005980:	2100      	movs	r1, #0
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fb6e 	bl	8006064 <RCCEx_PLLSAI2_Config>
 8005988:	4603      	mov	r3, r0
 800598a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800598c:	e003      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	74fb      	strb	r3, [r7, #19]
      break;
 8005992:	e000      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005996:	7cfb      	ldrb	r3, [r7, #19]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800599c:	4b52      	ldr	r3, [pc, #328]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059aa:	494f      	ldr	r1, [pc, #316]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80059b2:	e001      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b4:	7cfb      	ldrb	r3, [r7, #19]
 80059b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80a0 	beq.w	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059c6:	2300      	movs	r3, #0
 80059c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059ca:	4b47      	ldr	r3, [pc, #284]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80059da:	2300      	movs	r3, #0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00d      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e0:	4b41      	ldr	r3, [pc, #260]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e4:	4a40      	ldr	r2, [pc, #256]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ec:	4b3e      	ldr	r3, [pc, #248]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059f8:	2301      	movs	r3, #1
 80059fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059fc:	4b3b      	ldr	r3, [pc, #236]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a3a      	ldr	r2, [pc, #232]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a08:	f7fe f85a 	bl	8003ac0 <HAL_GetTick>
 8005a0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a0e:	e009      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a10:	f7fe f856 	bl	8003ac0 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d902      	bls.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	74fb      	strb	r3, [r7, #19]
        break;
 8005a22:	e005      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a24:	4b31      	ldr	r3, [pc, #196]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0ef      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005a30:	7cfb      	ldrb	r3, [r7, #19]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d15c      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a36:	4b2c      	ldr	r3, [pc, #176]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01f      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d019      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a54:	4b24      	ldr	r3, [pc, #144]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a60:	4b21      	ldr	r3, [pc, #132]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a66:	4a20      	ldr	r2, [pc, #128]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a70:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a76:	4a1c      	ldr	r2, [pc, #112]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a80:	4a19      	ldr	r2, [pc, #100]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d016      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a92:	f7fe f815 	bl	8003ac0 <HAL_GetTick>
 8005a96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a98:	e00b      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a9a:	f7fe f811 	bl	8003ac0 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d902      	bls.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	74fb      	strb	r3, [r7, #19]
            break;
 8005ab0:	e006      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0ec      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ac0:	7cfb      	ldrb	r3, [r7, #19]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ac6:	4b08      	ldr	r3, [pc, #32]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005acc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ad6:	4904      	ldr	r1, [pc, #16]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ade:	e009      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ae0:	7cfb      	ldrb	r3, [r7, #19]
 8005ae2:	74bb      	strb	r3, [r7, #18]
 8005ae4:	e006      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ae6:	bf00      	nop
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af0:	7cfb      	ldrb	r3, [r7, #19]
 8005af2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005af4:	7c7b      	ldrb	r3, [r7, #17]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d105      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005afa:	4b9e      	ldr	r3, [pc, #632]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005afe:	4a9d      	ldr	r2, [pc, #628]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b12:	4b98      	ldr	r3, [pc, #608]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b18:	f023 0203 	bic.w	r2, r3, #3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b20:	4994      	ldr	r1, [pc, #592]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b34:	4b8f      	ldr	r3, [pc, #572]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3a:	f023 020c 	bic.w	r2, r3, #12
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b42:	498c      	ldr	r1, [pc, #560]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b56:	4b87      	ldr	r3, [pc, #540]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b64:	4983      	ldr	r1, [pc, #524]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b78:	4b7e      	ldr	r3, [pc, #504]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b86:	497b      	ldr	r1, [pc, #492]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0310 	and.w	r3, r3, #16
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b9a:	4b76      	ldr	r3, [pc, #472]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ba8:	4972      	ldr	r1, [pc, #456]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bbc:	4b6d      	ldr	r3, [pc, #436]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bca:	496a      	ldr	r1, [pc, #424]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bde:	4b65      	ldr	r3, [pc, #404]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bec:	4961      	ldr	r1, [pc, #388]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c00:	4b5c      	ldr	r3, [pc, #368]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c0e:	4959      	ldr	r1, [pc, #356]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c22:	4b54      	ldr	r3, [pc, #336]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c28:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c30:	4950      	ldr	r1, [pc, #320]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c44:	4b4b      	ldr	r3, [pc, #300]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c52:	4948      	ldr	r1, [pc, #288]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c66:	4b43      	ldr	r3, [pc, #268]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c74:	493f      	ldr	r1, [pc, #252]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d028      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c88:	4b3a      	ldr	r3, [pc, #232]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c96:	4937      	ldr	r1, [pc, #220]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ca6:	d106      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ca8:	4b32      	ldr	r3, [pc, #200]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4a31      	ldr	r2, [pc, #196]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cb2:	60d3      	str	r3, [r2, #12]
 8005cb4:	e011      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cbe:	d10c      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 f8d8 	bl	8005e7c <RCCEx_PLLSAI1_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005cd0:	7cfb      	ldrb	r3, [r7, #19]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
 8005cd8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d028      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ce6:	4b23      	ldr	r3, [pc, #140]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf4:	491f      	ldr	r1, [pc, #124]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d04:	d106      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d06:	4b1b      	ldr	r3, [pc, #108]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d10:	60d3      	str	r3, [r2, #12]
 8005d12:	e011      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d1c:	d10c      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3304      	adds	r3, #4
 8005d22:	2101      	movs	r1, #1
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 f8a9 	bl	8005e7c <RCCEx_PLLSAI1_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d2e:	7cfb      	ldrb	r3, [r7, #19]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005d34:	7cfb      	ldrb	r3, [r7, #19]
 8005d36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d02b      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d44:	4b0b      	ldr	r3, [pc, #44]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d52:	4908      	ldr	r1, [pc, #32]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d62:	d109      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d64:	4b03      	ldr	r3, [pc, #12]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	4a02      	ldr	r2, [pc, #8]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d6e:	60d3      	str	r3, [r2, #12]
 8005d70:	e014      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005d72:	bf00      	nop
 8005d74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3304      	adds	r3, #4
 8005d86:	2101      	movs	r1, #1
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 f877 	bl	8005e7c <RCCEx_PLLSAI1_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d92:	7cfb      	ldrb	r3, [r7, #19]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005d98:	7cfb      	ldrb	r3, [r7, #19]
 8005d9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d02f      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005da8:	4b2b      	ldr	r3, [pc, #172]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005db6:	4928      	ldr	r1, [pc, #160]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dc6:	d10d      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	2102      	movs	r1, #2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 f854 	bl	8005e7c <RCCEx_PLLSAI1_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dd8:	7cfb      	ldrb	r3, [r7, #19]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d014      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005dde:	7cfb      	ldrb	r3, [r7, #19]
 8005de0:	74bb      	strb	r3, [r7, #18]
 8005de2:	e011      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005de8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dec:	d10c      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3320      	adds	r3, #32
 8005df2:	2102      	movs	r1, #2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 f935 	bl	8006064 <RCCEx_PLLSAI2_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dfe:	7cfb      	ldrb	r3, [r7, #19]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e14:	4b10      	ldr	r3, [pc, #64]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e22:	490d      	ldr	r1, [pc, #52]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e36:	4b08      	ldr	r3, [pc, #32]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e46:	4904      	ldr	r1, [pc, #16]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40021000 	.word	0x40021000

08005e5c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005e60:	4b05      	ldr	r3, [pc, #20]	@ (8005e78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a04      	ldr	r2, [pc, #16]	@ (8005e78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005e66:	f043 0304 	orr.w	r3, r3, #4
 8005e6a:	6013      	str	r3, [r2, #0]
}
 8005e6c:	bf00      	nop
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40021000 	.word	0x40021000

08005e7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e8a:	4b75      	ldr	r3, [pc, #468]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d018      	beq.n	8005ec8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e96:	4b72      	ldr	r3, [pc, #456]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0203 	and.w	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d10d      	bne.n	8005ec2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
       ||
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005eae:	4b6c      	ldr	r3, [pc, #432]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	091b      	lsrs	r3, r3, #4
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
       ||
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d047      	beq.n	8005f52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	73fb      	strb	r3, [r7, #15]
 8005ec6:	e044      	b.n	8005f52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d018      	beq.n	8005f02 <RCCEx_PLLSAI1_Config+0x86>
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d825      	bhi.n	8005f20 <RCCEx_PLLSAI1_Config+0xa4>
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d002      	beq.n	8005ede <RCCEx_PLLSAI1_Config+0x62>
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d009      	beq.n	8005ef0 <RCCEx_PLLSAI1_Config+0x74>
 8005edc:	e020      	b.n	8005f20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ede:	4b60      	ldr	r3, [pc, #384]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d11d      	bne.n	8005f26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eee:	e01a      	b.n	8005f26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ef0:	4b5b      	ldr	r3, [pc, #364]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d116      	bne.n	8005f2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f00:	e013      	b.n	8005f2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f02:	4b57      	ldr	r3, [pc, #348]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10f      	bne.n	8005f2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f0e:	4b54      	ldr	r3, [pc, #336]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d109      	bne.n	8005f2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f1e:	e006      	b.n	8005f2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	73fb      	strb	r3, [r7, #15]
      break;
 8005f24:	e004      	b.n	8005f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f26:	bf00      	nop
 8005f28:	e002      	b.n	8005f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f2a:	bf00      	nop
 8005f2c:	e000      	b.n	8005f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10d      	bne.n	8005f52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f36:	4b4a      	ldr	r3, [pc, #296]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6819      	ldr	r1, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	430b      	orrs	r3, r1
 8005f4c:	4944      	ldr	r1, [pc, #272]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d17d      	bne.n	8006054 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f58:	4b41      	ldr	r3, [pc, #260]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a40      	ldr	r2, [pc, #256]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f64:	f7fd fdac 	bl	8003ac0 <HAL_GetTick>
 8005f68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f6a:	e009      	b.n	8005f80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f6c:	f7fd fda8 	bl	8003ac0 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d902      	bls.n	8005f80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8005f7e:	e005      	b.n	8005f8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f80:	4b37      	ldr	r3, [pc, #220]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1ef      	bne.n	8005f6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d160      	bne.n	8006054 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d111      	bne.n	8005fbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f98:	4b31      	ldr	r3, [pc, #196]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6892      	ldr	r2, [r2, #8]
 8005fa8:	0211      	lsls	r1, r2, #8
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	68d2      	ldr	r2, [r2, #12]
 8005fae:	0912      	lsrs	r2, r2, #4
 8005fb0:	0452      	lsls	r2, r2, #17
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	492a      	ldr	r1, [pc, #168]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	610b      	str	r3, [r1, #16]
 8005fba:	e027      	b.n	800600c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d112      	bne.n	8005fe8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fc2:	4b27      	ldr	r3, [pc, #156]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005fca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6892      	ldr	r2, [r2, #8]
 8005fd2:	0211      	lsls	r1, r2, #8
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6912      	ldr	r2, [r2, #16]
 8005fd8:	0852      	lsrs	r2, r2, #1
 8005fda:	3a01      	subs	r2, #1
 8005fdc:	0552      	lsls	r2, r2, #21
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	491f      	ldr	r1, [pc, #124]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	610b      	str	r3, [r1, #16]
 8005fe6:	e011      	b.n	800600c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005ff0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6892      	ldr	r2, [r2, #8]
 8005ff8:	0211      	lsls	r1, r2, #8
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6952      	ldr	r2, [r2, #20]
 8005ffe:	0852      	lsrs	r2, r2, #1
 8006000:	3a01      	subs	r2, #1
 8006002:	0652      	lsls	r2, r2, #25
 8006004:	430a      	orrs	r2, r1
 8006006:	4916      	ldr	r1, [pc, #88]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006008:	4313      	orrs	r3, r2
 800600a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800600c:	4b14      	ldr	r3, [pc, #80]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a13      	ldr	r2, [pc, #76]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006012:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006016:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006018:	f7fd fd52 	bl	8003ac0 <HAL_GetTick>
 800601c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800601e:	e009      	b.n	8006034 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006020:	f7fd fd4e 	bl	8003ac0 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d902      	bls.n	8006034 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	73fb      	strb	r3, [r7, #15]
          break;
 8006032:	e005      	b.n	8006040 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006034:	4b0a      	ldr	r3, [pc, #40]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0ef      	beq.n	8006020 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006046:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	4904      	ldr	r1, [pc, #16]	@ (8006060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006050:	4313      	orrs	r3, r2
 8006052:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	40021000 	.word	0x40021000

08006064 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006072:	4b6a      	ldr	r3, [pc, #424]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d018      	beq.n	80060b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800607e:	4b67      	ldr	r3, [pc, #412]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f003 0203 	and.w	r2, r3, #3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d10d      	bne.n	80060aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
       ||
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006096:	4b61      	ldr	r3, [pc, #388]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	091b      	lsrs	r3, r3, #4
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
       ||
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d047      	beq.n	800613a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	73fb      	strb	r3, [r7, #15]
 80060ae:	e044      	b.n	800613a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d018      	beq.n	80060ea <RCCEx_PLLSAI2_Config+0x86>
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d825      	bhi.n	8006108 <RCCEx_PLLSAI2_Config+0xa4>
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d002      	beq.n	80060c6 <RCCEx_PLLSAI2_Config+0x62>
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d009      	beq.n	80060d8 <RCCEx_PLLSAI2_Config+0x74>
 80060c4:	e020      	b.n	8006108 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060c6:	4b55      	ldr	r3, [pc, #340]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d11d      	bne.n	800610e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060d6:	e01a      	b.n	800610e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060d8:	4b50      	ldr	r3, [pc, #320]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d116      	bne.n	8006112 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060e8:	e013      	b.n	8006112 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060ea:	4b4c      	ldr	r3, [pc, #304]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10f      	bne.n	8006116 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060f6:	4b49      	ldr	r3, [pc, #292]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d109      	bne.n	8006116 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006106:	e006      	b.n	8006116 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	73fb      	strb	r3, [r7, #15]
      break;
 800610c:	e004      	b.n	8006118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800610e:	bf00      	nop
 8006110:	e002      	b.n	8006118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006112:	bf00      	nop
 8006114:	e000      	b.n	8006118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006116:	bf00      	nop
    }

    if(status == HAL_OK)
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10d      	bne.n	800613a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800611e:	4b3f      	ldr	r3, [pc, #252]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6819      	ldr	r1, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	3b01      	subs	r3, #1
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	430b      	orrs	r3, r1
 8006134:	4939      	ldr	r1, [pc, #228]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006136:	4313      	orrs	r3, r2
 8006138:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d167      	bne.n	8006210 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006140:	4b36      	ldr	r3, [pc, #216]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a35      	ldr	r2, [pc, #212]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800614a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800614c:	f7fd fcb8 	bl	8003ac0 <HAL_GetTick>
 8006150:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006152:	e009      	b.n	8006168 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006154:	f7fd fcb4 	bl	8003ac0 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d902      	bls.n	8006168 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	73fb      	strb	r3, [r7, #15]
        break;
 8006166:	e005      	b.n	8006174 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006168:	4b2c      	ldr	r3, [pc, #176]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1ef      	bne.n	8006154 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d14a      	bne.n	8006210 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d111      	bne.n	80061a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006180:	4b26      	ldr	r3, [pc, #152]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6892      	ldr	r2, [r2, #8]
 8006190:	0211      	lsls	r1, r2, #8
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	68d2      	ldr	r2, [r2, #12]
 8006196:	0912      	lsrs	r2, r2, #4
 8006198:	0452      	lsls	r2, r2, #17
 800619a:	430a      	orrs	r2, r1
 800619c:	491f      	ldr	r1, [pc, #124]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	614b      	str	r3, [r1, #20]
 80061a2:	e011      	b.n	80061c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061a4:	4b1d      	ldr	r3, [pc, #116]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80061ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6892      	ldr	r2, [r2, #8]
 80061b4:	0211      	lsls	r1, r2, #8
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6912      	ldr	r2, [r2, #16]
 80061ba:	0852      	lsrs	r2, r2, #1
 80061bc:	3a01      	subs	r2, #1
 80061be:	0652      	lsls	r2, r2, #25
 80061c0:	430a      	orrs	r2, r1
 80061c2:	4916      	ldr	r1, [pc, #88]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80061c8:	4b14      	ldr	r3, [pc, #80]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a13      	ldr	r2, [pc, #76]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d4:	f7fd fc74 	bl	8003ac0 <HAL_GetTick>
 80061d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061da:	e009      	b.n	80061f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061dc:	f7fd fc70 	bl	8003ac0 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d902      	bls.n	80061f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	73fb      	strb	r3, [r7, #15]
          break;
 80061ee:	e005      	b.n	80061fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061f0:	4b0a      	ldr	r3, [pc, #40]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0ef      	beq.n	80061dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006202:	4b06      	ldr	r3, [pc, #24]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	4904      	ldr	r1, [pc, #16]	@ (800621c <RCCEx_PLLSAI2_Config+0x1b8>)
 800620c:	4313      	orrs	r3, r2
 800620e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40021000 	.word	0x40021000

08006220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e095      	b.n	800635e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006236:	2b00      	cmp	r3, #0
 8006238:	d108      	bne.n	800624c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006242:	d009      	beq.n	8006258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	61da      	str	r2, [r3, #28]
 800624a:	e005      	b.n	8006258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7fc ff8c 	bl	8003190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800628e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006298:	d902      	bls.n	80062a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	e002      	b.n	80062a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80062ae:	d007      	beq.n	80062c0 <HAL_SPI_Init+0xa0>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062b8:	d002      	beq.n	80062c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006302:	ea42 0103 	orr.w	r1, r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	0c1b      	lsrs	r3, r3, #16
 800631c:	f003 0204 	and.w	r2, r3, #4
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800633c:	ea42 0103 	orr.w	r1, r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e01a      	b.n	80063ae <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800638e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fc ff41 	bl	8003218 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b088      	sub	sp, #32
 80063ba:	af02      	add	r7, sp, #8
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	603b      	str	r3, [r7, #0]
 80063c2:	4613      	mov	r3, r2
 80063c4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d001      	beq.n	80063d6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80063d2:	2302      	movs	r3, #2
 80063d4:	e123      	b.n	800661e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063de:	d112      	bne.n	8006406 <HAL_SPI_Receive+0x50>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10e      	bne.n	8006406 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2204      	movs	r2, #4
 80063ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80063f0:	88fa      	ldrh	r2, [r7, #6]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	4613      	mov	r3, r2
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f912 	bl	8006626 <HAL_SPI_TransmitReceive>
 8006402:	4603      	mov	r3, r0
 8006404:	e10b      	b.n	800661e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006406:	f7fd fb5b 	bl	8003ac0 <HAL_GetTick>
 800640a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <HAL_SPI_Receive+0x62>
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e100      	b.n	800661e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006422:	2b01      	cmp	r3, #1
 8006424:	d101      	bne.n	800642a <HAL_SPI_Receive+0x74>
 8006426:	2302      	movs	r3, #2
 8006428:	e0f9      	b.n	800661e <HAL_SPI_Receive+0x268>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2204      	movs	r2, #4
 8006436:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	88fa      	ldrh	r2, [r7, #6]
 800644a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	88fa      	ldrh	r2, [r7, #6]
 8006452:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800647c:	d908      	bls.n	8006490 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	e007      	b.n	80064a0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800649e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a8:	d10f      	bne.n	80064ca <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80064c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d4:	2b40      	cmp	r3, #64	@ 0x40
 80064d6:	d007      	beq.n	80064e8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064f0:	d875      	bhi.n	80065de <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80064f2:	e037      	b.n	8006564 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d117      	bne.n	8006532 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f103 020c 	add.w	r2, r3, #12
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650e:	7812      	ldrb	r2, [r2, #0]
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006530:	e018      	b.n	8006564 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006532:	f7fd fac5 	bl	8003ac0 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d803      	bhi.n	800654a <HAL_SPI_Receive+0x194>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006548:	d102      	bne.n	8006550 <HAL_SPI_Receive+0x19a>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e05c      	b.n	800661e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1c1      	bne.n	80064f4 <HAL_SPI_Receive+0x13e>
 8006570:	e03b      	b.n	80065ea <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b01      	cmp	r3, #1
 800657e:	d115      	bne.n	80065ac <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658a:	b292      	uxth	r2, r2
 800658c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006592:	1c9a      	adds	r2, r3, #2
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80065aa:	e018      	b.n	80065de <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ac:	f7fd fa88 	bl	8003ac0 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d803      	bhi.n	80065c4 <HAL_SPI_Receive+0x20e>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c2:	d102      	bne.n	80065ca <HAL_SPI_Receive+0x214>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d109      	bne.n	80065de <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e01f      	b.n	800661e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1c3      	bne.n	8006572 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 fee4 	bl	80073bc <SPI_EndRxTransaction>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800661c:	2300      	movs	r3, #0
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b08a      	sub	sp, #40	@ 0x28
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006634:	2301      	movs	r3, #1
 8006636:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006638:	f7fd fa42 	bl	8003ac0 <HAL_GetTick>
 800663c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006644:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800664c:	887b      	ldrh	r3, [r7, #2]
 800664e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006650:	887b      	ldrh	r3, [r7, #2]
 8006652:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006654:	7ffb      	ldrb	r3, [r7, #31]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d00c      	beq.n	8006674 <HAL_SPI_TransmitReceive+0x4e>
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006660:	d106      	bne.n	8006670 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d102      	bne.n	8006670 <HAL_SPI_TransmitReceive+0x4a>
 800666a:	7ffb      	ldrb	r3, [r7, #31]
 800666c:	2b04      	cmp	r3, #4
 800666e:	d001      	beq.n	8006674 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006670:	2302      	movs	r3, #2
 8006672:	e1f3      	b.n	8006a5c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d005      	beq.n	8006686 <HAL_SPI_TransmitReceive+0x60>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <HAL_SPI_TransmitReceive+0x60>
 8006680:	887b      	ldrh	r3, [r7, #2]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e1e8      	b.n	8006a5c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_SPI_TransmitReceive+0x72>
 8006694:	2302      	movs	r3, #2
 8006696:	e1e1      	b.n	8006a5c <HAL_SPI_TransmitReceive+0x436>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d003      	beq.n	80066b4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2205      	movs	r2, #5
 80066b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	887a      	ldrh	r2, [r7, #2]
 80066c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	887a      	ldrh	r2, [r7, #2]
 80066cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	887a      	ldrh	r2, [r7, #2]
 80066da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	887a      	ldrh	r2, [r7, #2]
 80066e0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066f6:	d802      	bhi.n	80066fe <HAL_SPI_TransmitReceive+0xd8>
 80066f8:	8abb      	ldrh	r3, [r7, #20]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d908      	bls.n	8006710 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800670c:	605a      	str	r2, [r3, #4]
 800670e:	e007      	b.n	8006720 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800671e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672a:	2b40      	cmp	r3, #64	@ 0x40
 800672c:	d007      	beq.n	800673e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800673c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006746:	f240 8083 	bls.w	8006850 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <HAL_SPI_TransmitReceive+0x132>
 8006752:	8afb      	ldrh	r3, [r7, #22]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d16f      	bne.n	8006838 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675c:	881a      	ldrh	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006768:	1c9a      	adds	r2, r3, #2
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800677c:	e05c      	b.n	8006838 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b02      	cmp	r3, #2
 800678a:	d11b      	bne.n	80067c4 <HAL_SPI_TransmitReceive+0x19e>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d016      	beq.n	80067c4 <HAL_SPI_TransmitReceive+0x19e>
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	2b01      	cmp	r3, #1
 800679a:	d113      	bne.n	80067c4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	881a      	ldrh	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ac:	1c9a      	adds	r2, r3, #2
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d11c      	bne.n	800680c <HAL_SPI_TransmitReceive+0x1e6>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d016      	beq.n	800680c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e8:	b292      	uxth	r2, r2
 80067ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f0:	1c9a      	adds	r2, r3, #2
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006808:	2301      	movs	r3, #1
 800680a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800680c:	f7fd f958 	bl	8003ac0 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006818:	429a      	cmp	r2, r3
 800681a:	d80d      	bhi.n	8006838 <HAL_SPI_TransmitReceive+0x212>
 800681c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006822:	d009      	beq.n	8006838 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e111      	b.n	8006a5c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d19d      	bne.n	800677e <HAL_SPI_TransmitReceive+0x158>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d197      	bne.n	800677e <HAL_SPI_TransmitReceive+0x158>
 800684e:	e0e5      	b.n	8006a1c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_SPI_TransmitReceive+0x23a>
 8006858:	8afb      	ldrh	r3, [r7, #22]
 800685a:	2b01      	cmp	r3, #1
 800685c:	f040 80d1 	bne.w	8006a02 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b01      	cmp	r3, #1
 8006868:	d912      	bls.n	8006890 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686e:	881a      	ldrh	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687a:	1c9a      	adds	r2, r3, #2
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b02      	subs	r3, #2
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800688e:	e0b8      	b.n	8006a02 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	330c      	adds	r3, #12
 800689a:	7812      	ldrb	r2, [r2, #0]
 800689c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068b6:	e0a4      	b.n	8006a02 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d134      	bne.n	8006930 <HAL_SPI_TransmitReceive+0x30a>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d02f      	beq.n	8006930 <HAL_SPI_TransmitReceive+0x30a>
 80068d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d12c      	bne.n	8006930 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068da:	b29b      	uxth	r3, r3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d912      	bls.n	8006906 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e4:	881a      	ldrh	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f0:	1c9a      	adds	r2, r3, #2
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	3b02      	subs	r3, #2
 80068fe:	b29a      	uxth	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006904:	e012      	b.n	800692c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	7812      	ldrb	r2, [r2, #0]
 8006912:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b01      	cmp	r3, #1
 800693c:	d148      	bne.n	80069d0 <HAL_SPI_TransmitReceive+0x3aa>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d042      	beq.n	80069d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b01      	cmp	r3, #1
 8006954:	d923      	bls.n	800699e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006960:	b292      	uxth	r2, r2
 8006962:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006968:	1c9a      	adds	r2, r3, #2
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b02      	subs	r3, #2
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b01      	cmp	r3, #1
 800698a:	d81f      	bhi.n	80069cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800699a:	605a      	str	r2, [r3, #4]
 800699c:	e016      	b.n	80069cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f103 020c 	add.w	r2, r3, #12
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069aa:	7812      	ldrb	r2, [r2, #0]
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069cc:	2301      	movs	r3, #1
 80069ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069d0:	f7fd f876 	bl	8003ac0 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069dc:	429a      	cmp	r2, r3
 80069de:	d803      	bhi.n	80069e8 <HAL_SPI_TransmitReceive+0x3c2>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e6:	d102      	bne.n	80069ee <HAL_SPI_TransmitReceive+0x3c8>
 80069e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e02c      	b.n	8006a5c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f47f af55 	bne.w	80068b8 <HAL_SPI_TransmitReceive+0x292>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f47f af4e 	bne.w	80068b8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a1c:	6a3a      	ldr	r2, [r7, #32]
 8006a1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 fd23 	bl	800746c <SPI_EndRxTxTransaction>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d008      	beq.n	8006a3e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e00e      	b.n	8006a5c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e000      	b.n	8006a5c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
  }
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3728      	adds	r7, #40	@ 0x28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <HAL_SPI_Transmit_IT+0x1a>
 8006a78:	88fb      	ldrh	r3, [r7, #6]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e06d      	b.n	8006b5e <HAL_SPI_Transmit_IT+0xfa>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d001      	beq.n	8006a92 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8006a8e:	2302      	movs	r3, #2
 8006a90:	e065      	b.n	8006b5e <HAL_SPI_Transmit_IT+0xfa>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d101      	bne.n	8006aa0 <HAL_SPI_Transmit_IT+0x3c>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	e05e      	b.n	8006b5e <HAL_SPI_Transmit_IT+0xfa>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2203      	movs	r2, #3
 8006aac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	88fa      	ldrh	r2, [r7, #6]
 8006ac0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	88fa      	ldrh	r2, [r7, #6]
 8006ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006aec:	d903      	bls.n	8006af6 <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4a1e      	ldr	r2, [pc, #120]	@ (8006b6c <HAL_SPI_Transmit_IT+0x108>)
 8006af2:	651a      	str	r2, [r3, #80]	@ 0x50
 8006af4:	e002      	b.n	8006afc <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4a1d      	ldr	r2, [pc, #116]	@ (8006b70 <HAL_SPI_Transmit_IT+0x10c>)
 8006afa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b04:	d10f      	bne.n	8006b26 <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b30:	2b40      	cmp	r3, #64	@ 0x40
 8006b32:	d007      	beq.n	8006b44 <HAL_SPI_Transmit_IT+0xe0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b42:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8006b5a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	0800713d 	.word	0x0800713d
 8006b70:	080070f7 	.word	0x080070f7

08006b74 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d001      	beq.n	8006b92 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e092      	b.n	8006cb8 <HAL_SPI_Receive_IT+0x144>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d110      	bne.n	8006bbc <HAL_SPI_Receive_IT+0x48>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ba2:	d10b      	bne.n	8006bbc <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006bac:	88fb      	ldrh	r3, [r7, #6]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 f888 	bl	8006cc8 <HAL_SPI_TransmitReceive_IT>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	e07d      	b.n	8006cb8 <HAL_SPI_Receive_IT+0x144>
  }


  if ((pData == NULL) || (Size == 0U))
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <HAL_SPI_Receive_IT+0x54>
 8006bc2:	88fb      	ldrh	r3, [r7, #6]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e075      	b.n	8006cb8 <HAL_SPI_Receive_IT+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_SPI_Receive_IT+0x66>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e06e      	b.n	8006cb8 <HAL_SPI_Receive_IT+0x144>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2204      	movs	r2, #4
 8006be6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	88fa      	ldrh	r2, [r7, #6]
 8006bfa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	88fa      	ldrh	r2, [r7, #6]
 8006c02:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c26:	d90b      	bls.n	8006c40 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c36:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4a21      	ldr	r2, [pc, #132]	@ (8006cc0 <HAL_SPI_Receive_IT+0x14c>)
 8006c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006c3e:	e00a      	b.n	8006c56 <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c4e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc4 <HAL_SPI_Receive_IT+0x150>)
 8006c54:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c5e:	d10f      	bne.n	8006c80 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006c7e:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c8a:	2b40      	cmp	r3, #64	@ 0x40
 8006c8c:	d007      	beq.n	8006c9e <HAL_SPI_Receive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c9c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006cb4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	080070ab 	.word	0x080070ab
 8006cc4:	0800705b 	.word	0x0800705b

08006cc8 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cdc:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d00c      	beq.n	8006d04 <HAL_SPI_TransmitReceive_IT+0x3c>
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cf0:	d106      	bne.n	8006d00 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d102      	bne.n	8006d00 <HAL_SPI_TransmitReceive_IT+0x38>
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d001      	beq.n	8006d04 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006d00:	2302      	movs	r3, #2
 8006d02:	e07d      	b.n	8006e00 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d005      	beq.n	8006d16 <HAL_SPI_TransmitReceive_IT+0x4e>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <HAL_SPI_TransmitReceive_IT+0x4e>
 8006d10:	887b      	ldrh	r3, [r7, #2]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e072      	b.n	8006e00 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d101      	bne.n	8006d28 <HAL_SPI_TransmitReceive_IT+0x60>
 8006d24:	2302      	movs	r3, #2
 8006d26:	e06b      	b.n	8006e00 <HAL_SPI_TransmitReceive_IT+0x138>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d003      	beq.n	8006d44 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2205      	movs	r2, #5
 8006d40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	887a      	ldrh	r2, [r7, #2]
 8006d54:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	887a      	ldrh	r2, [r7, #2]
 8006d5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	887a      	ldrh	r2, [r7, #2]
 8006d66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	887a      	ldrh	r2, [r7, #2]
 8006d6e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d7a:	d906      	bls.n	8006d8a <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4a23      	ldr	r2, [pc, #140]	@ (8006e0c <HAL_SPI_TransmitReceive_IT+0x144>)
 8006d80:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4a22      	ldr	r2, [pc, #136]	@ (8006e10 <HAL_SPI_TransmitReceive_IT+0x148>)
 8006d86:	651a      	str	r2, [r3, #80]	@ 0x50
 8006d88:	e005      	b.n	8006d96 <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4a21      	ldr	r2, [pc, #132]	@ (8006e14 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8006d8e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4a21      	ldr	r2, [pc, #132]	@ (8006e18 <HAL_SPI_TransmitReceive_IT+0x150>)
 8006d94:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d9e:	d802      	bhi.n	8006da6 <HAL_SPI_TransmitReceive_IT+0xde>
 8006da0:	887b      	ldrh	r3, [r7, #2]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d908      	bls.n	8006db8 <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006db4:	605a      	str	r2, [r3, #4]
 8006db6:	e007      	b.n	8006dc8 <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006dc6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd2:	2b40      	cmp	r3, #64	@ 0x40
 8006dd4:	d007      	beq.n	8006de6 <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006de4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8006dfc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	371c      	adds	r7, #28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	08006f95 	.word	0x08006f95
 8006e10:	08006ffb 	.word	0x08006ffb
 8006e14:	08006e45 	.word	0x08006e45
 8006e18:	08006f03 	.word	0x08006f03

08006e1c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d923      	bls.n	8006ea0 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e62:	b292      	uxth	r2, r2
 8006e64:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6a:	1c9a      	adds	r2, r3, #2
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	3b02      	subs	r3, #2
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d11f      	bne.n	8006ece <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e9c:	605a      	str	r2, [r3, #4]
 8006e9e:	e016      	b.n	8006ece <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f103 020c 	add.w	r2, r3, #12
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eac:	7812      	ldrb	r2, [r2, #0]
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10f      	bne.n	8006efa <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ee8:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 faff 	bl	80074f8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d912      	bls.n	8006f3a <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f18:	881a      	ldrh	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f24:	1c9a      	adds	r2, r3, #2
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	3b02      	subs	r3, #2
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f38:	e012      	b.n	8006f60 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	330c      	adds	r3, #12
 8006f44:	7812      	ldrb	r2, [r2, #0]
 8006f46:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d110      	bne.n	8006f8c <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f78:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d102      	bne.n	8006f8c <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fab6 	bl	80074f8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa6:	b292      	uxth	r2, r2
 8006fa8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fae:	1c9a      	adds	r2, r3, #2
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10f      	bne.n	8006ff2 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fe0:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d102      	bne.n	8006ff2 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fa83 	bl	80074f8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007006:	881a      	ldrh	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007012:	1c9a      	adds	r2, r3, #2
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800701c:	b29b      	uxth	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d110      	bne.n	8007052 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800703e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d102      	bne.n	8007052 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fa53 	bl	80074f8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007052:	bf00      	nop
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f103 020c 	add.w	r2, r3, #12
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706e:	7812      	ldrb	r2, [r2, #0]
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29a      	uxth	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d102      	bne.n	80070a2 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fa6d 	bl	800757c <SPI_CloseRx_ISR>
  }
}
 80070a2:	bf00      	nop
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070bc:	b292      	uxth	r2, r2
 80070be:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c4:	1c9a      	adds	r2, r3, #2
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d102      	bne.n	80070ee <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fa47 	bl	800757c <SPI_CloseRx_ISR>
  }
}
 80070ee:	bf00      	nop
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	330c      	adds	r3, #12
 8007108:	7812      	ldrb	r2, [r2, #0]
 800710a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800711a:	b29b      	uxth	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007128:	b29b      	uxth	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d102      	bne.n	8007134 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fa54 	bl	80075dc <SPI_CloseTx_ISR>
  }
}
 8007134:	bf00      	nop
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007148:	881a      	ldrh	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007154:	1c9a      	adds	r2, r3, #2
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800715e:	b29b      	uxth	r3, r3
 8007160:	3b01      	subs	r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800716c:	b29b      	uxth	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d102      	bne.n	8007178 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fa32 	bl	80075dc <SPI_CloseTx_ISR>
  }
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	4613      	mov	r3, r2
 800718e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007190:	f7fc fc96 	bl	8003ac0 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007198:	1a9b      	subs	r3, r3, r2
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	4413      	add	r3, r2
 800719e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071a0:	f7fc fc8e 	bl	8003ac0 <HAL_GetTick>
 80071a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071a6:	4b39      	ldr	r3, [pc, #228]	@ (800728c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	015b      	lsls	r3, r3, #5
 80071ac:	0d1b      	lsrs	r3, r3, #20
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	fb02 f303 	mul.w	r3, r2, r3
 80071b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071b6:	e054      	b.n	8007262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071be:	d050      	beq.n	8007262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071c0:	f7fc fc7e 	bl	8003ac0 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	69fa      	ldr	r2, [r7, #28]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d902      	bls.n	80071d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d13d      	bne.n	8007252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071ee:	d111      	bne.n	8007214 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071f8:	d004      	beq.n	8007204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007202:	d107      	bne.n	8007214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800721c:	d10f      	bne.n	800723e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800723c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e017      	b.n	8007282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	3b01      	subs	r3, #1
 8007260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689a      	ldr	r2, [r3, #8]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4013      	ands	r3, r2
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	429a      	cmp	r2, r3
 8007270:	bf0c      	ite	eq
 8007272:	2301      	moveq	r3, #1
 8007274:	2300      	movne	r3, #0
 8007276:	b2db      	uxtb	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	429a      	cmp	r2, r3
 800727e:	d19b      	bne.n	80071b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3720      	adds	r7, #32
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000000 	.word	0x20000000

08007290 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08a      	sub	sp, #40	@ 0x28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072a2:	f7fc fc0d 	bl	8003ac0 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072aa:	1a9b      	subs	r3, r3, r2
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	4413      	add	r3, r2
 80072b0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80072b2:	f7fc fc05 	bl	8003ac0 <HAL_GetTick>
 80072b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	330c      	adds	r3, #12
 80072be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072c0:	4b3d      	ldr	r3, [pc, #244]	@ (80073b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	00da      	lsls	r2, r3, #3
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	0d1b      	lsrs	r3, r3, #20
 80072d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80072d8:	e060      	b.n	800739c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80072e0:	d107      	bne.n	80072f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f8:	d050      	beq.n	800739c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072fa:	f7fc fbe1 	bl	8003ac0 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007306:	429a      	cmp	r2, r3
 8007308:	d902      	bls.n	8007310 <SPI_WaitFifoStateUntilTimeout+0x80>
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	2b00      	cmp	r3, #0
 800730e:	d13d      	bne.n	800738c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800731e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007328:	d111      	bne.n	800734e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007332:	d004      	beq.n	800733e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800733c:	d107      	bne.n	800734e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800734c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007356:	d10f      	bne.n	8007378 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007376:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e010      	b.n	80073ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	3b01      	subs	r3, #1
 800739a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	4013      	ands	r3, r2
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d196      	bne.n	80072da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3728      	adds	r7, #40	@ 0x28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000000 	.word	0x20000000

080073bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073d0:	d111      	bne.n	80073f6 <SPI_EndRxTransaction+0x3a>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073da:	d004      	beq.n	80073e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073e4:	d107      	bne.n	80073f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073f4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2200      	movs	r2, #0
 80073fe:	2180      	movs	r1, #128	@ 0x80
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f7ff febd 	bl	8007180 <SPI_WaitFlagStateUntilTimeout>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d007      	beq.n	800741c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007410:	f043 0220 	orr.w	r2, r3, #32
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e023      	b.n	8007464 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007424:	d11d      	bne.n	8007462 <SPI_EndRxTransaction+0xa6>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800742e:	d004      	beq.n	800743a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007438:	d113      	bne.n	8007462 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2200      	movs	r2, #0
 8007442:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f7ff ff22 	bl	8007290 <SPI_WaitFifoStateUntilTimeout>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007456:	f043 0220 	orr.w	r2, r3, #32
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e000      	b.n	8007464 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af02      	add	r7, sp, #8
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2200      	movs	r2, #0
 8007480:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7ff ff03 	bl	8007290 <SPI_WaitFifoStateUntilTimeout>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d007      	beq.n	80074a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007494:	f043 0220 	orr.w	r2, r3, #32
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e027      	b.n	80074f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2200      	movs	r2, #0
 80074a8:	2180      	movs	r1, #128	@ 0x80
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff fe68 	bl	8007180 <SPI_WaitFlagStateUntilTimeout>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ba:	f043 0220 	orr.w	r2, r3, #32
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e014      	b.n	80074f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f7ff fedc 	bl	8007290 <SPI_WaitFifoStateUntilTimeout>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d007      	beq.n	80074ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074e2:	f043 0220 	orr.w	r2, r3, #32
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e000      	b.n	80074f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007500:	f7fc fade 	bl	8003ac0 <HAL_GetTick>
 8007504:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0220 	bic.w	r2, r2, #32
 8007514:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	2164      	movs	r1, #100	@ 0x64
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff ffa6 	bl	800746c <SPI_EndRxTxTransaction>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d005      	beq.n	8007532 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800752a:	f043 0220 	orr.w	r2, r3, #32
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007536:	2b00      	cmp	r3, #0
 8007538:	d115      	bne.n	8007566 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b04      	cmp	r3, #4
 8007544:	d107      	bne.n	8007556 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fa ffe6 	bl	8002520 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007554:	e00e      	b.n	8007574 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fc5c 	bl	8006e1c <HAL_SPI_TxRxCpltCallback>
}
 8007564:	e006      	b.n	8007574 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff fc5e 	bl	8006e30 <HAL_SPI_ErrorCallback>
}
 8007574:	bf00      	nop
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007592:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007594:	f7fc fa94 	bl	8003ac0 <HAL_GetTick>
 8007598:	4603      	mov	r3, r0
 800759a:	461a      	mov	r2, r3
 800759c:	2164      	movs	r1, #100	@ 0x64
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff ff0c 	bl	80073bc <SPI_EndRxTransaction>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d005      	beq.n	80075b6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ae:	f043 0220 	orr.w	r2, r3, #32
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d103      	bne.n	80075ce <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7fa ffaa 	bl	8002520 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80075cc:	e002      	b.n	80075d4 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7ff fc2e 	bl	8006e30 <HAL_SPI_ErrorCallback>
}
 80075d4:	bf00      	nop
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075e4:	f7fc fa6c 	bl	8003ac0 <HAL_GetTick>
 80075e8:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80075f8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	2164      	movs	r1, #100	@ 0x64
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff ff34 	bl	800746c <SPI_EndRxTxTransaction>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800760e:	f043 0220 	orr.w	r2, r3, #32
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10a      	bne.n	8007634 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800761e:	2300      	movs	r3, #0
 8007620:	60bb      	str	r3, [r7, #8]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	60bb      	str	r3, [r7, #8]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	60bb      	str	r3, [r7, #8]
 8007632:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff fbf3 	bl	8006e30 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800764a:	e002      	b.n	8007652 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7fa ff7b 	bl	8002548 <HAL_SPI_TxCpltCallback>
}
 8007652:	bf00      	nop
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e040      	b.n	80076ee <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007670:	2b00      	cmp	r3, #0
 8007672:	d106      	bne.n	8007682 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7fb fde9 	bl	8003254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2224      	movs	r2, #36	@ 0x24
 8007686:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0201 	bic.w	r2, r2, #1
 8007696:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fb69 	bl	8007d78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f8ae 	bl	8007808 <UART_SetConfig>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e01b      	b.n	80076ee <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 0201 	orr.w	r2, r2, #1
 80076e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fbe8 	bl	8007ebc <UART_CheckIdleState>
 80076ec:	4603      	mov	r3, r0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b08a      	sub	sp, #40	@ 0x28
 80076fa:	af02      	add	r7, sp, #8
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	60b9      	str	r1, [r7, #8]
 8007700:	603b      	str	r3, [r7, #0]
 8007702:	4613      	mov	r3, r2
 8007704:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800770a:	2b20      	cmp	r3, #32
 800770c:	d177      	bne.n	80077fe <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <HAL_UART_Transmit+0x24>
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e070      	b.n	8007800 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2221      	movs	r2, #33	@ 0x21
 800772a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800772c:	f7fc f9c8 	bl	8003ac0 <HAL_GetTick>
 8007730:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	88fa      	ldrh	r2, [r7, #6]
 8007736:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	88fa      	ldrh	r2, [r7, #6]
 800773e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800774a:	d108      	bne.n	800775e <HAL_UART_Transmit+0x68>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d104      	bne.n	800775e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007754:	2300      	movs	r3, #0
 8007756:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	61bb      	str	r3, [r7, #24]
 800775c:	e003      	b.n	8007766 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007762:	2300      	movs	r3, #0
 8007764:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007766:	e02f      	b.n	80077c8 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2200      	movs	r2, #0
 8007770:	2180      	movs	r1, #128	@ 0x80
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 fc4a 	bl	800800c <UART_WaitOnFlagUntilTimeout>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d004      	beq.n	8007788 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2220      	movs	r2, #32
 8007782:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e03b      	b.n	8007800 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10b      	bne.n	80077a6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	881a      	ldrh	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800779a:	b292      	uxth	r2, r2
 800779c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	3302      	adds	r3, #2
 80077a2:	61bb      	str	r3, [r7, #24]
 80077a4:	e007      	b.n	80077b6 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	781a      	ldrb	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	3301      	adds	r3, #1
 80077b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1c9      	bne.n	8007768 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2200      	movs	r2, #0
 80077dc:	2140      	movs	r1, #64	@ 0x40
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 fc14 	bl	800800c <UART_WaitOnFlagUntilTimeout>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d004      	beq.n	80077f4 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2220      	movs	r2, #32
 80077ee:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e005      	b.n	8007800 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2220      	movs	r2, #32
 80077f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	e000      	b.n	8007800 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80077fe:	2302      	movs	r3, #2
  }
}
 8007800:	4618      	mov	r0, r3
 8007802:	3720      	adds	r7, #32
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800780c:	b08a      	sub	sp, #40	@ 0x28
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	431a      	orrs	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	431a      	orrs	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	4313      	orrs	r3, r2
 800782e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	4ba4      	ldr	r3, [pc, #656]	@ (8007ac8 <UART_SetConfig+0x2c0>)
 8007838:	4013      	ands	r3, r2
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007840:	430b      	orrs	r3, r1
 8007842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a99      	ldr	r2, [pc, #612]	@ (8007acc <UART_SetConfig+0x2c4>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d004      	beq.n	8007874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007870:	4313      	orrs	r3, r2
 8007872:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007884:	430a      	orrs	r2, r1
 8007886:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a90      	ldr	r2, [pc, #576]	@ (8007ad0 <UART_SetConfig+0x2c8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d126      	bne.n	80078e0 <UART_SetConfig+0xd8>
 8007892:	4b90      	ldr	r3, [pc, #576]	@ (8007ad4 <UART_SetConfig+0x2cc>)
 8007894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007898:	f003 0303 	and.w	r3, r3, #3
 800789c:	2b03      	cmp	r3, #3
 800789e:	d81b      	bhi.n	80078d8 <UART_SetConfig+0xd0>
 80078a0:	a201      	add	r2, pc, #4	@ (adr r2, 80078a8 <UART_SetConfig+0xa0>)
 80078a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a6:	bf00      	nop
 80078a8:	080078b9 	.word	0x080078b9
 80078ac:	080078c9 	.word	0x080078c9
 80078b0:	080078c1 	.word	0x080078c1
 80078b4:	080078d1 	.word	0x080078d1
 80078b8:	2301      	movs	r3, #1
 80078ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078be:	e116      	b.n	8007aee <UART_SetConfig+0x2e6>
 80078c0:	2302      	movs	r3, #2
 80078c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078c6:	e112      	b.n	8007aee <UART_SetConfig+0x2e6>
 80078c8:	2304      	movs	r3, #4
 80078ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ce:	e10e      	b.n	8007aee <UART_SetConfig+0x2e6>
 80078d0:	2308      	movs	r3, #8
 80078d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078d6:	e10a      	b.n	8007aee <UART_SetConfig+0x2e6>
 80078d8:	2310      	movs	r3, #16
 80078da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078de:	e106      	b.n	8007aee <UART_SetConfig+0x2e6>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a7c      	ldr	r2, [pc, #496]	@ (8007ad8 <UART_SetConfig+0x2d0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d138      	bne.n	800795c <UART_SetConfig+0x154>
 80078ea:	4b7a      	ldr	r3, [pc, #488]	@ (8007ad4 <UART_SetConfig+0x2cc>)
 80078ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f0:	f003 030c 	and.w	r3, r3, #12
 80078f4:	2b0c      	cmp	r3, #12
 80078f6:	d82d      	bhi.n	8007954 <UART_SetConfig+0x14c>
 80078f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007900 <UART_SetConfig+0xf8>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	08007935 	.word	0x08007935
 8007904:	08007955 	.word	0x08007955
 8007908:	08007955 	.word	0x08007955
 800790c:	08007955 	.word	0x08007955
 8007910:	08007945 	.word	0x08007945
 8007914:	08007955 	.word	0x08007955
 8007918:	08007955 	.word	0x08007955
 800791c:	08007955 	.word	0x08007955
 8007920:	0800793d 	.word	0x0800793d
 8007924:	08007955 	.word	0x08007955
 8007928:	08007955 	.word	0x08007955
 800792c:	08007955 	.word	0x08007955
 8007930:	0800794d 	.word	0x0800794d
 8007934:	2300      	movs	r3, #0
 8007936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800793a:	e0d8      	b.n	8007aee <UART_SetConfig+0x2e6>
 800793c:	2302      	movs	r3, #2
 800793e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007942:	e0d4      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007944:	2304      	movs	r3, #4
 8007946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800794a:	e0d0      	b.n	8007aee <UART_SetConfig+0x2e6>
 800794c:	2308      	movs	r3, #8
 800794e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007952:	e0cc      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007954:	2310      	movs	r3, #16
 8007956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800795a:	e0c8      	b.n	8007aee <UART_SetConfig+0x2e6>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a5e      	ldr	r2, [pc, #376]	@ (8007adc <UART_SetConfig+0x2d4>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d125      	bne.n	80079b2 <UART_SetConfig+0x1aa>
 8007966:	4b5b      	ldr	r3, [pc, #364]	@ (8007ad4 <UART_SetConfig+0x2cc>)
 8007968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800796c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007970:	2b30      	cmp	r3, #48	@ 0x30
 8007972:	d016      	beq.n	80079a2 <UART_SetConfig+0x19a>
 8007974:	2b30      	cmp	r3, #48	@ 0x30
 8007976:	d818      	bhi.n	80079aa <UART_SetConfig+0x1a2>
 8007978:	2b20      	cmp	r3, #32
 800797a:	d00a      	beq.n	8007992 <UART_SetConfig+0x18a>
 800797c:	2b20      	cmp	r3, #32
 800797e:	d814      	bhi.n	80079aa <UART_SetConfig+0x1a2>
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <UART_SetConfig+0x182>
 8007984:	2b10      	cmp	r3, #16
 8007986:	d008      	beq.n	800799a <UART_SetConfig+0x192>
 8007988:	e00f      	b.n	80079aa <UART_SetConfig+0x1a2>
 800798a:	2300      	movs	r3, #0
 800798c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007990:	e0ad      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007992:	2302      	movs	r3, #2
 8007994:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007998:	e0a9      	b.n	8007aee <UART_SetConfig+0x2e6>
 800799a:	2304      	movs	r3, #4
 800799c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079a0:	e0a5      	b.n	8007aee <UART_SetConfig+0x2e6>
 80079a2:	2308      	movs	r3, #8
 80079a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079a8:	e0a1      	b.n	8007aee <UART_SetConfig+0x2e6>
 80079aa:	2310      	movs	r3, #16
 80079ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079b0:	e09d      	b.n	8007aee <UART_SetConfig+0x2e6>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a4a      	ldr	r2, [pc, #296]	@ (8007ae0 <UART_SetConfig+0x2d8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d125      	bne.n	8007a08 <UART_SetConfig+0x200>
 80079bc:	4b45      	ldr	r3, [pc, #276]	@ (8007ad4 <UART_SetConfig+0x2cc>)
 80079be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80079c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80079c8:	d016      	beq.n	80079f8 <UART_SetConfig+0x1f0>
 80079ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80079cc:	d818      	bhi.n	8007a00 <UART_SetConfig+0x1f8>
 80079ce:	2b80      	cmp	r3, #128	@ 0x80
 80079d0:	d00a      	beq.n	80079e8 <UART_SetConfig+0x1e0>
 80079d2:	2b80      	cmp	r3, #128	@ 0x80
 80079d4:	d814      	bhi.n	8007a00 <UART_SetConfig+0x1f8>
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <UART_SetConfig+0x1d8>
 80079da:	2b40      	cmp	r3, #64	@ 0x40
 80079dc:	d008      	beq.n	80079f0 <UART_SetConfig+0x1e8>
 80079de:	e00f      	b.n	8007a00 <UART_SetConfig+0x1f8>
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079e6:	e082      	b.n	8007aee <UART_SetConfig+0x2e6>
 80079e8:	2302      	movs	r3, #2
 80079ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ee:	e07e      	b.n	8007aee <UART_SetConfig+0x2e6>
 80079f0:	2304      	movs	r3, #4
 80079f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079f6:	e07a      	b.n	8007aee <UART_SetConfig+0x2e6>
 80079f8:	2308      	movs	r3, #8
 80079fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079fe:	e076      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007a00:	2310      	movs	r3, #16
 8007a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a06:	e072      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a35      	ldr	r2, [pc, #212]	@ (8007ae4 <UART_SetConfig+0x2dc>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d12a      	bne.n	8007a68 <UART_SetConfig+0x260>
 8007a12:	4b30      	ldr	r3, [pc, #192]	@ (8007ad4 <UART_SetConfig+0x2cc>)
 8007a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a20:	d01a      	beq.n	8007a58 <UART_SetConfig+0x250>
 8007a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a26:	d81b      	bhi.n	8007a60 <UART_SetConfig+0x258>
 8007a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a2c:	d00c      	beq.n	8007a48 <UART_SetConfig+0x240>
 8007a2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a32:	d815      	bhi.n	8007a60 <UART_SetConfig+0x258>
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <UART_SetConfig+0x238>
 8007a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a3c:	d008      	beq.n	8007a50 <UART_SetConfig+0x248>
 8007a3e:	e00f      	b.n	8007a60 <UART_SetConfig+0x258>
 8007a40:	2300      	movs	r3, #0
 8007a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a46:	e052      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a4e:	e04e      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007a50:	2304      	movs	r3, #4
 8007a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a56:	e04a      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007a58:	2308      	movs	r3, #8
 8007a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a5e:	e046      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007a60:	2310      	movs	r3, #16
 8007a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a66:	e042      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a17      	ldr	r2, [pc, #92]	@ (8007acc <UART_SetConfig+0x2c4>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d13a      	bne.n	8007ae8 <UART_SetConfig+0x2e0>
 8007a72:	4b18      	ldr	r3, [pc, #96]	@ (8007ad4 <UART_SetConfig+0x2cc>)
 8007a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a80:	d01a      	beq.n	8007ab8 <UART_SetConfig+0x2b0>
 8007a82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a86:	d81b      	bhi.n	8007ac0 <UART_SetConfig+0x2b8>
 8007a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a8c:	d00c      	beq.n	8007aa8 <UART_SetConfig+0x2a0>
 8007a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a92:	d815      	bhi.n	8007ac0 <UART_SetConfig+0x2b8>
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <UART_SetConfig+0x298>
 8007a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a9c:	d008      	beq.n	8007ab0 <UART_SetConfig+0x2a8>
 8007a9e:	e00f      	b.n	8007ac0 <UART_SetConfig+0x2b8>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aa6:	e022      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aae:	e01e      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007ab0:	2304      	movs	r3, #4
 8007ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab6:	e01a      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007ab8:	2308      	movs	r3, #8
 8007aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007abe:	e016      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac6:	e012      	b.n	8007aee <UART_SetConfig+0x2e6>
 8007ac8:	efff69f3 	.word	0xefff69f3
 8007acc:	40008000 	.word	0x40008000
 8007ad0:	40013800 	.word	0x40013800
 8007ad4:	40021000 	.word	0x40021000
 8007ad8:	40004400 	.word	0x40004400
 8007adc:	40004800 	.word	0x40004800
 8007ae0:	40004c00 	.word	0x40004c00
 8007ae4:	40005000 	.word	0x40005000
 8007ae8:	2310      	movs	r3, #16
 8007aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a9f      	ldr	r2, [pc, #636]	@ (8007d70 <UART_SetConfig+0x568>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d17a      	bne.n	8007bee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007af8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	d824      	bhi.n	8007b4a <UART_SetConfig+0x342>
 8007b00:	a201      	add	r2, pc, #4	@ (adr r2, 8007b08 <UART_SetConfig+0x300>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b2d 	.word	0x08007b2d
 8007b0c:	08007b4b 	.word	0x08007b4b
 8007b10:	08007b35 	.word	0x08007b35
 8007b14:	08007b4b 	.word	0x08007b4b
 8007b18:	08007b3b 	.word	0x08007b3b
 8007b1c:	08007b4b 	.word	0x08007b4b
 8007b20:	08007b4b 	.word	0x08007b4b
 8007b24:	08007b4b 	.word	0x08007b4b
 8007b28:	08007b43 	.word	0x08007b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b2c:	f7fd fe20 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 8007b30:	61f8      	str	r0, [r7, #28]
        break;
 8007b32:	e010      	b.n	8007b56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b34:	4b8f      	ldr	r3, [pc, #572]	@ (8007d74 <UART_SetConfig+0x56c>)
 8007b36:	61fb      	str	r3, [r7, #28]
        break;
 8007b38:	e00d      	b.n	8007b56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b3a:	f7fd fd81 	bl	8005640 <HAL_RCC_GetSysClockFreq>
 8007b3e:	61f8      	str	r0, [r7, #28]
        break;
 8007b40:	e009      	b.n	8007b56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b46:	61fb      	str	r3, [r7, #28]
        break;
 8007b48:	e005      	b.n	8007b56 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 80fb 	beq.w	8007d54 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	4613      	mov	r3, r2
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	4413      	add	r3, r2
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d305      	bcc.n	8007b7a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d903      	bls.n	8007b82 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b80:	e0e8      	b.n	8007d54 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	2200      	movs	r2, #0
 8007b86:	461c      	mov	r4, r3
 8007b88:	4615      	mov	r5, r2
 8007b8a:	f04f 0200 	mov.w	r2, #0
 8007b8e:	f04f 0300 	mov.w	r3, #0
 8007b92:	022b      	lsls	r3, r5, #8
 8007b94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007b98:	0222      	lsls	r2, r4, #8
 8007b9a:	68f9      	ldr	r1, [r7, #12]
 8007b9c:	6849      	ldr	r1, [r1, #4]
 8007b9e:	0849      	lsrs	r1, r1, #1
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	4688      	mov	r8, r1
 8007ba4:	4681      	mov	r9, r0
 8007ba6:	eb12 0a08 	adds.w	sl, r2, r8
 8007baa:	eb43 0b09 	adc.w	fp, r3, r9
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	603b      	str	r3, [r7, #0]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bbc:	4650      	mov	r0, sl
 8007bbe:	4659      	mov	r1, fp
 8007bc0:	f7f8 fff2 	bl	8000ba8 <__aeabi_uldivmod>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4613      	mov	r3, r2
 8007bca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bd2:	d308      	bcc.n	8007be6 <UART_SetConfig+0x3de>
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bda:	d204      	bcs.n	8007be6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	60da      	str	r2, [r3, #12]
 8007be4:	e0b6      	b.n	8007d54 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007bec:	e0b2      	b.n	8007d54 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bf6:	d15e      	bne.n	8007cb6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007bf8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d828      	bhi.n	8007c52 <UART_SetConfig+0x44a>
 8007c00:	a201      	add	r2, pc, #4	@ (adr r2, 8007c08 <UART_SetConfig+0x400>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c2d 	.word	0x08007c2d
 8007c0c:	08007c35 	.word	0x08007c35
 8007c10:	08007c3d 	.word	0x08007c3d
 8007c14:	08007c53 	.word	0x08007c53
 8007c18:	08007c43 	.word	0x08007c43
 8007c1c:	08007c53 	.word	0x08007c53
 8007c20:	08007c53 	.word	0x08007c53
 8007c24:	08007c53 	.word	0x08007c53
 8007c28:	08007c4b 	.word	0x08007c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c2c:	f7fd fda0 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 8007c30:	61f8      	str	r0, [r7, #28]
        break;
 8007c32:	e014      	b.n	8007c5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c34:	f7fd fdb2 	bl	800579c <HAL_RCC_GetPCLK2Freq>
 8007c38:	61f8      	str	r0, [r7, #28]
        break;
 8007c3a:	e010      	b.n	8007c5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8007d74 <UART_SetConfig+0x56c>)
 8007c3e:	61fb      	str	r3, [r7, #28]
        break;
 8007c40:	e00d      	b.n	8007c5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c42:	f7fd fcfd 	bl	8005640 <HAL_RCC_GetSysClockFreq>
 8007c46:	61f8      	str	r0, [r7, #28]
        break;
 8007c48:	e009      	b.n	8007c5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c4e:	61fb      	str	r3, [r7, #28]
        break;
 8007c50:	e005      	b.n	8007c5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d077      	beq.n	8007d54 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	005a      	lsls	r2, r3, #1
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	085b      	lsrs	r3, r3, #1
 8007c6e:	441a      	add	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	2b0f      	cmp	r3, #15
 8007c7e:	d916      	bls.n	8007cae <UART_SetConfig+0x4a6>
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c86:	d212      	bcs.n	8007cae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	f023 030f 	bic.w	r3, r3, #15
 8007c90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	085b      	lsrs	r3, r3, #1
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	8afb      	ldrh	r3, [r7, #22]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	8afa      	ldrh	r2, [r7, #22]
 8007caa:	60da      	str	r2, [r3, #12]
 8007cac:	e052      	b.n	8007d54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007cb4:	e04e      	b.n	8007d54 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cb6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d827      	bhi.n	8007d0e <UART_SetConfig+0x506>
 8007cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc4 <UART_SetConfig+0x4bc>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007ce9 	.word	0x08007ce9
 8007cc8:	08007cf1 	.word	0x08007cf1
 8007ccc:	08007cf9 	.word	0x08007cf9
 8007cd0:	08007d0f 	.word	0x08007d0f
 8007cd4:	08007cff 	.word	0x08007cff
 8007cd8:	08007d0f 	.word	0x08007d0f
 8007cdc:	08007d0f 	.word	0x08007d0f
 8007ce0:	08007d0f 	.word	0x08007d0f
 8007ce4:	08007d07 	.word	0x08007d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ce8:	f7fd fd42 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 8007cec:	61f8      	str	r0, [r7, #28]
        break;
 8007cee:	e014      	b.n	8007d1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf0:	f7fd fd54 	bl	800579c <HAL_RCC_GetPCLK2Freq>
 8007cf4:	61f8      	str	r0, [r7, #28]
        break;
 8007cf6:	e010      	b.n	8007d1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8007d74 <UART_SetConfig+0x56c>)
 8007cfa:	61fb      	str	r3, [r7, #28]
        break;
 8007cfc:	e00d      	b.n	8007d1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cfe:	f7fd fc9f 	bl	8005640 <HAL_RCC_GetSysClockFreq>
 8007d02:	61f8      	str	r0, [r7, #28]
        break;
 8007d04:	e009      	b.n	8007d1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d0a:	61fb      	str	r3, [r7, #28]
        break;
 8007d0c:	e005      	b.n	8007d1a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d18:	bf00      	nop
    }

    if (pclk != 0U)
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d019      	beq.n	8007d54 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	085a      	lsrs	r2, r3, #1
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	441a      	add	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	2b0f      	cmp	r3, #15
 8007d38:	d909      	bls.n	8007d4e <UART_SetConfig+0x546>
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d40:	d205      	bcs.n	8007d4e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60da      	str	r2, [r3, #12]
 8007d4c:	e002      	b.n	8007d54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007d60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3728      	adds	r7, #40	@ 0x28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d6e:	bf00      	nop
 8007d70:	40008000 	.word	0x40008000
 8007d74:	00f42400 	.word	0x00f42400

08007d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dea:	f003 0304 	and.w	r3, r3, #4
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0c:	f003 0310 	and.w	r3, r3, #16
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00a      	beq.n	8007e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01a      	beq.n	8007e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e76:	d10a      	bne.n	8007e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	605a      	str	r2, [r3, #4]
  }
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b098      	sub	sp, #96	@ 0x60
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ecc:	f7fb fdf8 	bl	8003ac0 <HAL_GetTick>
 8007ed0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0308 	and.w	r3, r3, #8
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	d12e      	bne.n	8007f3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ee0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f88c 	bl	800800c <UART_WaitOnFlagUntilTimeout>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d021      	beq.n	8007f3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	461a      	mov	r2, r3
 8007f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e6      	bne.n	8007efa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e062      	b.n	8008004 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	d149      	bne.n	8007fe0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f54:	2200      	movs	r2, #0
 8007f56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f856 	bl	800800c <UART_WaitOnFlagUntilTimeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d03c      	beq.n	8007fe0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	623b      	str	r3, [r7, #32]
   return(result);
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f84:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e6      	bne.n	8007f66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0301 	bic.w	r3, r3, #1
 8007fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fb8:	61fa      	str	r2, [r7, #28]
 8007fba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	69b9      	ldr	r1, [r7, #24]
 8007fbe:	69fa      	ldr	r2, [r7, #28]
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e5      	bne.n	8007f98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e011      	b.n	8008004 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3758      	adds	r7, #88	@ 0x58
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	4613      	mov	r3, r2
 800801a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800801c:	e04f      	b.n	80080be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008024:	d04b      	beq.n	80080be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008026:	f7fb fd4b 	bl	8003ac0 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	429a      	cmp	r2, r3
 8008034:	d302      	bcc.n	800803c <UART_WaitOnFlagUntilTimeout+0x30>
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e04e      	b.n	80080de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	d037      	beq.n	80080be <UART_WaitOnFlagUntilTimeout+0xb2>
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2b80      	cmp	r3, #128	@ 0x80
 8008052:	d034      	beq.n	80080be <UART_WaitOnFlagUntilTimeout+0xb2>
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b40      	cmp	r3, #64	@ 0x40
 8008058:	d031      	beq.n	80080be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	2b08      	cmp	r3, #8
 8008066:	d110      	bne.n	800808a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2208      	movs	r2, #8
 800806e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f000 f838 	bl	80080e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2208      	movs	r2, #8
 800807a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e029      	b.n	80080de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	69db      	ldr	r3, [r3, #28]
 8008090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008098:	d111      	bne.n	80080be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 f81e 	bl	80080e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e00f      	b.n	80080de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	69da      	ldr	r2, [r3, #28]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4013      	ands	r3, r2
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	bf0c      	ite	eq
 80080ce:	2301      	moveq	r3, #1
 80080d0:	2300      	movne	r3, #0
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d0a0      	beq.n	800801e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b095      	sub	sp, #84	@ 0x54
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f6:	e853 3f00 	ldrex	r3, [r3]
 80080fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800810c:	643b      	str	r3, [r7, #64]	@ 0x40
 800810e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008112:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800811a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e6      	bne.n	80080ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3308      	adds	r3, #8
 8008126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	e853 3f00 	ldrex	r3, [r3]
 800812e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	f023 0301 	bic.w	r3, r3, #1
 8008136:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3308      	adds	r3, #8
 800813e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008140:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008148:	e841 2300 	strex	r3, r2, [r1]
 800814c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1e5      	bne.n	8008120 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008158:	2b01      	cmp	r3, #1
 800815a:	d118      	bne.n	800818e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	60bb      	str	r3, [r7, #8]
   return(result);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f023 0310 	bic.w	r3, r3, #16
 8008170:	647b      	str	r3, [r7, #68]	@ 0x44
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800817a:	61bb      	str	r3, [r7, #24]
 800817c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	6979      	ldr	r1, [r7, #20]
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	613b      	str	r3, [r7, #16]
   return(result);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e6      	bne.n	800815c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2220      	movs	r2, #32
 8008192:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80081a2:	bf00      	nop
 80081a4:	3754      	adds	r7, #84	@ 0x54
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081ae:	b084      	sub	sp, #16
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	f107 001c 	add.w	r0, r7, #28
 80081bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fa69 	bl	80086a4 <USB_CoreReset>
 80081d2:	4603      	mov	r3, r0
 80081d4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80081d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d106      	bne.n	80081ec <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80081ea:	e005      	b.n	80081f8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008204:	b004      	add	sp, #16
 8008206:	4770      	bx	lr

08008208 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f023 0201 	bic.w	r2, r3, #1
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d115      	bne.n	8008278 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008258:	200a      	movs	r0, #10
 800825a:	f7fb fc3d 	bl	8003ad8 <HAL_Delay>
      ms += 10U;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	330a      	adds	r3, #10
 8008262:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fa0f 	bl	8008688 <USB_GetMode>
 800826a:	4603      	mov	r3, r0
 800826c:	2b01      	cmp	r3, #1
 800826e:	d01e      	beq.n	80082ae <USB_SetCurrentMode+0x84>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2bc7      	cmp	r3, #199	@ 0xc7
 8008274:	d9f0      	bls.n	8008258 <USB_SetCurrentMode+0x2e>
 8008276:	e01a      	b.n	80082ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d115      	bne.n	80082aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800828a:	200a      	movs	r0, #10
 800828c:	f7fb fc24 	bl	8003ad8 <HAL_Delay>
      ms += 10U;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	330a      	adds	r3, #10
 8008294:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f9f6 	bl	8008688 <USB_GetMode>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d005      	beq.n	80082ae <USB_SetCurrentMode+0x84>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80082a6:	d9f0      	bls.n	800828a <USB_SetCurrentMode+0x60>
 80082a8:	e001      	b.n	80082ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e005      	b.n	80082ba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2bc8      	cmp	r3, #200	@ 0xc8
 80082b2:	d101      	bne.n	80082b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e000      	b.n	80082ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082c4:	b084      	sub	sp, #16
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b086      	sub	sp, #24
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80082d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80082de:	2300      	movs	r3, #0
 80082e0:	613b      	str	r3, [r7, #16]
 80082e2:	e009      	b.n	80082f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	3340      	adds	r3, #64	@ 0x40
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	2200      	movs	r2, #0
 80082f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	3301      	adds	r3, #1
 80082f6:	613b      	str	r3, [r7, #16]
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	2b0e      	cmp	r3, #14
 80082fc:	d9f2      	bls.n	80082e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008302:	2b00      	cmp	r3, #0
 8008304:	d11c      	bne.n	8008340 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008314:	f043 0302 	orr.w	r3, r3, #2
 8008318:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	e005      	b.n	800834c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008344:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008352:	461a      	mov	r2, r3
 8008354:	2300      	movs	r3, #0
 8008356:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008358:	2103      	movs	r1, #3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f95a 	bl	8008614 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008360:	2110      	movs	r1, #16
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f8f6 	bl	8008554 <USB_FlushTxFifo>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f920 	bl	80085b8 <USB_FlushRxFifo>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008388:	461a      	mov	r2, r3
 800838a:	2300      	movs	r3, #0
 800838c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008394:	461a      	mov	r2, r3
 8008396:	2300      	movs	r3, #0
 8008398:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083a0:	461a      	mov	r2, r3
 80083a2:	2300      	movs	r3, #0
 80083a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083a6:	2300      	movs	r3, #0
 80083a8:	613b      	str	r3, [r7, #16]
 80083aa:	e043      	b.n	8008434 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083c2:	d118      	bne.n	80083f6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10a      	bne.n	80083e0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d6:	461a      	mov	r2, r3
 80083d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	e013      	b.n	8008408 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ec:	461a      	mov	r2, r3
 80083ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	e008      	b.n	8008408 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008402:	461a      	mov	r2, r3
 8008404:	2300      	movs	r3, #0
 8008406:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008414:	461a      	mov	r2, r3
 8008416:	2300      	movs	r3, #0
 8008418:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008426:	461a      	mov	r2, r3
 8008428:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800842c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	3301      	adds	r3, #1
 8008432:	613b      	str	r3, [r7, #16]
 8008434:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008438:	461a      	mov	r2, r3
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	4293      	cmp	r3, r2
 800843e:	d3b5      	bcc.n	80083ac <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008440:	2300      	movs	r3, #0
 8008442:	613b      	str	r3, [r7, #16]
 8008444:	e043      	b.n	80084ce <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008458:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800845c:	d118      	bne.n	8008490 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008470:	461a      	mov	r2, r3
 8008472:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008476:	6013      	str	r3, [r2, #0]
 8008478:	e013      	b.n	80084a2 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008486:	461a      	mov	r2, r3
 8008488:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	e008      	b.n	80084a2 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800849c:	461a      	mov	r2, r3
 800849e:	2300      	movs	r3, #0
 80084a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ae:	461a      	mov	r2, r3
 80084b0:	2300      	movs	r3, #0
 80084b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c0:	461a      	mov	r2, r3
 80084c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	3301      	adds	r3, #1
 80084cc:	613b      	str	r3, [r7, #16]
 80084ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084d2:	461a      	mov	r2, r3
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d3b5      	bcc.n	8008446 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80084fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	f043 0210 	orr.w	r2, r3, #16
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699a      	ldr	r2, [r3, #24]
 800850c:	4b10      	ldr	r3, [pc, #64]	@ (8008550 <USB_DevInit+0x28c>)
 800850e:	4313      	orrs	r3, r2
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008514:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	f043 0208 	orr.w	r2, r3, #8
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008528:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800852c:	2b01      	cmp	r3, #1
 800852e:	d107      	bne.n	8008540 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008538:	f043 0304 	orr.w	r3, r3, #4
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008540:	7dfb      	ldrb	r3, [r7, #23]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800854c:	b004      	add	sp, #16
 800854e:	4770      	bx	lr
 8008550:	803c3800 	.word	0x803c3800

08008554 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3301      	adds	r3, #1
 8008566:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800856e:	d901      	bls.n	8008574 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e01b      	b.n	80085ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	daf2      	bge.n	8008562 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	019b      	lsls	r3, r3, #6
 8008584:	f043 0220 	orr.w	r2, r3, #32
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3301      	adds	r3, #1
 8008590:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008598:	d901      	bls.n	800859e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e006      	b.n	80085ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	f003 0320 	and.w	r3, r3, #32
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	d0f0      	beq.n	800858c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	3301      	adds	r3, #1
 80085c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085d0:	d901      	bls.n	80085d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e018      	b.n	8008608 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	daf2      	bge.n	80085c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2210      	movs	r2, #16
 80085e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3301      	adds	r3, #1
 80085ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085f4:	d901      	bls.n	80085fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e006      	b.n	8008608 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	f003 0310 	and.w	r3, r3, #16
 8008602:	2b10      	cmp	r3, #16
 8008604:	d0f0      	beq.n	80085e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	78fb      	ldrb	r3, [r7, #3]
 800862e:	68f9      	ldr	r1, [r7, #12]
 8008630:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008634:	4313      	orrs	r3, r2
 8008636:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008646:	b480      	push	{r7}
 8008648:	b085      	sub	sp, #20
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008660:	f023 0303 	bic.w	r3, r3, #3
 8008664:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008674:	f043 0302 	orr.w	r3, r3, #2
 8008678:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	f003 0301 	and.w	r3, r3, #1
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3301      	adds	r3, #1
 80086b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086bc:	d901      	bls.n	80086c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e01b      	b.n	80086fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	daf2      	bge.n	80086b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	f043 0201 	orr.w	r2, r3, #1
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3301      	adds	r3, #1
 80086de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086e6:	d901      	bls.n	80086ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e006      	b.n	80086fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d0f0      	beq.n	80086da <USB_CoreReset+0x36>

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <__cvt>:
 8008706:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800870a:	ec57 6b10 	vmov	r6, r7, d0
 800870e:	2f00      	cmp	r7, #0
 8008710:	460c      	mov	r4, r1
 8008712:	4619      	mov	r1, r3
 8008714:	463b      	mov	r3, r7
 8008716:	bfbb      	ittet	lt
 8008718:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800871c:	461f      	movlt	r7, r3
 800871e:	2300      	movge	r3, #0
 8008720:	232d      	movlt	r3, #45	@ 0x2d
 8008722:	700b      	strb	r3, [r1, #0]
 8008724:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008726:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800872a:	4691      	mov	r9, r2
 800872c:	f023 0820 	bic.w	r8, r3, #32
 8008730:	bfbc      	itt	lt
 8008732:	4632      	movlt	r2, r6
 8008734:	4616      	movlt	r6, r2
 8008736:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800873a:	d005      	beq.n	8008748 <__cvt+0x42>
 800873c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008740:	d100      	bne.n	8008744 <__cvt+0x3e>
 8008742:	3401      	adds	r4, #1
 8008744:	2102      	movs	r1, #2
 8008746:	e000      	b.n	800874a <__cvt+0x44>
 8008748:	2103      	movs	r1, #3
 800874a:	ab03      	add	r3, sp, #12
 800874c:	9301      	str	r3, [sp, #4]
 800874e:	ab02      	add	r3, sp, #8
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	ec47 6b10 	vmov	d0, r6, r7
 8008756:	4653      	mov	r3, sl
 8008758:	4622      	mov	r2, r4
 800875a:	f001 f821 	bl	80097a0 <_dtoa_r>
 800875e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008762:	4605      	mov	r5, r0
 8008764:	d119      	bne.n	800879a <__cvt+0x94>
 8008766:	f019 0f01 	tst.w	r9, #1
 800876a:	d00e      	beq.n	800878a <__cvt+0x84>
 800876c:	eb00 0904 	add.w	r9, r0, r4
 8008770:	2200      	movs	r2, #0
 8008772:	2300      	movs	r3, #0
 8008774:	4630      	mov	r0, r6
 8008776:	4639      	mov	r1, r7
 8008778:	f7f8 f9a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800877c:	b108      	cbz	r0, 8008782 <__cvt+0x7c>
 800877e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008782:	2230      	movs	r2, #48	@ 0x30
 8008784:	9b03      	ldr	r3, [sp, #12]
 8008786:	454b      	cmp	r3, r9
 8008788:	d31e      	bcc.n	80087c8 <__cvt+0xc2>
 800878a:	9b03      	ldr	r3, [sp, #12]
 800878c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800878e:	1b5b      	subs	r3, r3, r5
 8008790:	4628      	mov	r0, r5
 8008792:	6013      	str	r3, [r2, #0]
 8008794:	b004      	add	sp, #16
 8008796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800879e:	eb00 0904 	add.w	r9, r0, r4
 80087a2:	d1e5      	bne.n	8008770 <__cvt+0x6a>
 80087a4:	7803      	ldrb	r3, [r0, #0]
 80087a6:	2b30      	cmp	r3, #48	@ 0x30
 80087a8:	d10a      	bne.n	80087c0 <__cvt+0xba>
 80087aa:	2200      	movs	r2, #0
 80087ac:	2300      	movs	r3, #0
 80087ae:	4630      	mov	r0, r6
 80087b0:	4639      	mov	r1, r7
 80087b2:	f7f8 f989 	bl	8000ac8 <__aeabi_dcmpeq>
 80087b6:	b918      	cbnz	r0, 80087c0 <__cvt+0xba>
 80087b8:	f1c4 0401 	rsb	r4, r4, #1
 80087bc:	f8ca 4000 	str.w	r4, [sl]
 80087c0:	f8da 3000 	ldr.w	r3, [sl]
 80087c4:	4499      	add	r9, r3
 80087c6:	e7d3      	b.n	8008770 <__cvt+0x6a>
 80087c8:	1c59      	adds	r1, r3, #1
 80087ca:	9103      	str	r1, [sp, #12]
 80087cc:	701a      	strb	r2, [r3, #0]
 80087ce:	e7d9      	b.n	8008784 <__cvt+0x7e>

080087d0 <__exponent>:
 80087d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087d2:	2900      	cmp	r1, #0
 80087d4:	bfba      	itte	lt
 80087d6:	4249      	neglt	r1, r1
 80087d8:	232d      	movlt	r3, #45	@ 0x2d
 80087da:	232b      	movge	r3, #43	@ 0x2b
 80087dc:	2909      	cmp	r1, #9
 80087de:	7002      	strb	r2, [r0, #0]
 80087e0:	7043      	strb	r3, [r0, #1]
 80087e2:	dd29      	ble.n	8008838 <__exponent+0x68>
 80087e4:	f10d 0307 	add.w	r3, sp, #7
 80087e8:	461d      	mov	r5, r3
 80087ea:	270a      	movs	r7, #10
 80087ec:	461a      	mov	r2, r3
 80087ee:	fbb1 f6f7 	udiv	r6, r1, r7
 80087f2:	fb07 1416 	mls	r4, r7, r6, r1
 80087f6:	3430      	adds	r4, #48	@ 0x30
 80087f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80087fc:	460c      	mov	r4, r1
 80087fe:	2c63      	cmp	r4, #99	@ 0x63
 8008800:	f103 33ff 	add.w	r3, r3, #4294967295
 8008804:	4631      	mov	r1, r6
 8008806:	dcf1      	bgt.n	80087ec <__exponent+0x1c>
 8008808:	3130      	adds	r1, #48	@ 0x30
 800880a:	1e94      	subs	r4, r2, #2
 800880c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008810:	1c41      	adds	r1, r0, #1
 8008812:	4623      	mov	r3, r4
 8008814:	42ab      	cmp	r3, r5
 8008816:	d30a      	bcc.n	800882e <__exponent+0x5e>
 8008818:	f10d 0309 	add.w	r3, sp, #9
 800881c:	1a9b      	subs	r3, r3, r2
 800881e:	42ac      	cmp	r4, r5
 8008820:	bf88      	it	hi
 8008822:	2300      	movhi	r3, #0
 8008824:	3302      	adds	r3, #2
 8008826:	4403      	add	r3, r0
 8008828:	1a18      	subs	r0, r3, r0
 800882a:	b003      	add	sp, #12
 800882c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800882e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008832:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008836:	e7ed      	b.n	8008814 <__exponent+0x44>
 8008838:	2330      	movs	r3, #48	@ 0x30
 800883a:	3130      	adds	r1, #48	@ 0x30
 800883c:	7083      	strb	r3, [r0, #2]
 800883e:	70c1      	strb	r1, [r0, #3]
 8008840:	1d03      	adds	r3, r0, #4
 8008842:	e7f1      	b.n	8008828 <__exponent+0x58>

08008844 <_printf_float>:
 8008844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008848:	b08d      	sub	sp, #52	@ 0x34
 800884a:	460c      	mov	r4, r1
 800884c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008850:	4616      	mov	r6, r2
 8008852:	461f      	mov	r7, r3
 8008854:	4605      	mov	r5, r0
 8008856:	f000 fe75 	bl	8009544 <_localeconv_r>
 800885a:	6803      	ldr	r3, [r0, #0]
 800885c:	9304      	str	r3, [sp, #16]
 800885e:	4618      	mov	r0, r3
 8008860:	f7f7 fd06 	bl	8000270 <strlen>
 8008864:	2300      	movs	r3, #0
 8008866:	930a      	str	r3, [sp, #40]	@ 0x28
 8008868:	f8d8 3000 	ldr.w	r3, [r8]
 800886c:	9005      	str	r0, [sp, #20]
 800886e:	3307      	adds	r3, #7
 8008870:	f023 0307 	bic.w	r3, r3, #7
 8008874:	f103 0208 	add.w	r2, r3, #8
 8008878:	f894 a018 	ldrb.w	sl, [r4, #24]
 800887c:	f8d4 b000 	ldr.w	fp, [r4]
 8008880:	f8c8 2000 	str.w	r2, [r8]
 8008884:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008888:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800888c:	9307      	str	r3, [sp, #28]
 800888e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008892:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800889a:	4b9c      	ldr	r3, [pc, #624]	@ (8008b0c <_printf_float+0x2c8>)
 800889c:	f04f 32ff 	mov.w	r2, #4294967295
 80088a0:	f7f8 f944 	bl	8000b2c <__aeabi_dcmpun>
 80088a4:	bb70      	cbnz	r0, 8008904 <_printf_float+0xc0>
 80088a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088aa:	4b98      	ldr	r3, [pc, #608]	@ (8008b0c <_printf_float+0x2c8>)
 80088ac:	f04f 32ff 	mov.w	r2, #4294967295
 80088b0:	f7f8 f91e 	bl	8000af0 <__aeabi_dcmple>
 80088b4:	bb30      	cbnz	r0, 8008904 <_printf_float+0xc0>
 80088b6:	2200      	movs	r2, #0
 80088b8:	2300      	movs	r3, #0
 80088ba:	4640      	mov	r0, r8
 80088bc:	4649      	mov	r1, r9
 80088be:	f7f8 f90d 	bl	8000adc <__aeabi_dcmplt>
 80088c2:	b110      	cbz	r0, 80088ca <_printf_float+0x86>
 80088c4:	232d      	movs	r3, #45	@ 0x2d
 80088c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088ca:	4a91      	ldr	r2, [pc, #580]	@ (8008b10 <_printf_float+0x2cc>)
 80088cc:	4b91      	ldr	r3, [pc, #580]	@ (8008b14 <_printf_float+0x2d0>)
 80088ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80088d2:	bf8c      	ite	hi
 80088d4:	4690      	movhi	r8, r2
 80088d6:	4698      	movls	r8, r3
 80088d8:	2303      	movs	r3, #3
 80088da:	6123      	str	r3, [r4, #16]
 80088dc:	f02b 0304 	bic.w	r3, fp, #4
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	f04f 0900 	mov.w	r9, #0
 80088e6:	9700      	str	r7, [sp, #0]
 80088e8:	4633      	mov	r3, r6
 80088ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80088ec:	4621      	mov	r1, r4
 80088ee:	4628      	mov	r0, r5
 80088f0:	f000 f9d2 	bl	8008c98 <_printf_common>
 80088f4:	3001      	adds	r0, #1
 80088f6:	f040 808d 	bne.w	8008a14 <_printf_float+0x1d0>
 80088fa:	f04f 30ff 	mov.w	r0, #4294967295
 80088fe:	b00d      	add	sp, #52	@ 0x34
 8008900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008904:	4642      	mov	r2, r8
 8008906:	464b      	mov	r3, r9
 8008908:	4640      	mov	r0, r8
 800890a:	4649      	mov	r1, r9
 800890c:	f7f8 f90e 	bl	8000b2c <__aeabi_dcmpun>
 8008910:	b140      	cbz	r0, 8008924 <_printf_float+0xe0>
 8008912:	464b      	mov	r3, r9
 8008914:	2b00      	cmp	r3, #0
 8008916:	bfbc      	itt	lt
 8008918:	232d      	movlt	r3, #45	@ 0x2d
 800891a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800891e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b18 <_printf_float+0x2d4>)
 8008920:	4b7e      	ldr	r3, [pc, #504]	@ (8008b1c <_printf_float+0x2d8>)
 8008922:	e7d4      	b.n	80088ce <_printf_float+0x8a>
 8008924:	6863      	ldr	r3, [r4, #4]
 8008926:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800892a:	9206      	str	r2, [sp, #24]
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	d13b      	bne.n	80089a8 <_printf_float+0x164>
 8008930:	2306      	movs	r3, #6
 8008932:	6063      	str	r3, [r4, #4]
 8008934:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008938:	2300      	movs	r3, #0
 800893a:	6022      	str	r2, [r4, #0]
 800893c:	9303      	str	r3, [sp, #12]
 800893e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008940:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008944:	ab09      	add	r3, sp, #36	@ 0x24
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	6861      	ldr	r1, [r4, #4]
 800894a:	ec49 8b10 	vmov	d0, r8, r9
 800894e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008952:	4628      	mov	r0, r5
 8008954:	f7ff fed7 	bl	8008706 <__cvt>
 8008958:	9b06      	ldr	r3, [sp, #24]
 800895a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800895c:	2b47      	cmp	r3, #71	@ 0x47
 800895e:	4680      	mov	r8, r0
 8008960:	d129      	bne.n	80089b6 <_printf_float+0x172>
 8008962:	1cc8      	adds	r0, r1, #3
 8008964:	db02      	blt.n	800896c <_printf_float+0x128>
 8008966:	6863      	ldr	r3, [r4, #4]
 8008968:	4299      	cmp	r1, r3
 800896a:	dd41      	ble.n	80089f0 <_printf_float+0x1ac>
 800896c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008970:	fa5f fa8a 	uxtb.w	sl, sl
 8008974:	3901      	subs	r1, #1
 8008976:	4652      	mov	r2, sl
 8008978:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800897c:	9109      	str	r1, [sp, #36]	@ 0x24
 800897e:	f7ff ff27 	bl	80087d0 <__exponent>
 8008982:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008984:	1813      	adds	r3, r2, r0
 8008986:	2a01      	cmp	r2, #1
 8008988:	4681      	mov	r9, r0
 800898a:	6123      	str	r3, [r4, #16]
 800898c:	dc02      	bgt.n	8008994 <_printf_float+0x150>
 800898e:	6822      	ldr	r2, [r4, #0]
 8008990:	07d2      	lsls	r2, r2, #31
 8008992:	d501      	bpl.n	8008998 <_printf_float+0x154>
 8008994:	3301      	adds	r3, #1
 8008996:	6123      	str	r3, [r4, #16]
 8008998:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0a2      	beq.n	80088e6 <_printf_float+0xa2>
 80089a0:	232d      	movs	r3, #45	@ 0x2d
 80089a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089a6:	e79e      	b.n	80088e6 <_printf_float+0xa2>
 80089a8:	9a06      	ldr	r2, [sp, #24]
 80089aa:	2a47      	cmp	r2, #71	@ 0x47
 80089ac:	d1c2      	bne.n	8008934 <_printf_float+0xf0>
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1c0      	bne.n	8008934 <_printf_float+0xf0>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e7bd      	b.n	8008932 <_printf_float+0xee>
 80089b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80089ba:	d9db      	bls.n	8008974 <_printf_float+0x130>
 80089bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80089c0:	d118      	bne.n	80089f4 <_printf_float+0x1b0>
 80089c2:	2900      	cmp	r1, #0
 80089c4:	6863      	ldr	r3, [r4, #4]
 80089c6:	dd0b      	ble.n	80089e0 <_printf_float+0x19c>
 80089c8:	6121      	str	r1, [r4, #16]
 80089ca:	b913      	cbnz	r3, 80089d2 <_printf_float+0x18e>
 80089cc:	6822      	ldr	r2, [r4, #0]
 80089ce:	07d0      	lsls	r0, r2, #31
 80089d0:	d502      	bpl.n	80089d8 <_printf_float+0x194>
 80089d2:	3301      	adds	r3, #1
 80089d4:	440b      	add	r3, r1
 80089d6:	6123      	str	r3, [r4, #16]
 80089d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80089da:	f04f 0900 	mov.w	r9, #0
 80089de:	e7db      	b.n	8008998 <_printf_float+0x154>
 80089e0:	b913      	cbnz	r3, 80089e8 <_printf_float+0x1a4>
 80089e2:	6822      	ldr	r2, [r4, #0]
 80089e4:	07d2      	lsls	r2, r2, #31
 80089e6:	d501      	bpl.n	80089ec <_printf_float+0x1a8>
 80089e8:	3302      	adds	r3, #2
 80089ea:	e7f4      	b.n	80089d6 <_printf_float+0x192>
 80089ec:	2301      	movs	r3, #1
 80089ee:	e7f2      	b.n	80089d6 <_printf_float+0x192>
 80089f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80089f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089f6:	4299      	cmp	r1, r3
 80089f8:	db05      	blt.n	8008a06 <_printf_float+0x1c2>
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	6121      	str	r1, [r4, #16]
 80089fe:	07d8      	lsls	r0, r3, #31
 8008a00:	d5ea      	bpl.n	80089d8 <_printf_float+0x194>
 8008a02:	1c4b      	adds	r3, r1, #1
 8008a04:	e7e7      	b.n	80089d6 <_printf_float+0x192>
 8008a06:	2900      	cmp	r1, #0
 8008a08:	bfd4      	ite	le
 8008a0a:	f1c1 0202 	rsble	r2, r1, #2
 8008a0e:	2201      	movgt	r2, #1
 8008a10:	4413      	add	r3, r2
 8008a12:	e7e0      	b.n	80089d6 <_printf_float+0x192>
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	055a      	lsls	r2, r3, #21
 8008a18:	d407      	bmi.n	8008a2a <_printf_float+0x1e6>
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	4642      	mov	r2, r8
 8008a1e:	4631      	mov	r1, r6
 8008a20:	4628      	mov	r0, r5
 8008a22:	47b8      	blx	r7
 8008a24:	3001      	adds	r0, #1
 8008a26:	d12b      	bne.n	8008a80 <_printf_float+0x23c>
 8008a28:	e767      	b.n	80088fa <_printf_float+0xb6>
 8008a2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a2e:	f240 80dd 	bls.w	8008bec <_printf_float+0x3a8>
 8008a32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a36:	2200      	movs	r2, #0
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f7f8 f845 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d033      	beq.n	8008aaa <_printf_float+0x266>
 8008a42:	4a37      	ldr	r2, [pc, #220]	@ (8008b20 <_printf_float+0x2dc>)
 8008a44:	2301      	movs	r3, #1
 8008a46:	4631      	mov	r1, r6
 8008a48:	4628      	mov	r0, r5
 8008a4a:	47b8      	blx	r7
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	f43f af54 	beq.w	80088fa <_printf_float+0xb6>
 8008a52:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008a56:	4543      	cmp	r3, r8
 8008a58:	db02      	blt.n	8008a60 <_printf_float+0x21c>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	07d8      	lsls	r0, r3, #31
 8008a5e:	d50f      	bpl.n	8008a80 <_printf_float+0x23c>
 8008a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a64:	4631      	mov	r1, r6
 8008a66:	4628      	mov	r0, r5
 8008a68:	47b8      	blx	r7
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	f43f af45 	beq.w	80088fa <_printf_float+0xb6>
 8008a70:	f04f 0900 	mov.w	r9, #0
 8008a74:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a78:	f104 0a1a 	add.w	sl, r4, #26
 8008a7c:	45c8      	cmp	r8, r9
 8008a7e:	dc09      	bgt.n	8008a94 <_printf_float+0x250>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	079b      	lsls	r3, r3, #30
 8008a84:	f100 8103 	bmi.w	8008c8e <_printf_float+0x44a>
 8008a88:	68e0      	ldr	r0, [r4, #12]
 8008a8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a8c:	4298      	cmp	r0, r3
 8008a8e:	bfb8      	it	lt
 8008a90:	4618      	movlt	r0, r3
 8008a92:	e734      	b.n	80088fe <_printf_float+0xba>
 8008a94:	2301      	movs	r3, #1
 8008a96:	4652      	mov	r2, sl
 8008a98:	4631      	mov	r1, r6
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	47b8      	blx	r7
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	f43f af2b 	beq.w	80088fa <_printf_float+0xb6>
 8008aa4:	f109 0901 	add.w	r9, r9, #1
 8008aa8:	e7e8      	b.n	8008a7c <_printf_float+0x238>
 8008aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	dc39      	bgt.n	8008b24 <_printf_float+0x2e0>
 8008ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8008b20 <_printf_float+0x2dc>)
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b8      	blx	r7
 8008aba:	3001      	adds	r0, #1
 8008abc:	f43f af1d 	beq.w	80088fa <_printf_float+0xb6>
 8008ac0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008ac4:	ea59 0303 	orrs.w	r3, r9, r3
 8008ac8:	d102      	bne.n	8008ad0 <_printf_float+0x28c>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	07d9      	lsls	r1, r3, #31
 8008ace:	d5d7      	bpl.n	8008a80 <_printf_float+0x23c>
 8008ad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	f43f af0d 	beq.w	80088fa <_printf_float+0xb6>
 8008ae0:	f04f 0a00 	mov.w	sl, #0
 8008ae4:	f104 0b1a 	add.w	fp, r4, #26
 8008ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aea:	425b      	negs	r3, r3
 8008aec:	4553      	cmp	r3, sl
 8008aee:	dc01      	bgt.n	8008af4 <_printf_float+0x2b0>
 8008af0:	464b      	mov	r3, r9
 8008af2:	e793      	b.n	8008a1c <_printf_float+0x1d8>
 8008af4:	2301      	movs	r3, #1
 8008af6:	465a      	mov	r2, fp
 8008af8:	4631      	mov	r1, r6
 8008afa:	4628      	mov	r0, r5
 8008afc:	47b8      	blx	r7
 8008afe:	3001      	adds	r0, #1
 8008b00:	f43f aefb 	beq.w	80088fa <_printf_float+0xb6>
 8008b04:	f10a 0a01 	add.w	sl, sl, #1
 8008b08:	e7ee      	b.n	8008ae8 <_printf_float+0x2a4>
 8008b0a:	bf00      	nop
 8008b0c:	7fefffff 	.word	0x7fefffff
 8008b10:	0800bd20 	.word	0x0800bd20
 8008b14:	0800bd1c 	.word	0x0800bd1c
 8008b18:	0800bd28 	.word	0x0800bd28
 8008b1c:	0800bd24 	.word	0x0800bd24
 8008b20:	0800bd2c 	.word	0x0800bd2c
 8008b24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b2a:	4553      	cmp	r3, sl
 8008b2c:	bfa8      	it	ge
 8008b2e:	4653      	movge	r3, sl
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	4699      	mov	r9, r3
 8008b34:	dc36      	bgt.n	8008ba4 <_printf_float+0x360>
 8008b36:	f04f 0b00 	mov.w	fp, #0
 8008b3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b3e:	f104 021a 	add.w	r2, r4, #26
 8008b42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b44:	9306      	str	r3, [sp, #24]
 8008b46:	eba3 0309 	sub.w	r3, r3, r9
 8008b4a:	455b      	cmp	r3, fp
 8008b4c:	dc31      	bgt.n	8008bb2 <_printf_float+0x36e>
 8008b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b50:	459a      	cmp	sl, r3
 8008b52:	dc3a      	bgt.n	8008bca <_printf_float+0x386>
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	07da      	lsls	r2, r3, #31
 8008b58:	d437      	bmi.n	8008bca <_printf_float+0x386>
 8008b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5c:	ebaa 0903 	sub.w	r9, sl, r3
 8008b60:	9b06      	ldr	r3, [sp, #24]
 8008b62:	ebaa 0303 	sub.w	r3, sl, r3
 8008b66:	4599      	cmp	r9, r3
 8008b68:	bfa8      	it	ge
 8008b6a:	4699      	movge	r9, r3
 8008b6c:	f1b9 0f00 	cmp.w	r9, #0
 8008b70:	dc33      	bgt.n	8008bda <_printf_float+0x396>
 8008b72:	f04f 0800 	mov.w	r8, #0
 8008b76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b7a:	f104 0b1a 	add.w	fp, r4, #26
 8008b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b80:	ebaa 0303 	sub.w	r3, sl, r3
 8008b84:	eba3 0309 	sub.w	r3, r3, r9
 8008b88:	4543      	cmp	r3, r8
 8008b8a:	f77f af79 	ble.w	8008a80 <_printf_float+0x23c>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	465a      	mov	r2, fp
 8008b92:	4631      	mov	r1, r6
 8008b94:	4628      	mov	r0, r5
 8008b96:	47b8      	blx	r7
 8008b98:	3001      	adds	r0, #1
 8008b9a:	f43f aeae 	beq.w	80088fa <_printf_float+0xb6>
 8008b9e:	f108 0801 	add.w	r8, r8, #1
 8008ba2:	e7ec      	b.n	8008b7e <_printf_float+0x33a>
 8008ba4:	4642      	mov	r2, r8
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	4628      	mov	r0, r5
 8008baa:	47b8      	blx	r7
 8008bac:	3001      	adds	r0, #1
 8008bae:	d1c2      	bne.n	8008b36 <_printf_float+0x2f2>
 8008bb0:	e6a3      	b.n	80088fa <_printf_float+0xb6>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	9206      	str	r2, [sp, #24]
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f43f ae9c 	beq.w	80088fa <_printf_float+0xb6>
 8008bc2:	9a06      	ldr	r2, [sp, #24]
 8008bc4:	f10b 0b01 	add.w	fp, fp, #1
 8008bc8:	e7bb      	b.n	8008b42 <_printf_float+0x2fe>
 8008bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bce:	4631      	mov	r1, r6
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	47b8      	blx	r7
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d1c0      	bne.n	8008b5a <_printf_float+0x316>
 8008bd8:	e68f      	b.n	80088fa <_printf_float+0xb6>
 8008bda:	9a06      	ldr	r2, [sp, #24]
 8008bdc:	464b      	mov	r3, r9
 8008bde:	4442      	add	r2, r8
 8008be0:	4631      	mov	r1, r6
 8008be2:	4628      	mov	r0, r5
 8008be4:	47b8      	blx	r7
 8008be6:	3001      	adds	r0, #1
 8008be8:	d1c3      	bne.n	8008b72 <_printf_float+0x32e>
 8008bea:	e686      	b.n	80088fa <_printf_float+0xb6>
 8008bec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008bf0:	f1ba 0f01 	cmp.w	sl, #1
 8008bf4:	dc01      	bgt.n	8008bfa <_printf_float+0x3b6>
 8008bf6:	07db      	lsls	r3, r3, #31
 8008bf8:	d536      	bpl.n	8008c68 <_printf_float+0x424>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	4642      	mov	r2, r8
 8008bfe:	4631      	mov	r1, r6
 8008c00:	4628      	mov	r0, r5
 8008c02:	47b8      	blx	r7
 8008c04:	3001      	adds	r0, #1
 8008c06:	f43f ae78 	beq.w	80088fa <_printf_float+0xb6>
 8008c0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c0e:	4631      	mov	r1, r6
 8008c10:	4628      	mov	r0, r5
 8008c12:	47b8      	blx	r7
 8008c14:	3001      	adds	r0, #1
 8008c16:	f43f ae70 	beq.w	80088fa <_printf_float+0xb6>
 8008c1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2300      	movs	r3, #0
 8008c22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c26:	f7f7 ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c2a:	b9c0      	cbnz	r0, 8008c5e <_printf_float+0x41a>
 8008c2c:	4653      	mov	r3, sl
 8008c2e:	f108 0201 	add.w	r2, r8, #1
 8008c32:	4631      	mov	r1, r6
 8008c34:	4628      	mov	r0, r5
 8008c36:	47b8      	blx	r7
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d10c      	bne.n	8008c56 <_printf_float+0x412>
 8008c3c:	e65d      	b.n	80088fa <_printf_float+0xb6>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	465a      	mov	r2, fp
 8008c42:	4631      	mov	r1, r6
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b8      	blx	r7
 8008c48:	3001      	adds	r0, #1
 8008c4a:	f43f ae56 	beq.w	80088fa <_printf_float+0xb6>
 8008c4e:	f108 0801 	add.w	r8, r8, #1
 8008c52:	45d0      	cmp	r8, sl
 8008c54:	dbf3      	blt.n	8008c3e <_printf_float+0x3fa>
 8008c56:	464b      	mov	r3, r9
 8008c58:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008c5c:	e6df      	b.n	8008a1e <_printf_float+0x1da>
 8008c5e:	f04f 0800 	mov.w	r8, #0
 8008c62:	f104 0b1a 	add.w	fp, r4, #26
 8008c66:	e7f4      	b.n	8008c52 <_printf_float+0x40e>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	4642      	mov	r2, r8
 8008c6c:	e7e1      	b.n	8008c32 <_printf_float+0x3ee>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	464a      	mov	r2, r9
 8008c72:	4631      	mov	r1, r6
 8008c74:	4628      	mov	r0, r5
 8008c76:	47b8      	blx	r7
 8008c78:	3001      	adds	r0, #1
 8008c7a:	f43f ae3e 	beq.w	80088fa <_printf_float+0xb6>
 8008c7e:	f108 0801 	add.w	r8, r8, #1
 8008c82:	68e3      	ldr	r3, [r4, #12]
 8008c84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c86:	1a5b      	subs	r3, r3, r1
 8008c88:	4543      	cmp	r3, r8
 8008c8a:	dcf0      	bgt.n	8008c6e <_printf_float+0x42a>
 8008c8c:	e6fc      	b.n	8008a88 <_printf_float+0x244>
 8008c8e:	f04f 0800 	mov.w	r8, #0
 8008c92:	f104 0919 	add.w	r9, r4, #25
 8008c96:	e7f4      	b.n	8008c82 <_printf_float+0x43e>

08008c98 <_printf_common>:
 8008c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c9c:	4616      	mov	r6, r2
 8008c9e:	4698      	mov	r8, r3
 8008ca0:	688a      	ldr	r2, [r1, #8]
 8008ca2:	690b      	ldr	r3, [r1, #16]
 8008ca4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	bfb8      	it	lt
 8008cac:	4613      	movlt	r3, r2
 8008cae:	6033      	str	r3, [r6, #0]
 8008cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	b10a      	cbz	r2, 8008cbe <_printf_common+0x26>
 8008cba:	3301      	adds	r3, #1
 8008cbc:	6033      	str	r3, [r6, #0]
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	0699      	lsls	r1, r3, #26
 8008cc2:	bf42      	ittt	mi
 8008cc4:	6833      	ldrmi	r3, [r6, #0]
 8008cc6:	3302      	addmi	r3, #2
 8008cc8:	6033      	strmi	r3, [r6, #0]
 8008cca:	6825      	ldr	r5, [r4, #0]
 8008ccc:	f015 0506 	ands.w	r5, r5, #6
 8008cd0:	d106      	bne.n	8008ce0 <_printf_common+0x48>
 8008cd2:	f104 0a19 	add.w	sl, r4, #25
 8008cd6:	68e3      	ldr	r3, [r4, #12]
 8008cd8:	6832      	ldr	r2, [r6, #0]
 8008cda:	1a9b      	subs	r3, r3, r2
 8008cdc:	42ab      	cmp	r3, r5
 8008cde:	dc26      	bgt.n	8008d2e <_printf_common+0x96>
 8008ce0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ce4:	6822      	ldr	r2, [r4, #0]
 8008ce6:	3b00      	subs	r3, #0
 8008ce8:	bf18      	it	ne
 8008cea:	2301      	movne	r3, #1
 8008cec:	0692      	lsls	r2, r2, #26
 8008cee:	d42b      	bmi.n	8008d48 <_printf_common+0xb0>
 8008cf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008cf4:	4641      	mov	r1, r8
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	47c8      	blx	r9
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	d01e      	beq.n	8008d3c <_printf_common+0xa4>
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	6922      	ldr	r2, [r4, #16]
 8008d02:	f003 0306 	and.w	r3, r3, #6
 8008d06:	2b04      	cmp	r3, #4
 8008d08:	bf02      	ittt	eq
 8008d0a:	68e5      	ldreq	r5, [r4, #12]
 8008d0c:	6833      	ldreq	r3, [r6, #0]
 8008d0e:	1aed      	subeq	r5, r5, r3
 8008d10:	68a3      	ldr	r3, [r4, #8]
 8008d12:	bf0c      	ite	eq
 8008d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d18:	2500      	movne	r5, #0
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	bfc4      	itt	gt
 8008d1e:	1a9b      	subgt	r3, r3, r2
 8008d20:	18ed      	addgt	r5, r5, r3
 8008d22:	2600      	movs	r6, #0
 8008d24:	341a      	adds	r4, #26
 8008d26:	42b5      	cmp	r5, r6
 8008d28:	d11a      	bne.n	8008d60 <_printf_common+0xc8>
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	e008      	b.n	8008d40 <_printf_common+0xa8>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	4652      	mov	r2, sl
 8008d32:	4641      	mov	r1, r8
 8008d34:	4638      	mov	r0, r7
 8008d36:	47c8      	blx	r9
 8008d38:	3001      	adds	r0, #1
 8008d3a:	d103      	bne.n	8008d44 <_printf_common+0xac>
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d44:	3501      	adds	r5, #1
 8008d46:	e7c6      	b.n	8008cd6 <_printf_common+0x3e>
 8008d48:	18e1      	adds	r1, r4, r3
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	2030      	movs	r0, #48	@ 0x30
 8008d4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d52:	4422      	add	r2, r4
 8008d54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d5c:	3302      	adds	r3, #2
 8008d5e:	e7c7      	b.n	8008cf0 <_printf_common+0x58>
 8008d60:	2301      	movs	r3, #1
 8008d62:	4622      	mov	r2, r4
 8008d64:	4641      	mov	r1, r8
 8008d66:	4638      	mov	r0, r7
 8008d68:	47c8      	blx	r9
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	d0e6      	beq.n	8008d3c <_printf_common+0xa4>
 8008d6e:	3601      	adds	r6, #1
 8008d70:	e7d9      	b.n	8008d26 <_printf_common+0x8e>
	...

08008d74 <_printf_i>:
 8008d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d78:	7e0f      	ldrb	r7, [r1, #24]
 8008d7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d7c:	2f78      	cmp	r7, #120	@ 0x78
 8008d7e:	4691      	mov	r9, r2
 8008d80:	4680      	mov	r8, r0
 8008d82:	460c      	mov	r4, r1
 8008d84:	469a      	mov	sl, r3
 8008d86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d8a:	d807      	bhi.n	8008d9c <_printf_i+0x28>
 8008d8c:	2f62      	cmp	r7, #98	@ 0x62
 8008d8e:	d80a      	bhi.n	8008da6 <_printf_i+0x32>
 8008d90:	2f00      	cmp	r7, #0
 8008d92:	f000 80d1 	beq.w	8008f38 <_printf_i+0x1c4>
 8008d96:	2f58      	cmp	r7, #88	@ 0x58
 8008d98:	f000 80b8 	beq.w	8008f0c <_printf_i+0x198>
 8008d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008da0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008da4:	e03a      	b.n	8008e1c <_printf_i+0xa8>
 8008da6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008daa:	2b15      	cmp	r3, #21
 8008dac:	d8f6      	bhi.n	8008d9c <_printf_i+0x28>
 8008dae:	a101      	add	r1, pc, #4	@ (adr r1, 8008db4 <_printf_i+0x40>)
 8008db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008db4:	08008e0d 	.word	0x08008e0d
 8008db8:	08008e21 	.word	0x08008e21
 8008dbc:	08008d9d 	.word	0x08008d9d
 8008dc0:	08008d9d 	.word	0x08008d9d
 8008dc4:	08008d9d 	.word	0x08008d9d
 8008dc8:	08008d9d 	.word	0x08008d9d
 8008dcc:	08008e21 	.word	0x08008e21
 8008dd0:	08008d9d 	.word	0x08008d9d
 8008dd4:	08008d9d 	.word	0x08008d9d
 8008dd8:	08008d9d 	.word	0x08008d9d
 8008ddc:	08008d9d 	.word	0x08008d9d
 8008de0:	08008f1f 	.word	0x08008f1f
 8008de4:	08008e4b 	.word	0x08008e4b
 8008de8:	08008ed9 	.word	0x08008ed9
 8008dec:	08008d9d 	.word	0x08008d9d
 8008df0:	08008d9d 	.word	0x08008d9d
 8008df4:	08008f41 	.word	0x08008f41
 8008df8:	08008d9d 	.word	0x08008d9d
 8008dfc:	08008e4b 	.word	0x08008e4b
 8008e00:	08008d9d 	.word	0x08008d9d
 8008e04:	08008d9d 	.word	0x08008d9d
 8008e08:	08008ee1 	.word	0x08008ee1
 8008e0c:	6833      	ldr	r3, [r6, #0]
 8008e0e:	1d1a      	adds	r2, r3, #4
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6032      	str	r2, [r6, #0]
 8008e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e09c      	b.n	8008f5a <_printf_i+0x1e6>
 8008e20:	6833      	ldr	r3, [r6, #0]
 8008e22:	6820      	ldr	r0, [r4, #0]
 8008e24:	1d19      	adds	r1, r3, #4
 8008e26:	6031      	str	r1, [r6, #0]
 8008e28:	0606      	lsls	r6, r0, #24
 8008e2a:	d501      	bpl.n	8008e30 <_printf_i+0xbc>
 8008e2c:	681d      	ldr	r5, [r3, #0]
 8008e2e:	e003      	b.n	8008e38 <_printf_i+0xc4>
 8008e30:	0645      	lsls	r5, r0, #25
 8008e32:	d5fb      	bpl.n	8008e2c <_printf_i+0xb8>
 8008e34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e38:	2d00      	cmp	r5, #0
 8008e3a:	da03      	bge.n	8008e44 <_printf_i+0xd0>
 8008e3c:	232d      	movs	r3, #45	@ 0x2d
 8008e3e:	426d      	negs	r5, r5
 8008e40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e44:	4858      	ldr	r0, [pc, #352]	@ (8008fa8 <_printf_i+0x234>)
 8008e46:	230a      	movs	r3, #10
 8008e48:	e011      	b.n	8008e6e <_printf_i+0xfa>
 8008e4a:	6821      	ldr	r1, [r4, #0]
 8008e4c:	6833      	ldr	r3, [r6, #0]
 8008e4e:	0608      	lsls	r0, r1, #24
 8008e50:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e54:	d402      	bmi.n	8008e5c <_printf_i+0xe8>
 8008e56:	0649      	lsls	r1, r1, #25
 8008e58:	bf48      	it	mi
 8008e5a:	b2ad      	uxthmi	r5, r5
 8008e5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e5e:	4852      	ldr	r0, [pc, #328]	@ (8008fa8 <_printf_i+0x234>)
 8008e60:	6033      	str	r3, [r6, #0]
 8008e62:	bf14      	ite	ne
 8008e64:	230a      	movne	r3, #10
 8008e66:	2308      	moveq	r3, #8
 8008e68:	2100      	movs	r1, #0
 8008e6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e6e:	6866      	ldr	r6, [r4, #4]
 8008e70:	60a6      	str	r6, [r4, #8]
 8008e72:	2e00      	cmp	r6, #0
 8008e74:	db05      	blt.n	8008e82 <_printf_i+0x10e>
 8008e76:	6821      	ldr	r1, [r4, #0]
 8008e78:	432e      	orrs	r6, r5
 8008e7a:	f021 0104 	bic.w	r1, r1, #4
 8008e7e:	6021      	str	r1, [r4, #0]
 8008e80:	d04b      	beq.n	8008f1a <_printf_i+0x1a6>
 8008e82:	4616      	mov	r6, r2
 8008e84:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e88:	fb03 5711 	mls	r7, r3, r1, r5
 8008e8c:	5dc7      	ldrb	r7, [r0, r7]
 8008e8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e92:	462f      	mov	r7, r5
 8008e94:	42bb      	cmp	r3, r7
 8008e96:	460d      	mov	r5, r1
 8008e98:	d9f4      	bls.n	8008e84 <_printf_i+0x110>
 8008e9a:	2b08      	cmp	r3, #8
 8008e9c:	d10b      	bne.n	8008eb6 <_printf_i+0x142>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	07df      	lsls	r7, r3, #31
 8008ea2:	d508      	bpl.n	8008eb6 <_printf_i+0x142>
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	6861      	ldr	r1, [r4, #4]
 8008ea8:	4299      	cmp	r1, r3
 8008eaa:	bfde      	ittt	le
 8008eac:	2330      	movle	r3, #48	@ 0x30
 8008eae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008eb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008eb6:	1b92      	subs	r2, r2, r6
 8008eb8:	6122      	str	r2, [r4, #16]
 8008eba:	f8cd a000 	str.w	sl, [sp]
 8008ebe:	464b      	mov	r3, r9
 8008ec0:	aa03      	add	r2, sp, #12
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	f7ff fee7 	bl	8008c98 <_printf_common>
 8008eca:	3001      	adds	r0, #1
 8008ecc:	d14a      	bne.n	8008f64 <_printf_i+0x1f0>
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	b004      	add	sp, #16
 8008ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	f043 0320 	orr.w	r3, r3, #32
 8008ede:	6023      	str	r3, [r4, #0]
 8008ee0:	4832      	ldr	r0, [pc, #200]	@ (8008fac <_printf_i+0x238>)
 8008ee2:	2778      	movs	r7, #120	@ 0x78
 8008ee4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	6831      	ldr	r1, [r6, #0]
 8008eec:	061f      	lsls	r7, r3, #24
 8008eee:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ef2:	d402      	bmi.n	8008efa <_printf_i+0x186>
 8008ef4:	065f      	lsls	r7, r3, #25
 8008ef6:	bf48      	it	mi
 8008ef8:	b2ad      	uxthmi	r5, r5
 8008efa:	6031      	str	r1, [r6, #0]
 8008efc:	07d9      	lsls	r1, r3, #31
 8008efe:	bf44      	itt	mi
 8008f00:	f043 0320 	orrmi.w	r3, r3, #32
 8008f04:	6023      	strmi	r3, [r4, #0]
 8008f06:	b11d      	cbz	r5, 8008f10 <_printf_i+0x19c>
 8008f08:	2310      	movs	r3, #16
 8008f0a:	e7ad      	b.n	8008e68 <_printf_i+0xf4>
 8008f0c:	4826      	ldr	r0, [pc, #152]	@ (8008fa8 <_printf_i+0x234>)
 8008f0e:	e7e9      	b.n	8008ee4 <_printf_i+0x170>
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	f023 0320 	bic.w	r3, r3, #32
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	e7f6      	b.n	8008f08 <_printf_i+0x194>
 8008f1a:	4616      	mov	r6, r2
 8008f1c:	e7bd      	b.n	8008e9a <_printf_i+0x126>
 8008f1e:	6833      	ldr	r3, [r6, #0]
 8008f20:	6825      	ldr	r5, [r4, #0]
 8008f22:	6961      	ldr	r1, [r4, #20]
 8008f24:	1d18      	adds	r0, r3, #4
 8008f26:	6030      	str	r0, [r6, #0]
 8008f28:	062e      	lsls	r6, r5, #24
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	d501      	bpl.n	8008f32 <_printf_i+0x1be>
 8008f2e:	6019      	str	r1, [r3, #0]
 8008f30:	e002      	b.n	8008f38 <_printf_i+0x1c4>
 8008f32:	0668      	lsls	r0, r5, #25
 8008f34:	d5fb      	bpl.n	8008f2e <_printf_i+0x1ba>
 8008f36:	8019      	strh	r1, [r3, #0]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	6123      	str	r3, [r4, #16]
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	e7bc      	b.n	8008eba <_printf_i+0x146>
 8008f40:	6833      	ldr	r3, [r6, #0]
 8008f42:	1d1a      	adds	r2, r3, #4
 8008f44:	6032      	str	r2, [r6, #0]
 8008f46:	681e      	ldr	r6, [r3, #0]
 8008f48:	6862      	ldr	r2, [r4, #4]
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f7f7 f93f 	bl	80001d0 <memchr>
 8008f52:	b108      	cbz	r0, 8008f58 <_printf_i+0x1e4>
 8008f54:	1b80      	subs	r0, r0, r6
 8008f56:	6060      	str	r0, [r4, #4]
 8008f58:	6863      	ldr	r3, [r4, #4]
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f62:	e7aa      	b.n	8008eba <_printf_i+0x146>
 8008f64:	6923      	ldr	r3, [r4, #16]
 8008f66:	4632      	mov	r2, r6
 8008f68:	4649      	mov	r1, r9
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	47d0      	blx	sl
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d0ad      	beq.n	8008ece <_printf_i+0x15a>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	079b      	lsls	r3, r3, #30
 8008f76:	d413      	bmi.n	8008fa0 <_printf_i+0x22c>
 8008f78:	68e0      	ldr	r0, [r4, #12]
 8008f7a:	9b03      	ldr	r3, [sp, #12]
 8008f7c:	4298      	cmp	r0, r3
 8008f7e:	bfb8      	it	lt
 8008f80:	4618      	movlt	r0, r3
 8008f82:	e7a6      	b.n	8008ed2 <_printf_i+0x15e>
 8008f84:	2301      	movs	r3, #1
 8008f86:	4632      	mov	r2, r6
 8008f88:	4649      	mov	r1, r9
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	47d0      	blx	sl
 8008f8e:	3001      	adds	r0, #1
 8008f90:	d09d      	beq.n	8008ece <_printf_i+0x15a>
 8008f92:	3501      	adds	r5, #1
 8008f94:	68e3      	ldr	r3, [r4, #12]
 8008f96:	9903      	ldr	r1, [sp, #12]
 8008f98:	1a5b      	subs	r3, r3, r1
 8008f9a:	42ab      	cmp	r3, r5
 8008f9c:	dcf2      	bgt.n	8008f84 <_printf_i+0x210>
 8008f9e:	e7eb      	b.n	8008f78 <_printf_i+0x204>
 8008fa0:	2500      	movs	r5, #0
 8008fa2:	f104 0619 	add.w	r6, r4, #25
 8008fa6:	e7f5      	b.n	8008f94 <_printf_i+0x220>
 8008fa8:	0800bd2e 	.word	0x0800bd2e
 8008fac:	0800bd3f 	.word	0x0800bd3f

08008fb0 <std>:
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	b510      	push	{r4, lr}
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8008fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fbe:	6083      	str	r3, [r0, #8]
 8008fc0:	8181      	strh	r1, [r0, #12]
 8008fc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008fc4:	81c2      	strh	r2, [r0, #14]
 8008fc6:	6183      	str	r3, [r0, #24]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	2208      	movs	r2, #8
 8008fcc:	305c      	adds	r0, #92	@ 0x5c
 8008fce:	f000 fa2b 	bl	8009428 <memset>
 8008fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009008 <std+0x58>)
 8008fd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800900c <std+0x5c>)
 8008fd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008fda:	4b0d      	ldr	r3, [pc, #52]	@ (8009010 <std+0x60>)
 8008fdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008fde:	4b0d      	ldr	r3, [pc, #52]	@ (8009014 <std+0x64>)
 8008fe0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8009018 <std+0x68>)
 8008fe4:	6224      	str	r4, [r4, #32]
 8008fe6:	429c      	cmp	r4, r3
 8008fe8:	d006      	beq.n	8008ff8 <std+0x48>
 8008fea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008fee:	4294      	cmp	r4, r2
 8008ff0:	d002      	beq.n	8008ff8 <std+0x48>
 8008ff2:	33d0      	adds	r3, #208	@ 0xd0
 8008ff4:	429c      	cmp	r4, r3
 8008ff6:	d105      	bne.n	8009004 <std+0x54>
 8008ff8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009000:	f000 bb14 	b.w	800962c <__retarget_lock_init_recursive>
 8009004:	bd10      	pop	{r4, pc}
 8009006:	bf00      	nop
 8009008:	08009259 	.word	0x08009259
 800900c:	0800927b 	.word	0x0800927b
 8009010:	080092b3 	.word	0x080092b3
 8009014:	080092d7 	.word	0x080092d7
 8009018:	2000106c 	.word	0x2000106c

0800901c <stdio_exit_handler>:
 800901c:	4a02      	ldr	r2, [pc, #8]	@ (8009028 <stdio_exit_handler+0xc>)
 800901e:	4903      	ldr	r1, [pc, #12]	@ (800902c <stdio_exit_handler+0x10>)
 8009020:	4803      	ldr	r0, [pc, #12]	@ (8009030 <stdio_exit_handler+0x14>)
 8009022:	f000 b869 	b.w	80090f8 <_fwalk_sglue>
 8009026:	bf00      	nop
 8009028:	20000010 	.word	0x20000010
 800902c:	0800b271 	.word	0x0800b271
 8009030:	20000020 	.word	0x20000020

08009034 <cleanup_stdio>:
 8009034:	6841      	ldr	r1, [r0, #4]
 8009036:	4b0c      	ldr	r3, [pc, #48]	@ (8009068 <cleanup_stdio+0x34>)
 8009038:	4299      	cmp	r1, r3
 800903a:	b510      	push	{r4, lr}
 800903c:	4604      	mov	r4, r0
 800903e:	d001      	beq.n	8009044 <cleanup_stdio+0x10>
 8009040:	f002 f916 	bl	800b270 <_fflush_r>
 8009044:	68a1      	ldr	r1, [r4, #8]
 8009046:	4b09      	ldr	r3, [pc, #36]	@ (800906c <cleanup_stdio+0x38>)
 8009048:	4299      	cmp	r1, r3
 800904a:	d002      	beq.n	8009052 <cleanup_stdio+0x1e>
 800904c:	4620      	mov	r0, r4
 800904e:	f002 f90f 	bl	800b270 <_fflush_r>
 8009052:	68e1      	ldr	r1, [r4, #12]
 8009054:	4b06      	ldr	r3, [pc, #24]	@ (8009070 <cleanup_stdio+0x3c>)
 8009056:	4299      	cmp	r1, r3
 8009058:	d004      	beq.n	8009064 <cleanup_stdio+0x30>
 800905a:	4620      	mov	r0, r4
 800905c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009060:	f002 b906 	b.w	800b270 <_fflush_r>
 8009064:	bd10      	pop	{r4, pc}
 8009066:	bf00      	nop
 8009068:	2000106c 	.word	0x2000106c
 800906c:	200010d4 	.word	0x200010d4
 8009070:	2000113c 	.word	0x2000113c

08009074 <global_stdio_init.part.0>:
 8009074:	b510      	push	{r4, lr}
 8009076:	4b0b      	ldr	r3, [pc, #44]	@ (80090a4 <global_stdio_init.part.0+0x30>)
 8009078:	4c0b      	ldr	r4, [pc, #44]	@ (80090a8 <global_stdio_init.part.0+0x34>)
 800907a:	4a0c      	ldr	r2, [pc, #48]	@ (80090ac <global_stdio_init.part.0+0x38>)
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	4620      	mov	r0, r4
 8009080:	2200      	movs	r2, #0
 8009082:	2104      	movs	r1, #4
 8009084:	f7ff ff94 	bl	8008fb0 <std>
 8009088:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800908c:	2201      	movs	r2, #1
 800908e:	2109      	movs	r1, #9
 8009090:	f7ff ff8e 	bl	8008fb0 <std>
 8009094:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009098:	2202      	movs	r2, #2
 800909a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800909e:	2112      	movs	r1, #18
 80090a0:	f7ff bf86 	b.w	8008fb0 <std>
 80090a4:	200011a4 	.word	0x200011a4
 80090a8:	2000106c 	.word	0x2000106c
 80090ac:	0800901d 	.word	0x0800901d

080090b0 <__sfp_lock_acquire>:
 80090b0:	4801      	ldr	r0, [pc, #4]	@ (80090b8 <__sfp_lock_acquire+0x8>)
 80090b2:	f000 babc 	b.w	800962e <__retarget_lock_acquire_recursive>
 80090b6:	bf00      	nop
 80090b8:	200011ad 	.word	0x200011ad

080090bc <__sfp_lock_release>:
 80090bc:	4801      	ldr	r0, [pc, #4]	@ (80090c4 <__sfp_lock_release+0x8>)
 80090be:	f000 bab7 	b.w	8009630 <__retarget_lock_release_recursive>
 80090c2:	bf00      	nop
 80090c4:	200011ad 	.word	0x200011ad

080090c8 <__sinit>:
 80090c8:	b510      	push	{r4, lr}
 80090ca:	4604      	mov	r4, r0
 80090cc:	f7ff fff0 	bl	80090b0 <__sfp_lock_acquire>
 80090d0:	6a23      	ldr	r3, [r4, #32]
 80090d2:	b11b      	cbz	r3, 80090dc <__sinit+0x14>
 80090d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d8:	f7ff bff0 	b.w	80090bc <__sfp_lock_release>
 80090dc:	4b04      	ldr	r3, [pc, #16]	@ (80090f0 <__sinit+0x28>)
 80090de:	6223      	str	r3, [r4, #32]
 80090e0:	4b04      	ldr	r3, [pc, #16]	@ (80090f4 <__sinit+0x2c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1f5      	bne.n	80090d4 <__sinit+0xc>
 80090e8:	f7ff ffc4 	bl	8009074 <global_stdio_init.part.0>
 80090ec:	e7f2      	b.n	80090d4 <__sinit+0xc>
 80090ee:	bf00      	nop
 80090f0:	08009035 	.word	0x08009035
 80090f4:	200011a4 	.word	0x200011a4

080090f8 <_fwalk_sglue>:
 80090f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090fc:	4607      	mov	r7, r0
 80090fe:	4688      	mov	r8, r1
 8009100:	4614      	mov	r4, r2
 8009102:	2600      	movs	r6, #0
 8009104:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009108:	f1b9 0901 	subs.w	r9, r9, #1
 800910c:	d505      	bpl.n	800911a <_fwalk_sglue+0x22>
 800910e:	6824      	ldr	r4, [r4, #0]
 8009110:	2c00      	cmp	r4, #0
 8009112:	d1f7      	bne.n	8009104 <_fwalk_sglue+0xc>
 8009114:	4630      	mov	r0, r6
 8009116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800911a:	89ab      	ldrh	r3, [r5, #12]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d907      	bls.n	8009130 <_fwalk_sglue+0x38>
 8009120:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009124:	3301      	adds	r3, #1
 8009126:	d003      	beq.n	8009130 <_fwalk_sglue+0x38>
 8009128:	4629      	mov	r1, r5
 800912a:	4638      	mov	r0, r7
 800912c:	47c0      	blx	r8
 800912e:	4306      	orrs	r6, r0
 8009130:	3568      	adds	r5, #104	@ 0x68
 8009132:	e7e9      	b.n	8009108 <_fwalk_sglue+0x10>

08009134 <iprintf>:
 8009134:	b40f      	push	{r0, r1, r2, r3}
 8009136:	b507      	push	{r0, r1, r2, lr}
 8009138:	4906      	ldr	r1, [pc, #24]	@ (8009154 <iprintf+0x20>)
 800913a:	ab04      	add	r3, sp, #16
 800913c:	6808      	ldr	r0, [r1, #0]
 800913e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009142:	6881      	ldr	r1, [r0, #8]
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	f001 fef7 	bl	800af38 <_vfiprintf_r>
 800914a:	b003      	add	sp, #12
 800914c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009150:	b004      	add	sp, #16
 8009152:	4770      	bx	lr
 8009154:	2000001c 	.word	0x2000001c

08009158 <_puts_r>:
 8009158:	6a03      	ldr	r3, [r0, #32]
 800915a:	b570      	push	{r4, r5, r6, lr}
 800915c:	6884      	ldr	r4, [r0, #8]
 800915e:	4605      	mov	r5, r0
 8009160:	460e      	mov	r6, r1
 8009162:	b90b      	cbnz	r3, 8009168 <_puts_r+0x10>
 8009164:	f7ff ffb0 	bl	80090c8 <__sinit>
 8009168:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800916a:	07db      	lsls	r3, r3, #31
 800916c:	d405      	bmi.n	800917a <_puts_r+0x22>
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	0598      	lsls	r0, r3, #22
 8009172:	d402      	bmi.n	800917a <_puts_r+0x22>
 8009174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009176:	f000 fa5a 	bl	800962e <__retarget_lock_acquire_recursive>
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	0719      	lsls	r1, r3, #28
 800917e:	d502      	bpl.n	8009186 <_puts_r+0x2e>
 8009180:	6923      	ldr	r3, [r4, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d135      	bne.n	80091f2 <_puts_r+0x9a>
 8009186:	4621      	mov	r1, r4
 8009188:	4628      	mov	r0, r5
 800918a:	f000 f8e7 	bl	800935c <__swsetup_r>
 800918e:	b380      	cbz	r0, 80091f2 <_puts_r+0x9a>
 8009190:	f04f 35ff 	mov.w	r5, #4294967295
 8009194:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009196:	07da      	lsls	r2, r3, #31
 8009198:	d405      	bmi.n	80091a6 <_puts_r+0x4e>
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	059b      	lsls	r3, r3, #22
 800919e:	d402      	bmi.n	80091a6 <_puts_r+0x4e>
 80091a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091a2:	f000 fa45 	bl	8009630 <__retarget_lock_release_recursive>
 80091a6:	4628      	mov	r0, r5
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	da04      	bge.n	80091b8 <_puts_r+0x60>
 80091ae:	69a2      	ldr	r2, [r4, #24]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	dc17      	bgt.n	80091e4 <_puts_r+0x8c>
 80091b4:	290a      	cmp	r1, #10
 80091b6:	d015      	beq.n	80091e4 <_puts_r+0x8c>
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	1c5a      	adds	r2, r3, #1
 80091bc:	6022      	str	r2, [r4, #0]
 80091be:	7019      	strb	r1, [r3, #0]
 80091c0:	68a3      	ldr	r3, [r4, #8]
 80091c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80091c6:	3b01      	subs	r3, #1
 80091c8:	60a3      	str	r3, [r4, #8]
 80091ca:	2900      	cmp	r1, #0
 80091cc:	d1ed      	bne.n	80091aa <_puts_r+0x52>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da11      	bge.n	80091f6 <_puts_r+0x9e>
 80091d2:	4622      	mov	r2, r4
 80091d4:	210a      	movs	r1, #10
 80091d6:	4628      	mov	r0, r5
 80091d8:	f000 f881 	bl	80092de <__swbuf_r>
 80091dc:	3001      	adds	r0, #1
 80091de:	d0d7      	beq.n	8009190 <_puts_r+0x38>
 80091e0:	250a      	movs	r5, #10
 80091e2:	e7d7      	b.n	8009194 <_puts_r+0x3c>
 80091e4:	4622      	mov	r2, r4
 80091e6:	4628      	mov	r0, r5
 80091e8:	f000 f879 	bl	80092de <__swbuf_r>
 80091ec:	3001      	adds	r0, #1
 80091ee:	d1e7      	bne.n	80091c0 <_puts_r+0x68>
 80091f0:	e7ce      	b.n	8009190 <_puts_r+0x38>
 80091f2:	3e01      	subs	r6, #1
 80091f4:	e7e4      	b.n	80091c0 <_puts_r+0x68>
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	6022      	str	r2, [r4, #0]
 80091fc:	220a      	movs	r2, #10
 80091fe:	701a      	strb	r2, [r3, #0]
 8009200:	e7ee      	b.n	80091e0 <_puts_r+0x88>
	...

08009204 <puts>:
 8009204:	4b02      	ldr	r3, [pc, #8]	@ (8009210 <puts+0xc>)
 8009206:	4601      	mov	r1, r0
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	f7ff bfa5 	b.w	8009158 <_puts_r>
 800920e:	bf00      	nop
 8009210:	2000001c 	.word	0x2000001c

08009214 <siprintf>:
 8009214:	b40e      	push	{r1, r2, r3}
 8009216:	b510      	push	{r4, lr}
 8009218:	b09d      	sub	sp, #116	@ 0x74
 800921a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800921c:	9002      	str	r0, [sp, #8]
 800921e:	9006      	str	r0, [sp, #24]
 8009220:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009224:	480a      	ldr	r0, [pc, #40]	@ (8009250 <siprintf+0x3c>)
 8009226:	9107      	str	r1, [sp, #28]
 8009228:	9104      	str	r1, [sp, #16]
 800922a:	490a      	ldr	r1, [pc, #40]	@ (8009254 <siprintf+0x40>)
 800922c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009230:	9105      	str	r1, [sp, #20]
 8009232:	2400      	movs	r4, #0
 8009234:	a902      	add	r1, sp, #8
 8009236:	6800      	ldr	r0, [r0, #0]
 8009238:	9301      	str	r3, [sp, #4]
 800923a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800923c:	f001 fd56 	bl	800acec <_svfiprintf_r>
 8009240:	9b02      	ldr	r3, [sp, #8]
 8009242:	701c      	strb	r4, [r3, #0]
 8009244:	b01d      	add	sp, #116	@ 0x74
 8009246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800924a:	b003      	add	sp, #12
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	2000001c 	.word	0x2000001c
 8009254:	ffff0208 	.word	0xffff0208

08009258 <__sread>:
 8009258:	b510      	push	{r4, lr}
 800925a:	460c      	mov	r4, r1
 800925c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009260:	f000 f996 	bl	8009590 <_read_r>
 8009264:	2800      	cmp	r0, #0
 8009266:	bfab      	itete	ge
 8009268:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800926a:	89a3      	ldrhlt	r3, [r4, #12]
 800926c:	181b      	addge	r3, r3, r0
 800926e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009272:	bfac      	ite	ge
 8009274:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009276:	81a3      	strhlt	r3, [r4, #12]
 8009278:	bd10      	pop	{r4, pc}

0800927a <__swrite>:
 800927a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800927e:	461f      	mov	r7, r3
 8009280:	898b      	ldrh	r3, [r1, #12]
 8009282:	05db      	lsls	r3, r3, #23
 8009284:	4605      	mov	r5, r0
 8009286:	460c      	mov	r4, r1
 8009288:	4616      	mov	r6, r2
 800928a:	d505      	bpl.n	8009298 <__swrite+0x1e>
 800928c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009290:	2302      	movs	r3, #2
 8009292:	2200      	movs	r2, #0
 8009294:	f000 f96a 	bl	800956c <_lseek_r>
 8009298:	89a3      	ldrh	r3, [r4, #12]
 800929a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800929e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092a2:	81a3      	strh	r3, [r4, #12]
 80092a4:	4632      	mov	r2, r6
 80092a6:	463b      	mov	r3, r7
 80092a8:	4628      	mov	r0, r5
 80092aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092ae:	f000 b981 	b.w	80095b4 <_write_r>

080092b2 <__sseek>:
 80092b2:	b510      	push	{r4, lr}
 80092b4:	460c      	mov	r4, r1
 80092b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ba:	f000 f957 	bl	800956c <_lseek_r>
 80092be:	1c43      	adds	r3, r0, #1
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	bf15      	itete	ne
 80092c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80092c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80092ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80092ce:	81a3      	strheq	r3, [r4, #12]
 80092d0:	bf18      	it	ne
 80092d2:	81a3      	strhne	r3, [r4, #12]
 80092d4:	bd10      	pop	{r4, pc}

080092d6 <__sclose>:
 80092d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092da:	f000 b937 	b.w	800954c <_close_r>

080092de <__swbuf_r>:
 80092de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e0:	460e      	mov	r6, r1
 80092e2:	4614      	mov	r4, r2
 80092e4:	4605      	mov	r5, r0
 80092e6:	b118      	cbz	r0, 80092f0 <__swbuf_r+0x12>
 80092e8:	6a03      	ldr	r3, [r0, #32]
 80092ea:	b90b      	cbnz	r3, 80092f0 <__swbuf_r+0x12>
 80092ec:	f7ff feec 	bl	80090c8 <__sinit>
 80092f0:	69a3      	ldr	r3, [r4, #24]
 80092f2:	60a3      	str	r3, [r4, #8]
 80092f4:	89a3      	ldrh	r3, [r4, #12]
 80092f6:	071a      	lsls	r2, r3, #28
 80092f8:	d501      	bpl.n	80092fe <__swbuf_r+0x20>
 80092fa:	6923      	ldr	r3, [r4, #16]
 80092fc:	b943      	cbnz	r3, 8009310 <__swbuf_r+0x32>
 80092fe:	4621      	mov	r1, r4
 8009300:	4628      	mov	r0, r5
 8009302:	f000 f82b 	bl	800935c <__swsetup_r>
 8009306:	b118      	cbz	r0, 8009310 <__swbuf_r+0x32>
 8009308:	f04f 37ff 	mov.w	r7, #4294967295
 800930c:	4638      	mov	r0, r7
 800930e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	6922      	ldr	r2, [r4, #16]
 8009314:	1a98      	subs	r0, r3, r2
 8009316:	6963      	ldr	r3, [r4, #20]
 8009318:	b2f6      	uxtb	r6, r6
 800931a:	4283      	cmp	r3, r0
 800931c:	4637      	mov	r7, r6
 800931e:	dc05      	bgt.n	800932c <__swbuf_r+0x4e>
 8009320:	4621      	mov	r1, r4
 8009322:	4628      	mov	r0, r5
 8009324:	f001 ffa4 	bl	800b270 <_fflush_r>
 8009328:	2800      	cmp	r0, #0
 800932a:	d1ed      	bne.n	8009308 <__swbuf_r+0x2a>
 800932c:	68a3      	ldr	r3, [r4, #8]
 800932e:	3b01      	subs	r3, #1
 8009330:	60a3      	str	r3, [r4, #8]
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	6022      	str	r2, [r4, #0]
 8009338:	701e      	strb	r6, [r3, #0]
 800933a:	6962      	ldr	r2, [r4, #20]
 800933c:	1c43      	adds	r3, r0, #1
 800933e:	429a      	cmp	r2, r3
 8009340:	d004      	beq.n	800934c <__swbuf_r+0x6e>
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	07db      	lsls	r3, r3, #31
 8009346:	d5e1      	bpl.n	800930c <__swbuf_r+0x2e>
 8009348:	2e0a      	cmp	r6, #10
 800934a:	d1df      	bne.n	800930c <__swbuf_r+0x2e>
 800934c:	4621      	mov	r1, r4
 800934e:	4628      	mov	r0, r5
 8009350:	f001 ff8e 	bl	800b270 <_fflush_r>
 8009354:	2800      	cmp	r0, #0
 8009356:	d0d9      	beq.n	800930c <__swbuf_r+0x2e>
 8009358:	e7d6      	b.n	8009308 <__swbuf_r+0x2a>
	...

0800935c <__swsetup_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4b29      	ldr	r3, [pc, #164]	@ (8009404 <__swsetup_r+0xa8>)
 8009360:	4605      	mov	r5, r0
 8009362:	6818      	ldr	r0, [r3, #0]
 8009364:	460c      	mov	r4, r1
 8009366:	b118      	cbz	r0, 8009370 <__swsetup_r+0x14>
 8009368:	6a03      	ldr	r3, [r0, #32]
 800936a:	b90b      	cbnz	r3, 8009370 <__swsetup_r+0x14>
 800936c:	f7ff feac 	bl	80090c8 <__sinit>
 8009370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009374:	0719      	lsls	r1, r3, #28
 8009376:	d422      	bmi.n	80093be <__swsetup_r+0x62>
 8009378:	06da      	lsls	r2, r3, #27
 800937a:	d407      	bmi.n	800938c <__swsetup_r+0x30>
 800937c:	2209      	movs	r2, #9
 800937e:	602a      	str	r2, [r5, #0]
 8009380:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009384:	81a3      	strh	r3, [r4, #12]
 8009386:	f04f 30ff 	mov.w	r0, #4294967295
 800938a:	e033      	b.n	80093f4 <__swsetup_r+0x98>
 800938c:	0758      	lsls	r0, r3, #29
 800938e:	d512      	bpl.n	80093b6 <__swsetup_r+0x5a>
 8009390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009392:	b141      	cbz	r1, 80093a6 <__swsetup_r+0x4a>
 8009394:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009398:	4299      	cmp	r1, r3
 800939a:	d002      	beq.n	80093a2 <__swsetup_r+0x46>
 800939c:	4628      	mov	r0, r5
 800939e:	f000 ffcf 	bl	800a340 <_free_r>
 80093a2:	2300      	movs	r3, #0
 80093a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093ac:	81a3      	strh	r3, [r4, #12]
 80093ae:	2300      	movs	r3, #0
 80093b0:	6063      	str	r3, [r4, #4]
 80093b2:	6923      	ldr	r3, [r4, #16]
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	f043 0308 	orr.w	r3, r3, #8
 80093bc:	81a3      	strh	r3, [r4, #12]
 80093be:	6923      	ldr	r3, [r4, #16]
 80093c0:	b94b      	cbnz	r3, 80093d6 <__swsetup_r+0x7a>
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80093c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093cc:	d003      	beq.n	80093d6 <__swsetup_r+0x7a>
 80093ce:	4621      	mov	r1, r4
 80093d0:	4628      	mov	r0, r5
 80093d2:	f001 ffad 	bl	800b330 <__smakebuf_r>
 80093d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093da:	f013 0201 	ands.w	r2, r3, #1
 80093de:	d00a      	beq.n	80093f6 <__swsetup_r+0x9a>
 80093e0:	2200      	movs	r2, #0
 80093e2:	60a2      	str	r2, [r4, #8]
 80093e4:	6962      	ldr	r2, [r4, #20]
 80093e6:	4252      	negs	r2, r2
 80093e8:	61a2      	str	r2, [r4, #24]
 80093ea:	6922      	ldr	r2, [r4, #16]
 80093ec:	b942      	cbnz	r2, 8009400 <__swsetup_r+0xa4>
 80093ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093f2:	d1c5      	bne.n	8009380 <__swsetup_r+0x24>
 80093f4:	bd38      	pop	{r3, r4, r5, pc}
 80093f6:	0799      	lsls	r1, r3, #30
 80093f8:	bf58      	it	pl
 80093fa:	6962      	ldrpl	r2, [r4, #20]
 80093fc:	60a2      	str	r2, [r4, #8]
 80093fe:	e7f4      	b.n	80093ea <__swsetup_r+0x8e>
 8009400:	2000      	movs	r0, #0
 8009402:	e7f7      	b.n	80093f4 <__swsetup_r+0x98>
 8009404:	2000001c 	.word	0x2000001c

08009408 <memcmp>:
 8009408:	b510      	push	{r4, lr}
 800940a:	3901      	subs	r1, #1
 800940c:	4402      	add	r2, r0
 800940e:	4290      	cmp	r0, r2
 8009410:	d101      	bne.n	8009416 <memcmp+0xe>
 8009412:	2000      	movs	r0, #0
 8009414:	e005      	b.n	8009422 <memcmp+0x1a>
 8009416:	7803      	ldrb	r3, [r0, #0]
 8009418:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800941c:	42a3      	cmp	r3, r4
 800941e:	d001      	beq.n	8009424 <memcmp+0x1c>
 8009420:	1b18      	subs	r0, r3, r4
 8009422:	bd10      	pop	{r4, pc}
 8009424:	3001      	adds	r0, #1
 8009426:	e7f2      	b.n	800940e <memcmp+0x6>

08009428 <memset>:
 8009428:	4402      	add	r2, r0
 800942a:	4603      	mov	r3, r0
 800942c:	4293      	cmp	r3, r2
 800942e:	d100      	bne.n	8009432 <memset+0xa>
 8009430:	4770      	bx	lr
 8009432:	f803 1b01 	strb.w	r1, [r3], #1
 8009436:	e7f9      	b.n	800942c <memset+0x4>

08009438 <strncpy>:
 8009438:	b510      	push	{r4, lr}
 800943a:	3901      	subs	r1, #1
 800943c:	4603      	mov	r3, r0
 800943e:	b132      	cbz	r2, 800944e <strncpy+0x16>
 8009440:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009444:	f803 4b01 	strb.w	r4, [r3], #1
 8009448:	3a01      	subs	r2, #1
 800944a:	2c00      	cmp	r4, #0
 800944c:	d1f7      	bne.n	800943e <strncpy+0x6>
 800944e:	441a      	add	r2, r3
 8009450:	2100      	movs	r1, #0
 8009452:	4293      	cmp	r3, r2
 8009454:	d100      	bne.n	8009458 <strncpy+0x20>
 8009456:	bd10      	pop	{r4, pc}
 8009458:	f803 1b01 	strb.w	r1, [r3], #1
 800945c:	e7f9      	b.n	8009452 <strncpy+0x1a>
	...

08009460 <strtok>:
 8009460:	4b16      	ldr	r3, [pc, #88]	@ (80094bc <strtok+0x5c>)
 8009462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009466:	681f      	ldr	r7, [r3, #0]
 8009468:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800946a:	4605      	mov	r5, r0
 800946c:	460e      	mov	r6, r1
 800946e:	b9ec      	cbnz	r4, 80094ac <strtok+0x4c>
 8009470:	2050      	movs	r0, #80	@ 0x50
 8009472:	f000 ffaf 	bl	800a3d4 <malloc>
 8009476:	4602      	mov	r2, r0
 8009478:	6478      	str	r0, [r7, #68]	@ 0x44
 800947a:	b920      	cbnz	r0, 8009486 <strtok+0x26>
 800947c:	4b10      	ldr	r3, [pc, #64]	@ (80094c0 <strtok+0x60>)
 800947e:	4811      	ldr	r0, [pc, #68]	@ (80094c4 <strtok+0x64>)
 8009480:	215b      	movs	r1, #91	@ 0x5b
 8009482:	f000 f8e5 	bl	8009650 <__assert_func>
 8009486:	e9c0 4400 	strd	r4, r4, [r0]
 800948a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800948e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009492:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009496:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800949a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800949e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80094a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80094a6:	6184      	str	r4, [r0, #24]
 80094a8:	7704      	strb	r4, [r0, #28]
 80094aa:	6244      	str	r4, [r0, #36]	@ 0x24
 80094ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	2301      	movs	r3, #1
 80094b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094b8:	f000 b806 	b.w	80094c8 <__strtok_r>
 80094bc:	2000001c 	.word	0x2000001c
 80094c0:	0800bd50 	.word	0x0800bd50
 80094c4:	0800bd67 	.word	0x0800bd67

080094c8 <__strtok_r>:
 80094c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ca:	4604      	mov	r4, r0
 80094cc:	b908      	cbnz	r0, 80094d2 <__strtok_r+0xa>
 80094ce:	6814      	ldr	r4, [r2, #0]
 80094d0:	b144      	cbz	r4, 80094e4 <__strtok_r+0x1c>
 80094d2:	4620      	mov	r0, r4
 80094d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80094d8:	460f      	mov	r7, r1
 80094da:	f817 6b01 	ldrb.w	r6, [r7], #1
 80094de:	b91e      	cbnz	r6, 80094e8 <__strtok_r+0x20>
 80094e0:	b965      	cbnz	r5, 80094fc <__strtok_r+0x34>
 80094e2:	6015      	str	r5, [r2, #0]
 80094e4:	2000      	movs	r0, #0
 80094e6:	e005      	b.n	80094f4 <__strtok_r+0x2c>
 80094e8:	42b5      	cmp	r5, r6
 80094ea:	d1f6      	bne.n	80094da <__strtok_r+0x12>
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1f0      	bne.n	80094d2 <__strtok_r+0xa>
 80094f0:	6014      	str	r4, [r2, #0]
 80094f2:	7003      	strb	r3, [r0, #0]
 80094f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094f6:	461c      	mov	r4, r3
 80094f8:	e00c      	b.n	8009514 <__strtok_r+0x4c>
 80094fa:	b91d      	cbnz	r5, 8009504 <__strtok_r+0x3c>
 80094fc:	4627      	mov	r7, r4
 80094fe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009502:	460e      	mov	r6, r1
 8009504:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009508:	42ab      	cmp	r3, r5
 800950a:	d1f6      	bne.n	80094fa <__strtok_r+0x32>
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0f2      	beq.n	80094f6 <__strtok_r+0x2e>
 8009510:	2300      	movs	r3, #0
 8009512:	703b      	strb	r3, [r7, #0]
 8009514:	6014      	str	r4, [r2, #0]
 8009516:	e7ed      	b.n	80094f4 <__strtok_r+0x2c>

08009518 <strstr>:
 8009518:	780a      	ldrb	r2, [r1, #0]
 800951a:	b570      	push	{r4, r5, r6, lr}
 800951c:	b96a      	cbnz	r2, 800953a <strstr+0x22>
 800951e:	bd70      	pop	{r4, r5, r6, pc}
 8009520:	429a      	cmp	r2, r3
 8009522:	d109      	bne.n	8009538 <strstr+0x20>
 8009524:	460c      	mov	r4, r1
 8009526:	4605      	mov	r5, r0
 8009528:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0f6      	beq.n	800951e <strstr+0x6>
 8009530:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009534:	429e      	cmp	r6, r3
 8009536:	d0f7      	beq.n	8009528 <strstr+0x10>
 8009538:	3001      	adds	r0, #1
 800953a:	7803      	ldrb	r3, [r0, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1ef      	bne.n	8009520 <strstr+0x8>
 8009540:	4618      	mov	r0, r3
 8009542:	e7ec      	b.n	800951e <strstr+0x6>

08009544 <_localeconv_r>:
 8009544:	4800      	ldr	r0, [pc, #0]	@ (8009548 <_localeconv_r+0x4>)
 8009546:	4770      	bx	lr
 8009548:	2000015c 	.word	0x2000015c

0800954c <_close_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d06      	ldr	r5, [pc, #24]	@ (8009568 <_close_r+0x1c>)
 8009550:	2300      	movs	r3, #0
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	602b      	str	r3, [r5, #0]
 8009558:	f7fa f854 	bl	8003604 <_close>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d102      	bne.n	8009566 <_close_r+0x1a>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b103      	cbz	r3, 8009566 <_close_r+0x1a>
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	bd38      	pop	{r3, r4, r5, pc}
 8009568:	200011a8 	.word	0x200011a8

0800956c <_lseek_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4d07      	ldr	r5, [pc, #28]	@ (800958c <_lseek_r+0x20>)
 8009570:	4604      	mov	r4, r0
 8009572:	4608      	mov	r0, r1
 8009574:	4611      	mov	r1, r2
 8009576:	2200      	movs	r2, #0
 8009578:	602a      	str	r2, [r5, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	f7fa f869 	bl	8003652 <_lseek>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_lseek_r+0x1e>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	b103      	cbz	r3, 800958a <_lseek_r+0x1e>
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	200011a8 	.word	0x200011a8

08009590 <_read_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d07      	ldr	r5, [pc, #28]	@ (80095b0 <_read_r+0x20>)
 8009594:	4604      	mov	r4, r0
 8009596:	4608      	mov	r0, r1
 8009598:	4611      	mov	r1, r2
 800959a:	2200      	movs	r2, #0
 800959c:	602a      	str	r2, [r5, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	f7fa f813 	bl	80035ca <_read>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_read_r+0x1e>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_read_r+0x1e>
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	200011a8 	.word	0x200011a8

080095b4 <_write_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4d07      	ldr	r5, [pc, #28]	@ (80095d4 <_write_r+0x20>)
 80095b8:	4604      	mov	r4, r0
 80095ba:	4608      	mov	r0, r1
 80095bc:	4611      	mov	r1, r2
 80095be:	2200      	movs	r2, #0
 80095c0:	602a      	str	r2, [r5, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	f7f8 ffd4 	bl	8002570 <_write>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_write_r+0x1e>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_write_r+0x1e>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	200011a8 	.word	0x200011a8

080095d8 <__errno>:
 80095d8:	4b01      	ldr	r3, [pc, #4]	@ (80095e0 <__errno+0x8>)
 80095da:	6818      	ldr	r0, [r3, #0]
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	2000001c 	.word	0x2000001c

080095e4 <__libc_init_array>:
 80095e4:	b570      	push	{r4, r5, r6, lr}
 80095e6:	4d0d      	ldr	r5, [pc, #52]	@ (800961c <__libc_init_array+0x38>)
 80095e8:	4c0d      	ldr	r4, [pc, #52]	@ (8009620 <__libc_init_array+0x3c>)
 80095ea:	1b64      	subs	r4, r4, r5
 80095ec:	10a4      	asrs	r4, r4, #2
 80095ee:	2600      	movs	r6, #0
 80095f0:	42a6      	cmp	r6, r4
 80095f2:	d109      	bne.n	8009608 <__libc_init_array+0x24>
 80095f4:	4d0b      	ldr	r5, [pc, #44]	@ (8009624 <__libc_init_array+0x40>)
 80095f6:	4c0c      	ldr	r4, [pc, #48]	@ (8009628 <__libc_init_array+0x44>)
 80095f8:	f001 ffd6 	bl	800b5a8 <_init>
 80095fc:	1b64      	subs	r4, r4, r5
 80095fe:	10a4      	asrs	r4, r4, #2
 8009600:	2600      	movs	r6, #0
 8009602:	42a6      	cmp	r6, r4
 8009604:	d105      	bne.n	8009612 <__libc_init_array+0x2e>
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	f855 3b04 	ldr.w	r3, [r5], #4
 800960c:	4798      	blx	r3
 800960e:	3601      	adds	r6, #1
 8009610:	e7ee      	b.n	80095f0 <__libc_init_array+0xc>
 8009612:	f855 3b04 	ldr.w	r3, [r5], #4
 8009616:	4798      	blx	r3
 8009618:	3601      	adds	r6, #1
 800961a:	e7f2      	b.n	8009602 <__libc_init_array+0x1e>
 800961c:	0800c0f4 	.word	0x0800c0f4
 8009620:	0800c0f4 	.word	0x0800c0f4
 8009624:	0800c0f4 	.word	0x0800c0f4
 8009628:	0800c0f8 	.word	0x0800c0f8

0800962c <__retarget_lock_init_recursive>:
 800962c:	4770      	bx	lr

0800962e <__retarget_lock_acquire_recursive>:
 800962e:	4770      	bx	lr

08009630 <__retarget_lock_release_recursive>:
 8009630:	4770      	bx	lr

08009632 <memcpy>:
 8009632:	440a      	add	r2, r1
 8009634:	4291      	cmp	r1, r2
 8009636:	f100 33ff 	add.w	r3, r0, #4294967295
 800963a:	d100      	bne.n	800963e <memcpy+0xc>
 800963c:	4770      	bx	lr
 800963e:	b510      	push	{r4, lr}
 8009640:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009644:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009648:	4291      	cmp	r1, r2
 800964a:	d1f9      	bne.n	8009640 <memcpy+0xe>
 800964c:	bd10      	pop	{r4, pc}
	...

08009650 <__assert_func>:
 8009650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009652:	4614      	mov	r4, r2
 8009654:	461a      	mov	r2, r3
 8009656:	4b09      	ldr	r3, [pc, #36]	@ (800967c <__assert_func+0x2c>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4605      	mov	r5, r0
 800965c:	68d8      	ldr	r0, [r3, #12]
 800965e:	b14c      	cbz	r4, 8009674 <__assert_func+0x24>
 8009660:	4b07      	ldr	r3, [pc, #28]	@ (8009680 <__assert_func+0x30>)
 8009662:	9100      	str	r1, [sp, #0]
 8009664:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009668:	4906      	ldr	r1, [pc, #24]	@ (8009684 <__assert_func+0x34>)
 800966a:	462b      	mov	r3, r5
 800966c:	f001 fe28 	bl	800b2c0 <fiprintf>
 8009670:	f001 fee6 	bl	800b440 <abort>
 8009674:	4b04      	ldr	r3, [pc, #16]	@ (8009688 <__assert_func+0x38>)
 8009676:	461c      	mov	r4, r3
 8009678:	e7f3      	b.n	8009662 <__assert_func+0x12>
 800967a:	bf00      	nop
 800967c:	2000001c 	.word	0x2000001c
 8009680:	0800bdc1 	.word	0x0800bdc1
 8009684:	0800bdce 	.word	0x0800bdce
 8009688:	0800bdfc 	.word	0x0800bdfc

0800968c <quorem>:
 800968c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	6903      	ldr	r3, [r0, #16]
 8009692:	690c      	ldr	r4, [r1, #16]
 8009694:	42a3      	cmp	r3, r4
 8009696:	4607      	mov	r7, r0
 8009698:	db7e      	blt.n	8009798 <quorem+0x10c>
 800969a:	3c01      	subs	r4, #1
 800969c:	f101 0814 	add.w	r8, r1, #20
 80096a0:	00a3      	lsls	r3, r4, #2
 80096a2:	f100 0514 	add.w	r5, r0, #20
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096ac:	9301      	str	r3, [sp, #4]
 80096ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096b6:	3301      	adds	r3, #1
 80096b8:	429a      	cmp	r2, r3
 80096ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096be:	fbb2 f6f3 	udiv	r6, r2, r3
 80096c2:	d32e      	bcc.n	8009722 <quorem+0x96>
 80096c4:	f04f 0a00 	mov.w	sl, #0
 80096c8:	46c4      	mov	ip, r8
 80096ca:	46ae      	mov	lr, r5
 80096cc:	46d3      	mov	fp, sl
 80096ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 80096d2:	b298      	uxth	r0, r3
 80096d4:	fb06 a000 	mla	r0, r6, r0, sl
 80096d8:	0c02      	lsrs	r2, r0, #16
 80096da:	0c1b      	lsrs	r3, r3, #16
 80096dc:	fb06 2303 	mla	r3, r6, r3, r2
 80096e0:	f8de 2000 	ldr.w	r2, [lr]
 80096e4:	b280      	uxth	r0, r0
 80096e6:	b292      	uxth	r2, r2
 80096e8:	1a12      	subs	r2, r2, r0
 80096ea:	445a      	add	r2, fp
 80096ec:	f8de 0000 	ldr.w	r0, [lr]
 80096f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80096fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80096fe:	b292      	uxth	r2, r2
 8009700:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009704:	45e1      	cmp	r9, ip
 8009706:	f84e 2b04 	str.w	r2, [lr], #4
 800970a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800970e:	d2de      	bcs.n	80096ce <quorem+0x42>
 8009710:	9b00      	ldr	r3, [sp, #0]
 8009712:	58eb      	ldr	r3, [r5, r3]
 8009714:	b92b      	cbnz	r3, 8009722 <quorem+0x96>
 8009716:	9b01      	ldr	r3, [sp, #4]
 8009718:	3b04      	subs	r3, #4
 800971a:	429d      	cmp	r5, r3
 800971c:	461a      	mov	r2, r3
 800971e:	d32f      	bcc.n	8009780 <quorem+0xf4>
 8009720:	613c      	str	r4, [r7, #16]
 8009722:	4638      	mov	r0, r7
 8009724:	f001 f97e 	bl	800aa24 <__mcmp>
 8009728:	2800      	cmp	r0, #0
 800972a:	db25      	blt.n	8009778 <quorem+0xec>
 800972c:	4629      	mov	r1, r5
 800972e:	2000      	movs	r0, #0
 8009730:	f858 2b04 	ldr.w	r2, [r8], #4
 8009734:	f8d1 c000 	ldr.w	ip, [r1]
 8009738:	fa1f fe82 	uxth.w	lr, r2
 800973c:	fa1f f38c 	uxth.w	r3, ip
 8009740:	eba3 030e 	sub.w	r3, r3, lr
 8009744:	4403      	add	r3, r0
 8009746:	0c12      	lsrs	r2, r2, #16
 8009748:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800974c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009750:	b29b      	uxth	r3, r3
 8009752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009756:	45c1      	cmp	r9, r8
 8009758:	f841 3b04 	str.w	r3, [r1], #4
 800975c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009760:	d2e6      	bcs.n	8009730 <quorem+0xa4>
 8009762:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800976a:	b922      	cbnz	r2, 8009776 <quorem+0xea>
 800976c:	3b04      	subs	r3, #4
 800976e:	429d      	cmp	r5, r3
 8009770:	461a      	mov	r2, r3
 8009772:	d30b      	bcc.n	800978c <quorem+0x100>
 8009774:	613c      	str	r4, [r7, #16]
 8009776:	3601      	adds	r6, #1
 8009778:	4630      	mov	r0, r6
 800977a:	b003      	add	sp, #12
 800977c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009780:	6812      	ldr	r2, [r2, #0]
 8009782:	3b04      	subs	r3, #4
 8009784:	2a00      	cmp	r2, #0
 8009786:	d1cb      	bne.n	8009720 <quorem+0x94>
 8009788:	3c01      	subs	r4, #1
 800978a:	e7c6      	b.n	800971a <quorem+0x8e>
 800978c:	6812      	ldr	r2, [r2, #0]
 800978e:	3b04      	subs	r3, #4
 8009790:	2a00      	cmp	r2, #0
 8009792:	d1ef      	bne.n	8009774 <quorem+0xe8>
 8009794:	3c01      	subs	r4, #1
 8009796:	e7ea      	b.n	800976e <quorem+0xe2>
 8009798:	2000      	movs	r0, #0
 800979a:	e7ee      	b.n	800977a <quorem+0xee>
 800979c:	0000      	movs	r0, r0
	...

080097a0 <_dtoa_r>:
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	69c7      	ldr	r7, [r0, #28]
 80097a6:	b097      	sub	sp, #92	@ 0x5c
 80097a8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80097ac:	ec55 4b10 	vmov	r4, r5, d0
 80097b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80097b2:	9107      	str	r1, [sp, #28]
 80097b4:	4681      	mov	r9, r0
 80097b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80097b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80097ba:	b97f      	cbnz	r7, 80097dc <_dtoa_r+0x3c>
 80097bc:	2010      	movs	r0, #16
 80097be:	f000 fe09 	bl	800a3d4 <malloc>
 80097c2:	4602      	mov	r2, r0
 80097c4:	f8c9 001c 	str.w	r0, [r9, #28]
 80097c8:	b920      	cbnz	r0, 80097d4 <_dtoa_r+0x34>
 80097ca:	4ba9      	ldr	r3, [pc, #676]	@ (8009a70 <_dtoa_r+0x2d0>)
 80097cc:	21ef      	movs	r1, #239	@ 0xef
 80097ce:	48a9      	ldr	r0, [pc, #676]	@ (8009a74 <_dtoa_r+0x2d4>)
 80097d0:	f7ff ff3e 	bl	8009650 <__assert_func>
 80097d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80097d8:	6007      	str	r7, [r0, #0]
 80097da:	60c7      	str	r7, [r0, #12]
 80097dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80097e0:	6819      	ldr	r1, [r3, #0]
 80097e2:	b159      	cbz	r1, 80097fc <_dtoa_r+0x5c>
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	604a      	str	r2, [r1, #4]
 80097e8:	2301      	movs	r3, #1
 80097ea:	4093      	lsls	r3, r2
 80097ec:	608b      	str	r3, [r1, #8]
 80097ee:	4648      	mov	r0, r9
 80097f0:	f000 fee6 	bl	800a5c0 <_Bfree>
 80097f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	1e2b      	subs	r3, r5, #0
 80097fe:	bfb9      	ittee	lt
 8009800:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009804:	9305      	strlt	r3, [sp, #20]
 8009806:	2300      	movge	r3, #0
 8009808:	6033      	strge	r3, [r6, #0]
 800980a:	9f05      	ldr	r7, [sp, #20]
 800980c:	4b9a      	ldr	r3, [pc, #616]	@ (8009a78 <_dtoa_r+0x2d8>)
 800980e:	bfbc      	itt	lt
 8009810:	2201      	movlt	r2, #1
 8009812:	6032      	strlt	r2, [r6, #0]
 8009814:	43bb      	bics	r3, r7
 8009816:	d112      	bne.n	800983e <_dtoa_r+0x9e>
 8009818:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800981a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009824:	4323      	orrs	r3, r4
 8009826:	f000 855a 	beq.w	800a2de <_dtoa_r+0xb3e>
 800982a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800982c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009a8c <_dtoa_r+0x2ec>
 8009830:	2b00      	cmp	r3, #0
 8009832:	f000 855c 	beq.w	800a2ee <_dtoa_r+0xb4e>
 8009836:	f10a 0303 	add.w	r3, sl, #3
 800983a:	f000 bd56 	b.w	800a2ea <_dtoa_r+0xb4a>
 800983e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009842:	2200      	movs	r2, #0
 8009844:	ec51 0b17 	vmov	r0, r1, d7
 8009848:	2300      	movs	r3, #0
 800984a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800984e:	f7f7 f93b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009852:	4680      	mov	r8, r0
 8009854:	b158      	cbz	r0, 800986e <_dtoa_r+0xce>
 8009856:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009858:	2301      	movs	r3, #1
 800985a:	6013      	str	r3, [r2, #0]
 800985c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800985e:	b113      	cbz	r3, 8009866 <_dtoa_r+0xc6>
 8009860:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009862:	4b86      	ldr	r3, [pc, #536]	@ (8009a7c <_dtoa_r+0x2dc>)
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009a90 <_dtoa_r+0x2f0>
 800986a:	f000 bd40 	b.w	800a2ee <_dtoa_r+0xb4e>
 800986e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009872:	aa14      	add	r2, sp, #80	@ 0x50
 8009874:	a915      	add	r1, sp, #84	@ 0x54
 8009876:	4648      	mov	r0, r9
 8009878:	f001 f984 	bl	800ab84 <__d2b>
 800987c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009880:	9002      	str	r0, [sp, #8]
 8009882:	2e00      	cmp	r6, #0
 8009884:	d078      	beq.n	8009978 <_dtoa_r+0x1d8>
 8009886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009888:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800988c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009890:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009894:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009898:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800989c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80098a0:	4619      	mov	r1, r3
 80098a2:	2200      	movs	r2, #0
 80098a4:	4b76      	ldr	r3, [pc, #472]	@ (8009a80 <_dtoa_r+0x2e0>)
 80098a6:	f7f6 fcef 	bl	8000288 <__aeabi_dsub>
 80098aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8009a58 <_dtoa_r+0x2b8>)
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	f7f6 fea2 	bl	80005f8 <__aeabi_dmul>
 80098b4:	a36a      	add	r3, pc, #424	@ (adr r3, 8009a60 <_dtoa_r+0x2c0>)
 80098b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ba:	f7f6 fce7 	bl	800028c <__adddf3>
 80098be:	4604      	mov	r4, r0
 80098c0:	4630      	mov	r0, r6
 80098c2:	460d      	mov	r5, r1
 80098c4:	f7f6 fe2e 	bl	8000524 <__aeabi_i2d>
 80098c8:	a367      	add	r3, pc, #412	@ (adr r3, 8009a68 <_dtoa_r+0x2c8>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f7f6 fe93 	bl	80005f8 <__aeabi_dmul>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4620      	mov	r0, r4
 80098d8:	4629      	mov	r1, r5
 80098da:	f7f6 fcd7 	bl	800028c <__adddf3>
 80098de:	4604      	mov	r4, r0
 80098e0:	460d      	mov	r5, r1
 80098e2:	f7f7 f939 	bl	8000b58 <__aeabi_d2iz>
 80098e6:	2200      	movs	r2, #0
 80098e8:	4607      	mov	r7, r0
 80098ea:	2300      	movs	r3, #0
 80098ec:	4620      	mov	r0, r4
 80098ee:	4629      	mov	r1, r5
 80098f0:	f7f7 f8f4 	bl	8000adc <__aeabi_dcmplt>
 80098f4:	b140      	cbz	r0, 8009908 <_dtoa_r+0x168>
 80098f6:	4638      	mov	r0, r7
 80098f8:	f7f6 fe14 	bl	8000524 <__aeabi_i2d>
 80098fc:	4622      	mov	r2, r4
 80098fe:	462b      	mov	r3, r5
 8009900:	f7f7 f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009904:	b900      	cbnz	r0, 8009908 <_dtoa_r+0x168>
 8009906:	3f01      	subs	r7, #1
 8009908:	2f16      	cmp	r7, #22
 800990a:	d852      	bhi.n	80099b2 <_dtoa_r+0x212>
 800990c:	4b5d      	ldr	r3, [pc, #372]	@ (8009a84 <_dtoa_r+0x2e4>)
 800990e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009916:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800991a:	f7f7 f8df 	bl	8000adc <__aeabi_dcmplt>
 800991e:	2800      	cmp	r0, #0
 8009920:	d049      	beq.n	80099b6 <_dtoa_r+0x216>
 8009922:	3f01      	subs	r7, #1
 8009924:	2300      	movs	r3, #0
 8009926:	9310      	str	r3, [sp, #64]	@ 0x40
 8009928:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800992a:	1b9b      	subs	r3, r3, r6
 800992c:	1e5a      	subs	r2, r3, #1
 800992e:	bf45      	ittet	mi
 8009930:	f1c3 0301 	rsbmi	r3, r3, #1
 8009934:	9300      	strmi	r3, [sp, #0]
 8009936:	2300      	movpl	r3, #0
 8009938:	2300      	movmi	r3, #0
 800993a:	9206      	str	r2, [sp, #24]
 800993c:	bf54      	ite	pl
 800993e:	9300      	strpl	r3, [sp, #0]
 8009940:	9306      	strmi	r3, [sp, #24]
 8009942:	2f00      	cmp	r7, #0
 8009944:	db39      	blt.n	80099ba <_dtoa_r+0x21a>
 8009946:	9b06      	ldr	r3, [sp, #24]
 8009948:	970d      	str	r7, [sp, #52]	@ 0x34
 800994a:	443b      	add	r3, r7
 800994c:	9306      	str	r3, [sp, #24]
 800994e:	2300      	movs	r3, #0
 8009950:	9308      	str	r3, [sp, #32]
 8009952:	9b07      	ldr	r3, [sp, #28]
 8009954:	2b09      	cmp	r3, #9
 8009956:	d863      	bhi.n	8009a20 <_dtoa_r+0x280>
 8009958:	2b05      	cmp	r3, #5
 800995a:	bfc4      	itt	gt
 800995c:	3b04      	subgt	r3, #4
 800995e:	9307      	strgt	r3, [sp, #28]
 8009960:	9b07      	ldr	r3, [sp, #28]
 8009962:	f1a3 0302 	sub.w	r3, r3, #2
 8009966:	bfcc      	ite	gt
 8009968:	2400      	movgt	r4, #0
 800996a:	2401      	movle	r4, #1
 800996c:	2b03      	cmp	r3, #3
 800996e:	d863      	bhi.n	8009a38 <_dtoa_r+0x298>
 8009970:	e8df f003 	tbb	[pc, r3]
 8009974:	2b375452 	.word	0x2b375452
 8009978:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800997c:	441e      	add	r6, r3
 800997e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009982:	2b20      	cmp	r3, #32
 8009984:	bfc1      	itttt	gt
 8009986:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800998a:	409f      	lslgt	r7, r3
 800998c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009990:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009994:	bfd6      	itet	le
 8009996:	f1c3 0320 	rsble	r3, r3, #32
 800999a:	ea47 0003 	orrgt.w	r0, r7, r3
 800999e:	fa04 f003 	lslle.w	r0, r4, r3
 80099a2:	f7f6 fdaf 	bl	8000504 <__aeabi_ui2d>
 80099a6:	2201      	movs	r2, #1
 80099a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80099ac:	3e01      	subs	r6, #1
 80099ae:	9212      	str	r2, [sp, #72]	@ 0x48
 80099b0:	e776      	b.n	80098a0 <_dtoa_r+0x100>
 80099b2:	2301      	movs	r3, #1
 80099b4:	e7b7      	b.n	8009926 <_dtoa_r+0x186>
 80099b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80099b8:	e7b6      	b.n	8009928 <_dtoa_r+0x188>
 80099ba:	9b00      	ldr	r3, [sp, #0]
 80099bc:	1bdb      	subs	r3, r3, r7
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	427b      	negs	r3, r7
 80099c2:	9308      	str	r3, [sp, #32]
 80099c4:	2300      	movs	r3, #0
 80099c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80099c8:	e7c3      	b.n	8009952 <_dtoa_r+0x1b2>
 80099ca:	2301      	movs	r3, #1
 80099cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099d0:	eb07 0b03 	add.w	fp, r7, r3
 80099d4:	f10b 0301 	add.w	r3, fp, #1
 80099d8:	2b01      	cmp	r3, #1
 80099da:	9303      	str	r3, [sp, #12]
 80099dc:	bfb8      	it	lt
 80099de:	2301      	movlt	r3, #1
 80099e0:	e006      	b.n	80099f0 <_dtoa_r+0x250>
 80099e2:	2301      	movs	r3, #1
 80099e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80099e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	dd28      	ble.n	8009a3e <_dtoa_r+0x29e>
 80099ec:	469b      	mov	fp, r3
 80099ee:	9303      	str	r3, [sp, #12]
 80099f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80099f4:	2100      	movs	r1, #0
 80099f6:	2204      	movs	r2, #4
 80099f8:	f102 0514 	add.w	r5, r2, #20
 80099fc:	429d      	cmp	r5, r3
 80099fe:	d926      	bls.n	8009a4e <_dtoa_r+0x2ae>
 8009a00:	6041      	str	r1, [r0, #4]
 8009a02:	4648      	mov	r0, r9
 8009a04:	f000 fd9c 	bl	800a540 <_Balloc>
 8009a08:	4682      	mov	sl, r0
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d142      	bne.n	8009a94 <_dtoa_r+0x2f4>
 8009a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8009a88 <_dtoa_r+0x2e8>)
 8009a10:	4602      	mov	r2, r0
 8009a12:	f240 11af 	movw	r1, #431	@ 0x1af
 8009a16:	e6da      	b.n	80097ce <_dtoa_r+0x2e>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e7e3      	b.n	80099e4 <_dtoa_r+0x244>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	e7d5      	b.n	80099cc <_dtoa_r+0x22c>
 8009a20:	2401      	movs	r4, #1
 8009a22:	2300      	movs	r3, #0
 8009a24:	9307      	str	r3, [sp, #28]
 8009a26:	9409      	str	r4, [sp, #36]	@ 0x24
 8009a28:	f04f 3bff 	mov.w	fp, #4294967295
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009a32:	2312      	movs	r3, #18
 8009a34:	920c      	str	r2, [sp, #48]	@ 0x30
 8009a36:	e7db      	b.n	80099f0 <_dtoa_r+0x250>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a3c:	e7f4      	b.n	8009a28 <_dtoa_r+0x288>
 8009a3e:	f04f 0b01 	mov.w	fp, #1
 8009a42:	f8cd b00c 	str.w	fp, [sp, #12]
 8009a46:	465b      	mov	r3, fp
 8009a48:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009a4c:	e7d0      	b.n	80099f0 <_dtoa_r+0x250>
 8009a4e:	3101      	adds	r1, #1
 8009a50:	0052      	lsls	r2, r2, #1
 8009a52:	e7d1      	b.n	80099f8 <_dtoa_r+0x258>
 8009a54:	f3af 8000 	nop.w
 8009a58:	636f4361 	.word	0x636f4361
 8009a5c:	3fd287a7 	.word	0x3fd287a7
 8009a60:	8b60c8b3 	.word	0x8b60c8b3
 8009a64:	3fc68a28 	.word	0x3fc68a28
 8009a68:	509f79fb 	.word	0x509f79fb
 8009a6c:	3fd34413 	.word	0x3fd34413
 8009a70:	0800bd50 	.word	0x0800bd50
 8009a74:	0800be0a 	.word	0x0800be0a
 8009a78:	7ff00000 	.word	0x7ff00000
 8009a7c:	0800bd2d 	.word	0x0800bd2d
 8009a80:	3ff80000 	.word	0x3ff80000
 8009a84:	0800bf20 	.word	0x0800bf20
 8009a88:	0800be62 	.word	0x0800be62
 8009a8c:	0800be06 	.word	0x0800be06
 8009a90:	0800bd2c 	.word	0x0800bd2c
 8009a94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009a98:	6018      	str	r0, [r3, #0]
 8009a9a:	9b03      	ldr	r3, [sp, #12]
 8009a9c:	2b0e      	cmp	r3, #14
 8009a9e:	f200 80a1 	bhi.w	8009be4 <_dtoa_r+0x444>
 8009aa2:	2c00      	cmp	r4, #0
 8009aa4:	f000 809e 	beq.w	8009be4 <_dtoa_r+0x444>
 8009aa8:	2f00      	cmp	r7, #0
 8009aaa:	dd33      	ble.n	8009b14 <_dtoa_r+0x374>
 8009aac:	4b9c      	ldr	r3, [pc, #624]	@ (8009d20 <_dtoa_r+0x580>)
 8009aae:	f007 020f 	and.w	r2, r7, #15
 8009ab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ab6:	ed93 7b00 	vldr	d7, [r3]
 8009aba:	05f8      	lsls	r0, r7, #23
 8009abc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009ac0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009ac4:	d516      	bpl.n	8009af4 <_dtoa_r+0x354>
 8009ac6:	4b97      	ldr	r3, [pc, #604]	@ (8009d24 <_dtoa_r+0x584>)
 8009ac8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009acc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ad0:	f7f6 febc 	bl	800084c <__aeabi_ddiv>
 8009ad4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ad8:	f004 040f 	and.w	r4, r4, #15
 8009adc:	2603      	movs	r6, #3
 8009ade:	4d91      	ldr	r5, [pc, #580]	@ (8009d24 <_dtoa_r+0x584>)
 8009ae0:	b954      	cbnz	r4, 8009af8 <_dtoa_r+0x358>
 8009ae2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009ae6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aea:	f7f6 feaf 	bl	800084c <__aeabi_ddiv>
 8009aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009af2:	e028      	b.n	8009b46 <_dtoa_r+0x3a6>
 8009af4:	2602      	movs	r6, #2
 8009af6:	e7f2      	b.n	8009ade <_dtoa_r+0x33e>
 8009af8:	07e1      	lsls	r1, r4, #31
 8009afa:	d508      	bpl.n	8009b0e <_dtoa_r+0x36e>
 8009afc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009b00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b04:	f7f6 fd78 	bl	80005f8 <__aeabi_dmul>
 8009b08:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b0c:	3601      	adds	r6, #1
 8009b0e:	1064      	asrs	r4, r4, #1
 8009b10:	3508      	adds	r5, #8
 8009b12:	e7e5      	b.n	8009ae0 <_dtoa_r+0x340>
 8009b14:	f000 80af 	beq.w	8009c76 <_dtoa_r+0x4d6>
 8009b18:	427c      	negs	r4, r7
 8009b1a:	4b81      	ldr	r3, [pc, #516]	@ (8009d20 <_dtoa_r+0x580>)
 8009b1c:	4d81      	ldr	r5, [pc, #516]	@ (8009d24 <_dtoa_r+0x584>)
 8009b1e:	f004 020f 	and.w	r2, r4, #15
 8009b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009b2e:	f7f6 fd63 	bl	80005f8 <__aeabi_dmul>
 8009b32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b36:	1124      	asrs	r4, r4, #4
 8009b38:	2300      	movs	r3, #0
 8009b3a:	2602      	movs	r6, #2
 8009b3c:	2c00      	cmp	r4, #0
 8009b3e:	f040 808f 	bne.w	8009c60 <_dtoa_r+0x4c0>
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1d3      	bne.n	8009aee <_dtoa_r+0x34e>
 8009b46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b48:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f000 8094 	beq.w	8009c7a <_dtoa_r+0x4da>
 8009b52:	4b75      	ldr	r3, [pc, #468]	@ (8009d28 <_dtoa_r+0x588>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	4620      	mov	r0, r4
 8009b58:	4629      	mov	r1, r5
 8009b5a:	f7f6 ffbf 	bl	8000adc <__aeabi_dcmplt>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	f000 808b 	beq.w	8009c7a <_dtoa_r+0x4da>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f000 8087 	beq.w	8009c7a <_dtoa_r+0x4da>
 8009b6c:	f1bb 0f00 	cmp.w	fp, #0
 8009b70:	dd34      	ble.n	8009bdc <_dtoa_r+0x43c>
 8009b72:	4620      	mov	r0, r4
 8009b74:	4b6d      	ldr	r3, [pc, #436]	@ (8009d2c <_dtoa_r+0x58c>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	4629      	mov	r1, r5
 8009b7a:	f7f6 fd3d 	bl	80005f8 <__aeabi_dmul>
 8009b7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b82:	f107 38ff 	add.w	r8, r7, #4294967295
 8009b86:	3601      	adds	r6, #1
 8009b88:	465c      	mov	r4, fp
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f7f6 fcca 	bl	8000524 <__aeabi_i2d>
 8009b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b94:	f7f6 fd30 	bl	80005f8 <__aeabi_dmul>
 8009b98:	4b65      	ldr	r3, [pc, #404]	@ (8009d30 <_dtoa_r+0x590>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f7f6 fb76 	bl	800028c <__adddf3>
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009ba6:	2c00      	cmp	r4, #0
 8009ba8:	d16a      	bne.n	8009c80 <_dtoa_r+0x4e0>
 8009baa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bae:	4b61      	ldr	r3, [pc, #388]	@ (8009d34 <_dtoa_r+0x594>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f7f6 fb69 	bl	8000288 <__aeabi_dsub>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009bbe:	462a      	mov	r2, r5
 8009bc0:	4633      	mov	r3, r6
 8009bc2:	f7f6 ffa9 	bl	8000b18 <__aeabi_dcmpgt>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	f040 8298 	bne.w	800a0fc <_dtoa_r+0x95c>
 8009bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bd0:	462a      	mov	r2, r5
 8009bd2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009bd6:	f7f6 ff81 	bl	8000adc <__aeabi_dcmplt>
 8009bda:	bb38      	cbnz	r0, 8009c2c <_dtoa_r+0x48c>
 8009bdc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009be0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009be4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f2c0 8157 	blt.w	8009e9a <_dtoa_r+0x6fa>
 8009bec:	2f0e      	cmp	r7, #14
 8009bee:	f300 8154 	bgt.w	8009e9a <_dtoa_r+0x6fa>
 8009bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8009d20 <_dtoa_r+0x580>)
 8009bf4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009bf8:	ed93 7b00 	vldr	d7, [r3]
 8009bfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	ed8d 7b00 	vstr	d7, [sp]
 8009c04:	f280 80e5 	bge.w	8009dd2 <_dtoa_r+0x632>
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f300 80e1 	bgt.w	8009dd2 <_dtoa_r+0x632>
 8009c10:	d10c      	bne.n	8009c2c <_dtoa_r+0x48c>
 8009c12:	4b48      	ldr	r3, [pc, #288]	@ (8009d34 <_dtoa_r+0x594>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	ec51 0b17 	vmov	r0, r1, d7
 8009c1a:	f7f6 fced 	bl	80005f8 <__aeabi_dmul>
 8009c1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c22:	f7f6 ff6f 	bl	8000b04 <__aeabi_dcmpge>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	f000 8266 	beq.w	800a0f8 <_dtoa_r+0x958>
 8009c2c:	2400      	movs	r4, #0
 8009c2e:	4625      	mov	r5, r4
 8009c30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c32:	4656      	mov	r6, sl
 8009c34:	ea6f 0803 	mvn.w	r8, r3
 8009c38:	2700      	movs	r7, #0
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4648      	mov	r0, r9
 8009c3e:	f000 fcbf 	bl	800a5c0 <_Bfree>
 8009c42:	2d00      	cmp	r5, #0
 8009c44:	f000 80bd 	beq.w	8009dc2 <_dtoa_r+0x622>
 8009c48:	b12f      	cbz	r7, 8009c56 <_dtoa_r+0x4b6>
 8009c4a:	42af      	cmp	r7, r5
 8009c4c:	d003      	beq.n	8009c56 <_dtoa_r+0x4b6>
 8009c4e:	4639      	mov	r1, r7
 8009c50:	4648      	mov	r0, r9
 8009c52:	f000 fcb5 	bl	800a5c0 <_Bfree>
 8009c56:	4629      	mov	r1, r5
 8009c58:	4648      	mov	r0, r9
 8009c5a:	f000 fcb1 	bl	800a5c0 <_Bfree>
 8009c5e:	e0b0      	b.n	8009dc2 <_dtoa_r+0x622>
 8009c60:	07e2      	lsls	r2, r4, #31
 8009c62:	d505      	bpl.n	8009c70 <_dtoa_r+0x4d0>
 8009c64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c68:	f7f6 fcc6 	bl	80005f8 <__aeabi_dmul>
 8009c6c:	3601      	adds	r6, #1
 8009c6e:	2301      	movs	r3, #1
 8009c70:	1064      	asrs	r4, r4, #1
 8009c72:	3508      	adds	r5, #8
 8009c74:	e762      	b.n	8009b3c <_dtoa_r+0x39c>
 8009c76:	2602      	movs	r6, #2
 8009c78:	e765      	b.n	8009b46 <_dtoa_r+0x3a6>
 8009c7a:	9c03      	ldr	r4, [sp, #12]
 8009c7c:	46b8      	mov	r8, r7
 8009c7e:	e784      	b.n	8009b8a <_dtoa_r+0x3ea>
 8009c80:	4b27      	ldr	r3, [pc, #156]	@ (8009d20 <_dtoa_r+0x580>)
 8009c82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c8c:	4454      	add	r4, sl
 8009c8e:	2900      	cmp	r1, #0
 8009c90:	d054      	beq.n	8009d3c <_dtoa_r+0x59c>
 8009c92:	4929      	ldr	r1, [pc, #164]	@ (8009d38 <_dtoa_r+0x598>)
 8009c94:	2000      	movs	r0, #0
 8009c96:	f7f6 fdd9 	bl	800084c <__aeabi_ddiv>
 8009c9a:	4633      	mov	r3, r6
 8009c9c:	462a      	mov	r2, r5
 8009c9e:	f7f6 faf3 	bl	8000288 <__aeabi_dsub>
 8009ca2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009ca6:	4656      	mov	r6, sl
 8009ca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cac:	f7f6 ff54 	bl	8000b58 <__aeabi_d2iz>
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	f7f6 fc37 	bl	8000524 <__aeabi_i2d>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	460b      	mov	r3, r1
 8009cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cbe:	f7f6 fae3 	bl	8000288 <__aeabi_dsub>
 8009cc2:	3530      	adds	r5, #48	@ 0x30
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ccc:	f806 5b01 	strb.w	r5, [r6], #1
 8009cd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009cd4:	f7f6 ff02 	bl	8000adc <__aeabi_dcmplt>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d172      	bne.n	8009dc2 <_dtoa_r+0x622>
 8009cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ce0:	4911      	ldr	r1, [pc, #68]	@ (8009d28 <_dtoa_r+0x588>)
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	f7f6 fad0 	bl	8000288 <__aeabi_dsub>
 8009ce8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009cec:	f7f6 fef6 	bl	8000adc <__aeabi_dcmplt>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	f040 80b4 	bne.w	8009e5e <_dtoa_r+0x6be>
 8009cf6:	42a6      	cmp	r6, r4
 8009cf8:	f43f af70 	beq.w	8009bdc <_dtoa_r+0x43c>
 8009cfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009d00:	4b0a      	ldr	r3, [pc, #40]	@ (8009d2c <_dtoa_r+0x58c>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	f7f6 fc78 	bl	80005f8 <__aeabi_dmul>
 8009d08:	4b08      	ldr	r3, [pc, #32]	@ (8009d2c <_dtoa_r+0x58c>)
 8009d0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009d0e:	2200      	movs	r2, #0
 8009d10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d14:	f7f6 fc70 	bl	80005f8 <__aeabi_dmul>
 8009d18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d1c:	e7c4      	b.n	8009ca8 <_dtoa_r+0x508>
 8009d1e:	bf00      	nop
 8009d20:	0800bf20 	.word	0x0800bf20
 8009d24:	0800bef8 	.word	0x0800bef8
 8009d28:	3ff00000 	.word	0x3ff00000
 8009d2c:	40240000 	.word	0x40240000
 8009d30:	401c0000 	.word	0x401c0000
 8009d34:	40140000 	.word	0x40140000
 8009d38:	3fe00000 	.word	0x3fe00000
 8009d3c:	4631      	mov	r1, r6
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f7f6 fc5a 	bl	80005f8 <__aeabi_dmul>
 8009d44:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009d48:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009d4a:	4656      	mov	r6, sl
 8009d4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d50:	f7f6 ff02 	bl	8000b58 <__aeabi_d2iz>
 8009d54:	4605      	mov	r5, r0
 8009d56:	f7f6 fbe5 	bl	8000524 <__aeabi_i2d>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d62:	f7f6 fa91 	bl	8000288 <__aeabi_dsub>
 8009d66:	3530      	adds	r5, #48	@ 0x30
 8009d68:	f806 5b01 	strb.w	r5, [r6], #1
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	42a6      	cmp	r6, r4
 8009d72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d76:	f04f 0200 	mov.w	r2, #0
 8009d7a:	d124      	bne.n	8009dc6 <_dtoa_r+0x626>
 8009d7c:	4baf      	ldr	r3, [pc, #700]	@ (800a03c <_dtoa_r+0x89c>)
 8009d7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009d82:	f7f6 fa83 	bl	800028c <__adddf3>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d8e:	f7f6 fec3 	bl	8000b18 <__aeabi_dcmpgt>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d163      	bne.n	8009e5e <_dtoa_r+0x6be>
 8009d96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009d9a:	49a8      	ldr	r1, [pc, #672]	@ (800a03c <_dtoa_r+0x89c>)
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	f7f6 fa73 	bl	8000288 <__aeabi_dsub>
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009daa:	f7f6 fe97 	bl	8000adc <__aeabi_dcmplt>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	f43f af14 	beq.w	8009bdc <_dtoa_r+0x43c>
 8009db4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009db6:	1e73      	subs	r3, r6, #1
 8009db8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009dba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009dbe:	2b30      	cmp	r3, #48	@ 0x30
 8009dc0:	d0f8      	beq.n	8009db4 <_dtoa_r+0x614>
 8009dc2:	4647      	mov	r7, r8
 8009dc4:	e03b      	b.n	8009e3e <_dtoa_r+0x69e>
 8009dc6:	4b9e      	ldr	r3, [pc, #632]	@ (800a040 <_dtoa_r+0x8a0>)
 8009dc8:	f7f6 fc16 	bl	80005f8 <__aeabi_dmul>
 8009dcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dd0:	e7bc      	b.n	8009d4c <_dtoa_r+0x5ac>
 8009dd2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009dd6:	4656      	mov	r6, sl
 8009dd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ddc:	4620      	mov	r0, r4
 8009dde:	4629      	mov	r1, r5
 8009de0:	f7f6 fd34 	bl	800084c <__aeabi_ddiv>
 8009de4:	f7f6 feb8 	bl	8000b58 <__aeabi_d2iz>
 8009de8:	4680      	mov	r8, r0
 8009dea:	f7f6 fb9b 	bl	8000524 <__aeabi_i2d>
 8009dee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009df2:	f7f6 fc01 	bl	80005f8 <__aeabi_dmul>
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e02:	f7f6 fa41 	bl	8000288 <__aeabi_dsub>
 8009e06:	f806 4b01 	strb.w	r4, [r6], #1
 8009e0a:	9d03      	ldr	r5, [sp, #12]
 8009e0c:	eba6 040a 	sub.w	r4, r6, sl
 8009e10:	42a5      	cmp	r5, r4
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	d133      	bne.n	8009e80 <_dtoa_r+0x6e0>
 8009e18:	f7f6 fa38 	bl	800028c <__adddf3>
 8009e1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e20:	4604      	mov	r4, r0
 8009e22:	460d      	mov	r5, r1
 8009e24:	f7f6 fe78 	bl	8000b18 <__aeabi_dcmpgt>
 8009e28:	b9c0      	cbnz	r0, 8009e5c <_dtoa_r+0x6bc>
 8009e2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e2e:	4620      	mov	r0, r4
 8009e30:	4629      	mov	r1, r5
 8009e32:	f7f6 fe49 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e36:	b110      	cbz	r0, 8009e3e <_dtoa_r+0x69e>
 8009e38:	f018 0f01 	tst.w	r8, #1
 8009e3c:	d10e      	bne.n	8009e5c <_dtoa_r+0x6bc>
 8009e3e:	9902      	ldr	r1, [sp, #8]
 8009e40:	4648      	mov	r0, r9
 8009e42:	f000 fbbd 	bl	800a5c0 <_Bfree>
 8009e46:	2300      	movs	r3, #0
 8009e48:	7033      	strb	r3, [r6, #0]
 8009e4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009e4c:	3701      	adds	r7, #1
 8009e4e:	601f      	str	r7, [r3, #0]
 8009e50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f000 824b 	beq.w	800a2ee <_dtoa_r+0xb4e>
 8009e58:	601e      	str	r6, [r3, #0]
 8009e5a:	e248      	b.n	800a2ee <_dtoa_r+0xb4e>
 8009e5c:	46b8      	mov	r8, r7
 8009e5e:	4633      	mov	r3, r6
 8009e60:	461e      	mov	r6, r3
 8009e62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e66:	2a39      	cmp	r2, #57	@ 0x39
 8009e68:	d106      	bne.n	8009e78 <_dtoa_r+0x6d8>
 8009e6a:	459a      	cmp	sl, r3
 8009e6c:	d1f8      	bne.n	8009e60 <_dtoa_r+0x6c0>
 8009e6e:	2230      	movs	r2, #48	@ 0x30
 8009e70:	f108 0801 	add.w	r8, r8, #1
 8009e74:	f88a 2000 	strb.w	r2, [sl]
 8009e78:	781a      	ldrb	r2, [r3, #0]
 8009e7a:	3201      	adds	r2, #1
 8009e7c:	701a      	strb	r2, [r3, #0]
 8009e7e:	e7a0      	b.n	8009dc2 <_dtoa_r+0x622>
 8009e80:	4b6f      	ldr	r3, [pc, #444]	@ (800a040 <_dtoa_r+0x8a0>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	f7f6 fbb8 	bl	80005f8 <__aeabi_dmul>
 8009e88:	2200      	movs	r2, #0
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	460d      	mov	r5, r1
 8009e90:	f7f6 fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d09f      	beq.n	8009dd8 <_dtoa_r+0x638>
 8009e98:	e7d1      	b.n	8009e3e <_dtoa_r+0x69e>
 8009e9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e9c:	2a00      	cmp	r2, #0
 8009e9e:	f000 80ea 	beq.w	800a076 <_dtoa_r+0x8d6>
 8009ea2:	9a07      	ldr	r2, [sp, #28]
 8009ea4:	2a01      	cmp	r2, #1
 8009ea6:	f300 80cd 	bgt.w	800a044 <_dtoa_r+0x8a4>
 8009eaa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009eac:	2a00      	cmp	r2, #0
 8009eae:	f000 80c1 	beq.w	800a034 <_dtoa_r+0x894>
 8009eb2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009eb6:	9c08      	ldr	r4, [sp, #32]
 8009eb8:	9e00      	ldr	r6, [sp, #0]
 8009eba:	9a00      	ldr	r2, [sp, #0]
 8009ebc:	441a      	add	r2, r3
 8009ebe:	9200      	str	r2, [sp, #0]
 8009ec0:	9a06      	ldr	r2, [sp, #24]
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	441a      	add	r2, r3
 8009ec6:	4648      	mov	r0, r9
 8009ec8:	9206      	str	r2, [sp, #24]
 8009eca:	f000 fc2d 	bl	800a728 <__i2b>
 8009ece:	4605      	mov	r5, r0
 8009ed0:	b166      	cbz	r6, 8009eec <_dtoa_r+0x74c>
 8009ed2:	9b06      	ldr	r3, [sp, #24]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	dd09      	ble.n	8009eec <_dtoa_r+0x74c>
 8009ed8:	42b3      	cmp	r3, r6
 8009eda:	9a00      	ldr	r2, [sp, #0]
 8009edc:	bfa8      	it	ge
 8009ede:	4633      	movge	r3, r6
 8009ee0:	1ad2      	subs	r2, r2, r3
 8009ee2:	9200      	str	r2, [sp, #0]
 8009ee4:	9a06      	ldr	r2, [sp, #24]
 8009ee6:	1af6      	subs	r6, r6, r3
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	9306      	str	r3, [sp, #24]
 8009eec:	9b08      	ldr	r3, [sp, #32]
 8009eee:	b30b      	cbz	r3, 8009f34 <_dtoa_r+0x794>
 8009ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 80c6 	beq.w	800a084 <_dtoa_r+0x8e4>
 8009ef8:	2c00      	cmp	r4, #0
 8009efa:	f000 80c0 	beq.w	800a07e <_dtoa_r+0x8de>
 8009efe:	4629      	mov	r1, r5
 8009f00:	4622      	mov	r2, r4
 8009f02:	4648      	mov	r0, r9
 8009f04:	f000 fcc8 	bl	800a898 <__pow5mult>
 8009f08:	9a02      	ldr	r2, [sp, #8]
 8009f0a:	4601      	mov	r1, r0
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	4648      	mov	r0, r9
 8009f10:	f000 fc20 	bl	800a754 <__multiply>
 8009f14:	9902      	ldr	r1, [sp, #8]
 8009f16:	4680      	mov	r8, r0
 8009f18:	4648      	mov	r0, r9
 8009f1a:	f000 fb51 	bl	800a5c0 <_Bfree>
 8009f1e:	9b08      	ldr	r3, [sp, #32]
 8009f20:	1b1b      	subs	r3, r3, r4
 8009f22:	9308      	str	r3, [sp, #32]
 8009f24:	f000 80b1 	beq.w	800a08a <_dtoa_r+0x8ea>
 8009f28:	9a08      	ldr	r2, [sp, #32]
 8009f2a:	4641      	mov	r1, r8
 8009f2c:	4648      	mov	r0, r9
 8009f2e:	f000 fcb3 	bl	800a898 <__pow5mult>
 8009f32:	9002      	str	r0, [sp, #8]
 8009f34:	2101      	movs	r1, #1
 8009f36:	4648      	mov	r0, r9
 8009f38:	f000 fbf6 	bl	800a728 <__i2b>
 8009f3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f3e:	4604      	mov	r4, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f000 81d8 	beq.w	800a2f6 <_dtoa_r+0xb56>
 8009f46:	461a      	mov	r2, r3
 8009f48:	4601      	mov	r1, r0
 8009f4a:	4648      	mov	r0, r9
 8009f4c:	f000 fca4 	bl	800a898 <__pow5mult>
 8009f50:	9b07      	ldr	r3, [sp, #28]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	4604      	mov	r4, r0
 8009f56:	f300 809f 	bgt.w	800a098 <_dtoa_r+0x8f8>
 8009f5a:	9b04      	ldr	r3, [sp, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f040 8097 	bne.w	800a090 <_dtoa_r+0x8f0>
 8009f62:	9b05      	ldr	r3, [sp, #20]
 8009f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f040 8093 	bne.w	800a094 <_dtoa_r+0x8f4>
 8009f6e:	9b05      	ldr	r3, [sp, #20]
 8009f70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f74:	0d1b      	lsrs	r3, r3, #20
 8009f76:	051b      	lsls	r3, r3, #20
 8009f78:	b133      	cbz	r3, 8009f88 <_dtoa_r+0x7e8>
 8009f7a:	9b00      	ldr	r3, [sp, #0]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	9b06      	ldr	r3, [sp, #24]
 8009f82:	3301      	adds	r3, #1
 8009f84:	9306      	str	r3, [sp, #24]
 8009f86:	2301      	movs	r3, #1
 8009f88:	9308      	str	r3, [sp, #32]
 8009f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 81b8 	beq.w	800a302 <_dtoa_r+0xb62>
 8009f92:	6923      	ldr	r3, [r4, #16]
 8009f94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f98:	6918      	ldr	r0, [r3, #16]
 8009f9a:	f000 fb79 	bl	800a690 <__hi0bits>
 8009f9e:	f1c0 0020 	rsb	r0, r0, #32
 8009fa2:	9b06      	ldr	r3, [sp, #24]
 8009fa4:	4418      	add	r0, r3
 8009fa6:	f010 001f 	ands.w	r0, r0, #31
 8009faa:	f000 8082 	beq.w	800a0b2 <_dtoa_r+0x912>
 8009fae:	f1c0 0320 	rsb	r3, r0, #32
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	dd73      	ble.n	800a09e <_dtoa_r+0x8fe>
 8009fb6:	9b00      	ldr	r3, [sp, #0]
 8009fb8:	f1c0 001c 	rsb	r0, r0, #28
 8009fbc:	4403      	add	r3, r0
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	9b06      	ldr	r3, [sp, #24]
 8009fc2:	4403      	add	r3, r0
 8009fc4:	4406      	add	r6, r0
 8009fc6:	9306      	str	r3, [sp, #24]
 8009fc8:	9b00      	ldr	r3, [sp, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	dd05      	ble.n	8009fda <_dtoa_r+0x83a>
 8009fce:	9902      	ldr	r1, [sp, #8]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4648      	mov	r0, r9
 8009fd4:	f000 fcba 	bl	800a94c <__lshift>
 8009fd8:	9002      	str	r0, [sp, #8]
 8009fda:	9b06      	ldr	r3, [sp, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	dd05      	ble.n	8009fec <_dtoa_r+0x84c>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	4648      	mov	r0, r9
 8009fe6:	f000 fcb1 	bl	800a94c <__lshift>
 8009fea:	4604      	mov	r4, r0
 8009fec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d061      	beq.n	800a0b6 <_dtoa_r+0x916>
 8009ff2:	9802      	ldr	r0, [sp, #8]
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	f000 fd15 	bl	800aa24 <__mcmp>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	da5b      	bge.n	800a0b6 <_dtoa_r+0x916>
 8009ffe:	2300      	movs	r3, #0
 800a000:	9902      	ldr	r1, [sp, #8]
 800a002:	220a      	movs	r2, #10
 800a004:	4648      	mov	r0, r9
 800a006:	f000 fafd 	bl	800a604 <__multadd>
 800a00a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a00c:	9002      	str	r0, [sp, #8]
 800a00e:	f107 38ff 	add.w	r8, r7, #4294967295
 800a012:	2b00      	cmp	r3, #0
 800a014:	f000 8177 	beq.w	800a306 <_dtoa_r+0xb66>
 800a018:	4629      	mov	r1, r5
 800a01a:	2300      	movs	r3, #0
 800a01c:	220a      	movs	r2, #10
 800a01e:	4648      	mov	r0, r9
 800a020:	f000 faf0 	bl	800a604 <__multadd>
 800a024:	f1bb 0f00 	cmp.w	fp, #0
 800a028:	4605      	mov	r5, r0
 800a02a:	dc6f      	bgt.n	800a10c <_dtoa_r+0x96c>
 800a02c:	9b07      	ldr	r3, [sp, #28]
 800a02e:	2b02      	cmp	r3, #2
 800a030:	dc49      	bgt.n	800a0c6 <_dtoa_r+0x926>
 800a032:	e06b      	b.n	800a10c <_dtoa_r+0x96c>
 800a034:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a036:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a03a:	e73c      	b.n	8009eb6 <_dtoa_r+0x716>
 800a03c:	3fe00000 	.word	0x3fe00000
 800a040:	40240000 	.word	0x40240000
 800a044:	9b03      	ldr	r3, [sp, #12]
 800a046:	1e5c      	subs	r4, r3, #1
 800a048:	9b08      	ldr	r3, [sp, #32]
 800a04a:	42a3      	cmp	r3, r4
 800a04c:	db09      	blt.n	800a062 <_dtoa_r+0x8c2>
 800a04e:	1b1c      	subs	r4, r3, r4
 800a050:	9b03      	ldr	r3, [sp, #12]
 800a052:	2b00      	cmp	r3, #0
 800a054:	f6bf af30 	bge.w	8009eb8 <_dtoa_r+0x718>
 800a058:	9b00      	ldr	r3, [sp, #0]
 800a05a:	9a03      	ldr	r2, [sp, #12]
 800a05c:	1a9e      	subs	r6, r3, r2
 800a05e:	2300      	movs	r3, #0
 800a060:	e72b      	b.n	8009eba <_dtoa_r+0x71a>
 800a062:	9b08      	ldr	r3, [sp, #32]
 800a064:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a066:	9408      	str	r4, [sp, #32]
 800a068:	1ae3      	subs	r3, r4, r3
 800a06a:	441a      	add	r2, r3
 800a06c:	9e00      	ldr	r6, [sp, #0]
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	920d      	str	r2, [sp, #52]	@ 0x34
 800a072:	2400      	movs	r4, #0
 800a074:	e721      	b.n	8009eba <_dtoa_r+0x71a>
 800a076:	9c08      	ldr	r4, [sp, #32]
 800a078:	9e00      	ldr	r6, [sp, #0]
 800a07a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a07c:	e728      	b.n	8009ed0 <_dtoa_r+0x730>
 800a07e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a082:	e751      	b.n	8009f28 <_dtoa_r+0x788>
 800a084:	9a08      	ldr	r2, [sp, #32]
 800a086:	9902      	ldr	r1, [sp, #8]
 800a088:	e750      	b.n	8009f2c <_dtoa_r+0x78c>
 800a08a:	f8cd 8008 	str.w	r8, [sp, #8]
 800a08e:	e751      	b.n	8009f34 <_dtoa_r+0x794>
 800a090:	2300      	movs	r3, #0
 800a092:	e779      	b.n	8009f88 <_dtoa_r+0x7e8>
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	e777      	b.n	8009f88 <_dtoa_r+0x7e8>
 800a098:	2300      	movs	r3, #0
 800a09a:	9308      	str	r3, [sp, #32]
 800a09c:	e779      	b.n	8009f92 <_dtoa_r+0x7f2>
 800a09e:	d093      	beq.n	8009fc8 <_dtoa_r+0x828>
 800a0a0:	9a00      	ldr	r2, [sp, #0]
 800a0a2:	331c      	adds	r3, #28
 800a0a4:	441a      	add	r2, r3
 800a0a6:	9200      	str	r2, [sp, #0]
 800a0a8:	9a06      	ldr	r2, [sp, #24]
 800a0aa:	441a      	add	r2, r3
 800a0ac:	441e      	add	r6, r3
 800a0ae:	9206      	str	r2, [sp, #24]
 800a0b0:	e78a      	b.n	8009fc8 <_dtoa_r+0x828>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	e7f4      	b.n	800a0a0 <_dtoa_r+0x900>
 800a0b6:	9b03      	ldr	r3, [sp, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	46b8      	mov	r8, r7
 800a0bc:	dc20      	bgt.n	800a100 <_dtoa_r+0x960>
 800a0be:	469b      	mov	fp, r3
 800a0c0:	9b07      	ldr	r3, [sp, #28]
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	dd1e      	ble.n	800a104 <_dtoa_r+0x964>
 800a0c6:	f1bb 0f00 	cmp.w	fp, #0
 800a0ca:	f47f adb1 	bne.w	8009c30 <_dtoa_r+0x490>
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	465b      	mov	r3, fp
 800a0d2:	2205      	movs	r2, #5
 800a0d4:	4648      	mov	r0, r9
 800a0d6:	f000 fa95 	bl	800a604 <__multadd>
 800a0da:	4601      	mov	r1, r0
 800a0dc:	4604      	mov	r4, r0
 800a0de:	9802      	ldr	r0, [sp, #8]
 800a0e0:	f000 fca0 	bl	800aa24 <__mcmp>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	f77f ada3 	ble.w	8009c30 <_dtoa_r+0x490>
 800a0ea:	4656      	mov	r6, sl
 800a0ec:	2331      	movs	r3, #49	@ 0x31
 800a0ee:	f806 3b01 	strb.w	r3, [r6], #1
 800a0f2:	f108 0801 	add.w	r8, r8, #1
 800a0f6:	e59f      	b.n	8009c38 <_dtoa_r+0x498>
 800a0f8:	9c03      	ldr	r4, [sp, #12]
 800a0fa:	46b8      	mov	r8, r7
 800a0fc:	4625      	mov	r5, r4
 800a0fe:	e7f4      	b.n	800a0ea <_dtoa_r+0x94a>
 800a100:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 8101 	beq.w	800a30e <_dtoa_r+0xb6e>
 800a10c:	2e00      	cmp	r6, #0
 800a10e:	dd05      	ble.n	800a11c <_dtoa_r+0x97c>
 800a110:	4629      	mov	r1, r5
 800a112:	4632      	mov	r2, r6
 800a114:	4648      	mov	r0, r9
 800a116:	f000 fc19 	bl	800a94c <__lshift>
 800a11a:	4605      	mov	r5, r0
 800a11c:	9b08      	ldr	r3, [sp, #32]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d05c      	beq.n	800a1dc <_dtoa_r+0xa3c>
 800a122:	6869      	ldr	r1, [r5, #4]
 800a124:	4648      	mov	r0, r9
 800a126:	f000 fa0b 	bl	800a540 <_Balloc>
 800a12a:	4606      	mov	r6, r0
 800a12c:	b928      	cbnz	r0, 800a13a <_dtoa_r+0x99a>
 800a12e:	4b82      	ldr	r3, [pc, #520]	@ (800a338 <_dtoa_r+0xb98>)
 800a130:	4602      	mov	r2, r0
 800a132:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a136:	f7ff bb4a 	b.w	80097ce <_dtoa_r+0x2e>
 800a13a:	692a      	ldr	r2, [r5, #16]
 800a13c:	3202      	adds	r2, #2
 800a13e:	0092      	lsls	r2, r2, #2
 800a140:	f105 010c 	add.w	r1, r5, #12
 800a144:	300c      	adds	r0, #12
 800a146:	f7ff fa74 	bl	8009632 <memcpy>
 800a14a:	2201      	movs	r2, #1
 800a14c:	4631      	mov	r1, r6
 800a14e:	4648      	mov	r0, r9
 800a150:	f000 fbfc 	bl	800a94c <__lshift>
 800a154:	f10a 0301 	add.w	r3, sl, #1
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	eb0a 030b 	add.w	r3, sl, fp
 800a15e:	9308      	str	r3, [sp, #32]
 800a160:	9b04      	ldr	r3, [sp, #16]
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	462f      	mov	r7, r5
 800a168:	9306      	str	r3, [sp, #24]
 800a16a:	4605      	mov	r5, r0
 800a16c:	9b00      	ldr	r3, [sp, #0]
 800a16e:	9802      	ldr	r0, [sp, #8]
 800a170:	4621      	mov	r1, r4
 800a172:	f103 3bff 	add.w	fp, r3, #4294967295
 800a176:	f7ff fa89 	bl	800968c <quorem>
 800a17a:	4603      	mov	r3, r0
 800a17c:	3330      	adds	r3, #48	@ 0x30
 800a17e:	9003      	str	r0, [sp, #12]
 800a180:	4639      	mov	r1, r7
 800a182:	9802      	ldr	r0, [sp, #8]
 800a184:	9309      	str	r3, [sp, #36]	@ 0x24
 800a186:	f000 fc4d 	bl	800aa24 <__mcmp>
 800a18a:	462a      	mov	r2, r5
 800a18c:	9004      	str	r0, [sp, #16]
 800a18e:	4621      	mov	r1, r4
 800a190:	4648      	mov	r0, r9
 800a192:	f000 fc63 	bl	800aa5c <__mdiff>
 800a196:	68c2      	ldr	r2, [r0, #12]
 800a198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a19a:	4606      	mov	r6, r0
 800a19c:	bb02      	cbnz	r2, 800a1e0 <_dtoa_r+0xa40>
 800a19e:	4601      	mov	r1, r0
 800a1a0:	9802      	ldr	r0, [sp, #8]
 800a1a2:	f000 fc3f 	bl	800aa24 <__mcmp>
 800a1a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	4648      	mov	r0, r9
 800a1ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800a1b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1b2:	f000 fa05 	bl	800a5c0 <_Bfree>
 800a1b6:	9b07      	ldr	r3, [sp, #28]
 800a1b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a1ba:	9e00      	ldr	r6, [sp, #0]
 800a1bc:	ea42 0103 	orr.w	r1, r2, r3
 800a1c0:	9b06      	ldr	r3, [sp, #24]
 800a1c2:	4319      	orrs	r1, r3
 800a1c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1c6:	d10d      	bne.n	800a1e4 <_dtoa_r+0xa44>
 800a1c8:	2b39      	cmp	r3, #57	@ 0x39
 800a1ca:	d027      	beq.n	800a21c <_dtoa_r+0xa7c>
 800a1cc:	9a04      	ldr	r2, [sp, #16]
 800a1ce:	2a00      	cmp	r2, #0
 800a1d0:	dd01      	ble.n	800a1d6 <_dtoa_r+0xa36>
 800a1d2:	9b03      	ldr	r3, [sp, #12]
 800a1d4:	3331      	adds	r3, #49	@ 0x31
 800a1d6:	f88b 3000 	strb.w	r3, [fp]
 800a1da:	e52e      	b.n	8009c3a <_dtoa_r+0x49a>
 800a1dc:	4628      	mov	r0, r5
 800a1de:	e7b9      	b.n	800a154 <_dtoa_r+0x9b4>
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	e7e2      	b.n	800a1aa <_dtoa_r+0xa0a>
 800a1e4:	9904      	ldr	r1, [sp, #16]
 800a1e6:	2900      	cmp	r1, #0
 800a1e8:	db04      	blt.n	800a1f4 <_dtoa_r+0xa54>
 800a1ea:	9807      	ldr	r0, [sp, #28]
 800a1ec:	4301      	orrs	r1, r0
 800a1ee:	9806      	ldr	r0, [sp, #24]
 800a1f0:	4301      	orrs	r1, r0
 800a1f2:	d120      	bne.n	800a236 <_dtoa_r+0xa96>
 800a1f4:	2a00      	cmp	r2, #0
 800a1f6:	ddee      	ble.n	800a1d6 <_dtoa_r+0xa36>
 800a1f8:	9902      	ldr	r1, [sp, #8]
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	4648      	mov	r0, r9
 800a200:	f000 fba4 	bl	800a94c <__lshift>
 800a204:	4621      	mov	r1, r4
 800a206:	9002      	str	r0, [sp, #8]
 800a208:	f000 fc0c 	bl	800aa24 <__mcmp>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	9b00      	ldr	r3, [sp, #0]
 800a210:	dc02      	bgt.n	800a218 <_dtoa_r+0xa78>
 800a212:	d1e0      	bne.n	800a1d6 <_dtoa_r+0xa36>
 800a214:	07da      	lsls	r2, r3, #31
 800a216:	d5de      	bpl.n	800a1d6 <_dtoa_r+0xa36>
 800a218:	2b39      	cmp	r3, #57	@ 0x39
 800a21a:	d1da      	bne.n	800a1d2 <_dtoa_r+0xa32>
 800a21c:	2339      	movs	r3, #57	@ 0x39
 800a21e:	f88b 3000 	strb.w	r3, [fp]
 800a222:	4633      	mov	r3, r6
 800a224:	461e      	mov	r6, r3
 800a226:	3b01      	subs	r3, #1
 800a228:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a22c:	2a39      	cmp	r2, #57	@ 0x39
 800a22e:	d04e      	beq.n	800a2ce <_dtoa_r+0xb2e>
 800a230:	3201      	adds	r2, #1
 800a232:	701a      	strb	r2, [r3, #0]
 800a234:	e501      	b.n	8009c3a <_dtoa_r+0x49a>
 800a236:	2a00      	cmp	r2, #0
 800a238:	dd03      	ble.n	800a242 <_dtoa_r+0xaa2>
 800a23a:	2b39      	cmp	r3, #57	@ 0x39
 800a23c:	d0ee      	beq.n	800a21c <_dtoa_r+0xa7c>
 800a23e:	3301      	adds	r3, #1
 800a240:	e7c9      	b.n	800a1d6 <_dtoa_r+0xa36>
 800a242:	9a00      	ldr	r2, [sp, #0]
 800a244:	9908      	ldr	r1, [sp, #32]
 800a246:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a24a:	428a      	cmp	r2, r1
 800a24c:	d028      	beq.n	800a2a0 <_dtoa_r+0xb00>
 800a24e:	9902      	ldr	r1, [sp, #8]
 800a250:	2300      	movs	r3, #0
 800a252:	220a      	movs	r2, #10
 800a254:	4648      	mov	r0, r9
 800a256:	f000 f9d5 	bl	800a604 <__multadd>
 800a25a:	42af      	cmp	r7, r5
 800a25c:	9002      	str	r0, [sp, #8]
 800a25e:	f04f 0300 	mov.w	r3, #0
 800a262:	f04f 020a 	mov.w	r2, #10
 800a266:	4639      	mov	r1, r7
 800a268:	4648      	mov	r0, r9
 800a26a:	d107      	bne.n	800a27c <_dtoa_r+0xadc>
 800a26c:	f000 f9ca 	bl	800a604 <__multadd>
 800a270:	4607      	mov	r7, r0
 800a272:	4605      	mov	r5, r0
 800a274:	9b00      	ldr	r3, [sp, #0]
 800a276:	3301      	adds	r3, #1
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	e777      	b.n	800a16c <_dtoa_r+0x9cc>
 800a27c:	f000 f9c2 	bl	800a604 <__multadd>
 800a280:	4629      	mov	r1, r5
 800a282:	4607      	mov	r7, r0
 800a284:	2300      	movs	r3, #0
 800a286:	220a      	movs	r2, #10
 800a288:	4648      	mov	r0, r9
 800a28a:	f000 f9bb 	bl	800a604 <__multadd>
 800a28e:	4605      	mov	r5, r0
 800a290:	e7f0      	b.n	800a274 <_dtoa_r+0xad4>
 800a292:	f1bb 0f00 	cmp.w	fp, #0
 800a296:	bfcc      	ite	gt
 800a298:	465e      	movgt	r6, fp
 800a29a:	2601      	movle	r6, #1
 800a29c:	4456      	add	r6, sl
 800a29e:	2700      	movs	r7, #0
 800a2a0:	9902      	ldr	r1, [sp, #8]
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	4648      	mov	r0, r9
 800a2a8:	f000 fb50 	bl	800a94c <__lshift>
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	9002      	str	r0, [sp, #8]
 800a2b0:	f000 fbb8 	bl	800aa24 <__mcmp>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	dcb4      	bgt.n	800a222 <_dtoa_r+0xa82>
 800a2b8:	d102      	bne.n	800a2c0 <_dtoa_r+0xb20>
 800a2ba:	9b00      	ldr	r3, [sp, #0]
 800a2bc:	07db      	lsls	r3, r3, #31
 800a2be:	d4b0      	bmi.n	800a222 <_dtoa_r+0xa82>
 800a2c0:	4633      	mov	r3, r6
 800a2c2:	461e      	mov	r6, r3
 800a2c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2c8:	2a30      	cmp	r2, #48	@ 0x30
 800a2ca:	d0fa      	beq.n	800a2c2 <_dtoa_r+0xb22>
 800a2cc:	e4b5      	b.n	8009c3a <_dtoa_r+0x49a>
 800a2ce:	459a      	cmp	sl, r3
 800a2d0:	d1a8      	bne.n	800a224 <_dtoa_r+0xa84>
 800a2d2:	2331      	movs	r3, #49	@ 0x31
 800a2d4:	f108 0801 	add.w	r8, r8, #1
 800a2d8:	f88a 3000 	strb.w	r3, [sl]
 800a2dc:	e4ad      	b.n	8009c3a <_dtoa_r+0x49a>
 800a2de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a2e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a33c <_dtoa_r+0xb9c>
 800a2e4:	b11b      	cbz	r3, 800a2ee <_dtoa_r+0xb4e>
 800a2e6:	f10a 0308 	add.w	r3, sl, #8
 800a2ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	4650      	mov	r0, sl
 800a2f0:	b017      	add	sp, #92	@ 0x5c
 800a2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f6:	9b07      	ldr	r3, [sp, #28]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	f77f ae2e 	ble.w	8009f5a <_dtoa_r+0x7ba>
 800a2fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a300:	9308      	str	r3, [sp, #32]
 800a302:	2001      	movs	r0, #1
 800a304:	e64d      	b.n	8009fa2 <_dtoa_r+0x802>
 800a306:	f1bb 0f00 	cmp.w	fp, #0
 800a30a:	f77f aed9 	ble.w	800a0c0 <_dtoa_r+0x920>
 800a30e:	4656      	mov	r6, sl
 800a310:	9802      	ldr	r0, [sp, #8]
 800a312:	4621      	mov	r1, r4
 800a314:	f7ff f9ba 	bl	800968c <quorem>
 800a318:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a31c:	f806 3b01 	strb.w	r3, [r6], #1
 800a320:	eba6 020a 	sub.w	r2, r6, sl
 800a324:	4593      	cmp	fp, r2
 800a326:	ddb4      	ble.n	800a292 <_dtoa_r+0xaf2>
 800a328:	9902      	ldr	r1, [sp, #8]
 800a32a:	2300      	movs	r3, #0
 800a32c:	220a      	movs	r2, #10
 800a32e:	4648      	mov	r0, r9
 800a330:	f000 f968 	bl	800a604 <__multadd>
 800a334:	9002      	str	r0, [sp, #8]
 800a336:	e7eb      	b.n	800a310 <_dtoa_r+0xb70>
 800a338:	0800be62 	.word	0x0800be62
 800a33c:	0800bdfd 	.word	0x0800bdfd

0800a340 <_free_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4605      	mov	r5, r0
 800a344:	2900      	cmp	r1, #0
 800a346:	d041      	beq.n	800a3cc <_free_r+0x8c>
 800a348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a34c:	1f0c      	subs	r4, r1, #4
 800a34e:	2b00      	cmp	r3, #0
 800a350:	bfb8      	it	lt
 800a352:	18e4      	addlt	r4, r4, r3
 800a354:	f000 f8e8 	bl	800a528 <__malloc_lock>
 800a358:	4a1d      	ldr	r2, [pc, #116]	@ (800a3d0 <_free_r+0x90>)
 800a35a:	6813      	ldr	r3, [r2, #0]
 800a35c:	b933      	cbnz	r3, 800a36c <_free_r+0x2c>
 800a35e:	6063      	str	r3, [r4, #4]
 800a360:	6014      	str	r4, [r2, #0]
 800a362:	4628      	mov	r0, r5
 800a364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a368:	f000 b8e4 	b.w	800a534 <__malloc_unlock>
 800a36c:	42a3      	cmp	r3, r4
 800a36e:	d908      	bls.n	800a382 <_free_r+0x42>
 800a370:	6820      	ldr	r0, [r4, #0]
 800a372:	1821      	adds	r1, r4, r0
 800a374:	428b      	cmp	r3, r1
 800a376:	bf01      	itttt	eq
 800a378:	6819      	ldreq	r1, [r3, #0]
 800a37a:	685b      	ldreq	r3, [r3, #4]
 800a37c:	1809      	addeq	r1, r1, r0
 800a37e:	6021      	streq	r1, [r4, #0]
 800a380:	e7ed      	b.n	800a35e <_free_r+0x1e>
 800a382:	461a      	mov	r2, r3
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	b10b      	cbz	r3, 800a38c <_free_r+0x4c>
 800a388:	42a3      	cmp	r3, r4
 800a38a:	d9fa      	bls.n	800a382 <_free_r+0x42>
 800a38c:	6811      	ldr	r1, [r2, #0]
 800a38e:	1850      	adds	r0, r2, r1
 800a390:	42a0      	cmp	r0, r4
 800a392:	d10b      	bne.n	800a3ac <_free_r+0x6c>
 800a394:	6820      	ldr	r0, [r4, #0]
 800a396:	4401      	add	r1, r0
 800a398:	1850      	adds	r0, r2, r1
 800a39a:	4283      	cmp	r3, r0
 800a39c:	6011      	str	r1, [r2, #0]
 800a39e:	d1e0      	bne.n	800a362 <_free_r+0x22>
 800a3a0:	6818      	ldr	r0, [r3, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	6053      	str	r3, [r2, #4]
 800a3a6:	4408      	add	r0, r1
 800a3a8:	6010      	str	r0, [r2, #0]
 800a3aa:	e7da      	b.n	800a362 <_free_r+0x22>
 800a3ac:	d902      	bls.n	800a3b4 <_free_r+0x74>
 800a3ae:	230c      	movs	r3, #12
 800a3b0:	602b      	str	r3, [r5, #0]
 800a3b2:	e7d6      	b.n	800a362 <_free_r+0x22>
 800a3b4:	6820      	ldr	r0, [r4, #0]
 800a3b6:	1821      	adds	r1, r4, r0
 800a3b8:	428b      	cmp	r3, r1
 800a3ba:	bf04      	itt	eq
 800a3bc:	6819      	ldreq	r1, [r3, #0]
 800a3be:	685b      	ldreq	r3, [r3, #4]
 800a3c0:	6063      	str	r3, [r4, #4]
 800a3c2:	bf04      	itt	eq
 800a3c4:	1809      	addeq	r1, r1, r0
 800a3c6:	6021      	streq	r1, [r4, #0]
 800a3c8:	6054      	str	r4, [r2, #4]
 800a3ca:	e7ca      	b.n	800a362 <_free_r+0x22>
 800a3cc:	bd38      	pop	{r3, r4, r5, pc}
 800a3ce:	bf00      	nop
 800a3d0:	200011b4 	.word	0x200011b4

0800a3d4 <malloc>:
 800a3d4:	4b02      	ldr	r3, [pc, #8]	@ (800a3e0 <malloc+0xc>)
 800a3d6:	4601      	mov	r1, r0
 800a3d8:	6818      	ldr	r0, [r3, #0]
 800a3da:	f000 b825 	b.w	800a428 <_malloc_r>
 800a3de:	bf00      	nop
 800a3e0:	2000001c 	.word	0x2000001c

0800a3e4 <sbrk_aligned>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	4e0f      	ldr	r6, [pc, #60]	@ (800a424 <sbrk_aligned+0x40>)
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	6831      	ldr	r1, [r6, #0]
 800a3ec:	4605      	mov	r5, r0
 800a3ee:	b911      	cbnz	r1, 800a3f6 <sbrk_aligned+0x12>
 800a3f0:	f001 f816 	bl	800b420 <_sbrk_r>
 800a3f4:	6030      	str	r0, [r6, #0]
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f001 f811 	bl	800b420 <_sbrk_r>
 800a3fe:	1c43      	adds	r3, r0, #1
 800a400:	d103      	bne.n	800a40a <sbrk_aligned+0x26>
 800a402:	f04f 34ff 	mov.w	r4, #4294967295
 800a406:	4620      	mov	r0, r4
 800a408:	bd70      	pop	{r4, r5, r6, pc}
 800a40a:	1cc4      	adds	r4, r0, #3
 800a40c:	f024 0403 	bic.w	r4, r4, #3
 800a410:	42a0      	cmp	r0, r4
 800a412:	d0f8      	beq.n	800a406 <sbrk_aligned+0x22>
 800a414:	1a21      	subs	r1, r4, r0
 800a416:	4628      	mov	r0, r5
 800a418:	f001 f802 	bl	800b420 <_sbrk_r>
 800a41c:	3001      	adds	r0, #1
 800a41e:	d1f2      	bne.n	800a406 <sbrk_aligned+0x22>
 800a420:	e7ef      	b.n	800a402 <sbrk_aligned+0x1e>
 800a422:	bf00      	nop
 800a424:	200011b0 	.word	0x200011b0

0800a428 <_malloc_r>:
 800a428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a42c:	1ccd      	adds	r5, r1, #3
 800a42e:	f025 0503 	bic.w	r5, r5, #3
 800a432:	3508      	adds	r5, #8
 800a434:	2d0c      	cmp	r5, #12
 800a436:	bf38      	it	cc
 800a438:	250c      	movcc	r5, #12
 800a43a:	2d00      	cmp	r5, #0
 800a43c:	4606      	mov	r6, r0
 800a43e:	db01      	blt.n	800a444 <_malloc_r+0x1c>
 800a440:	42a9      	cmp	r1, r5
 800a442:	d904      	bls.n	800a44e <_malloc_r+0x26>
 800a444:	230c      	movs	r3, #12
 800a446:	6033      	str	r3, [r6, #0]
 800a448:	2000      	movs	r0, #0
 800a44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a44e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a524 <_malloc_r+0xfc>
 800a452:	f000 f869 	bl	800a528 <__malloc_lock>
 800a456:	f8d8 3000 	ldr.w	r3, [r8]
 800a45a:	461c      	mov	r4, r3
 800a45c:	bb44      	cbnz	r4, 800a4b0 <_malloc_r+0x88>
 800a45e:	4629      	mov	r1, r5
 800a460:	4630      	mov	r0, r6
 800a462:	f7ff ffbf 	bl	800a3e4 <sbrk_aligned>
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	4604      	mov	r4, r0
 800a46a:	d158      	bne.n	800a51e <_malloc_r+0xf6>
 800a46c:	f8d8 4000 	ldr.w	r4, [r8]
 800a470:	4627      	mov	r7, r4
 800a472:	2f00      	cmp	r7, #0
 800a474:	d143      	bne.n	800a4fe <_malloc_r+0xd6>
 800a476:	2c00      	cmp	r4, #0
 800a478:	d04b      	beq.n	800a512 <_malloc_r+0xea>
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	4639      	mov	r1, r7
 800a47e:	4630      	mov	r0, r6
 800a480:	eb04 0903 	add.w	r9, r4, r3
 800a484:	f000 ffcc 	bl	800b420 <_sbrk_r>
 800a488:	4581      	cmp	r9, r0
 800a48a:	d142      	bne.n	800a512 <_malloc_r+0xea>
 800a48c:	6821      	ldr	r1, [r4, #0]
 800a48e:	1a6d      	subs	r5, r5, r1
 800a490:	4629      	mov	r1, r5
 800a492:	4630      	mov	r0, r6
 800a494:	f7ff ffa6 	bl	800a3e4 <sbrk_aligned>
 800a498:	3001      	adds	r0, #1
 800a49a:	d03a      	beq.n	800a512 <_malloc_r+0xea>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	442b      	add	r3, r5
 800a4a0:	6023      	str	r3, [r4, #0]
 800a4a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a4a6:	685a      	ldr	r2, [r3, #4]
 800a4a8:	bb62      	cbnz	r2, 800a504 <_malloc_r+0xdc>
 800a4aa:	f8c8 7000 	str.w	r7, [r8]
 800a4ae:	e00f      	b.n	800a4d0 <_malloc_r+0xa8>
 800a4b0:	6822      	ldr	r2, [r4, #0]
 800a4b2:	1b52      	subs	r2, r2, r5
 800a4b4:	d420      	bmi.n	800a4f8 <_malloc_r+0xd0>
 800a4b6:	2a0b      	cmp	r2, #11
 800a4b8:	d917      	bls.n	800a4ea <_malloc_r+0xc2>
 800a4ba:	1961      	adds	r1, r4, r5
 800a4bc:	42a3      	cmp	r3, r4
 800a4be:	6025      	str	r5, [r4, #0]
 800a4c0:	bf18      	it	ne
 800a4c2:	6059      	strne	r1, [r3, #4]
 800a4c4:	6863      	ldr	r3, [r4, #4]
 800a4c6:	bf08      	it	eq
 800a4c8:	f8c8 1000 	streq.w	r1, [r8]
 800a4cc:	5162      	str	r2, [r4, r5]
 800a4ce:	604b      	str	r3, [r1, #4]
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f000 f82f 	bl	800a534 <__malloc_unlock>
 800a4d6:	f104 000b 	add.w	r0, r4, #11
 800a4da:	1d23      	adds	r3, r4, #4
 800a4dc:	f020 0007 	bic.w	r0, r0, #7
 800a4e0:	1ac2      	subs	r2, r0, r3
 800a4e2:	bf1c      	itt	ne
 800a4e4:	1a1b      	subne	r3, r3, r0
 800a4e6:	50a3      	strne	r3, [r4, r2]
 800a4e8:	e7af      	b.n	800a44a <_malloc_r+0x22>
 800a4ea:	6862      	ldr	r2, [r4, #4]
 800a4ec:	42a3      	cmp	r3, r4
 800a4ee:	bf0c      	ite	eq
 800a4f0:	f8c8 2000 	streq.w	r2, [r8]
 800a4f4:	605a      	strne	r2, [r3, #4]
 800a4f6:	e7eb      	b.n	800a4d0 <_malloc_r+0xa8>
 800a4f8:	4623      	mov	r3, r4
 800a4fa:	6864      	ldr	r4, [r4, #4]
 800a4fc:	e7ae      	b.n	800a45c <_malloc_r+0x34>
 800a4fe:	463c      	mov	r4, r7
 800a500:	687f      	ldr	r7, [r7, #4]
 800a502:	e7b6      	b.n	800a472 <_malloc_r+0x4a>
 800a504:	461a      	mov	r2, r3
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	42a3      	cmp	r3, r4
 800a50a:	d1fb      	bne.n	800a504 <_malloc_r+0xdc>
 800a50c:	2300      	movs	r3, #0
 800a50e:	6053      	str	r3, [r2, #4]
 800a510:	e7de      	b.n	800a4d0 <_malloc_r+0xa8>
 800a512:	230c      	movs	r3, #12
 800a514:	6033      	str	r3, [r6, #0]
 800a516:	4630      	mov	r0, r6
 800a518:	f000 f80c 	bl	800a534 <__malloc_unlock>
 800a51c:	e794      	b.n	800a448 <_malloc_r+0x20>
 800a51e:	6005      	str	r5, [r0, #0]
 800a520:	e7d6      	b.n	800a4d0 <_malloc_r+0xa8>
 800a522:	bf00      	nop
 800a524:	200011b4 	.word	0x200011b4

0800a528 <__malloc_lock>:
 800a528:	4801      	ldr	r0, [pc, #4]	@ (800a530 <__malloc_lock+0x8>)
 800a52a:	f7ff b880 	b.w	800962e <__retarget_lock_acquire_recursive>
 800a52e:	bf00      	nop
 800a530:	200011ac 	.word	0x200011ac

0800a534 <__malloc_unlock>:
 800a534:	4801      	ldr	r0, [pc, #4]	@ (800a53c <__malloc_unlock+0x8>)
 800a536:	f7ff b87b 	b.w	8009630 <__retarget_lock_release_recursive>
 800a53a:	bf00      	nop
 800a53c:	200011ac 	.word	0x200011ac

0800a540 <_Balloc>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	69c6      	ldr	r6, [r0, #28]
 800a544:	4604      	mov	r4, r0
 800a546:	460d      	mov	r5, r1
 800a548:	b976      	cbnz	r6, 800a568 <_Balloc+0x28>
 800a54a:	2010      	movs	r0, #16
 800a54c:	f7ff ff42 	bl	800a3d4 <malloc>
 800a550:	4602      	mov	r2, r0
 800a552:	61e0      	str	r0, [r4, #28]
 800a554:	b920      	cbnz	r0, 800a560 <_Balloc+0x20>
 800a556:	4b18      	ldr	r3, [pc, #96]	@ (800a5b8 <_Balloc+0x78>)
 800a558:	4818      	ldr	r0, [pc, #96]	@ (800a5bc <_Balloc+0x7c>)
 800a55a:	216b      	movs	r1, #107	@ 0x6b
 800a55c:	f7ff f878 	bl	8009650 <__assert_func>
 800a560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a564:	6006      	str	r6, [r0, #0]
 800a566:	60c6      	str	r6, [r0, #12]
 800a568:	69e6      	ldr	r6, [r4, #28]
 800a56a:	68f3      	ldr	r3, [r6, #12]
 800a56c:	b183      	cbz	r3, 800a590 <_Balloc+0x50>
 800a56e:	69e3      	ldr	r3, [r4, #28]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a576:	b9b8      	cbnz	r0, 800a5a8 <_Balloc+0x68>
 800a578:	2101      	movs	r1, #1
 800a57a:	fa01 f605 	lsl.w	r6, r1, r5
 800a57e:	1d72      	adds	r2, r6, #5
 800a580:	0092      	lsls	r2, r2, #2
 800a582:	4620      	mov	r0, r4
 800a584:	f000 ff63 	bl	800b44e <_calloc_r>
 800a588:	b160      	cbz	r0, 800a5a4 <_Balloc+0x64>
 800a58a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a58e:	e00e      	b.n	800a5ae <_Balloc+0x6e>
 800a590:	2221      	movs	r2, #33	@ 0x21
 800a592:	2104      	movs	r1, #4
 800a594:	4620      	mov	r0, r4
 800a596:	f000 ff5a 	bl	800b44e <_calloc_r>
 800a59a:	69e3      	ldr	r3, [r4, #28]
 800a59c:	60f0      	str	r0, [r6, #12]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1e4      	bne.n	800a56e <_Balloc+0x2e>
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}
 800a5a8:	6802      	ldr	r2, [r0, #0]
 800a5aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5b4:	e7f7      	b.n	800a5a6 <_Balloc+0x66>
 800a5b6:	bf00      	nop
 800a5b8:	0800bd50 	.word	0x0800bd50
 800a5bc:	0800be73 	.word	0x0800be73

0800a5c0 <_Bfree>:
 800a5c0:	b570      	push	{r4, r5, r6, lr}
 800a5c2:	69c6      	ldr	r6, [r0, #28]
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	b976      	cbnz	r6, 800a5e8 <_Bfree+0x28>
 800a5ca:	2010      	movs	r0, #16
 800a5cc:	f7ff ff02 	bl	800a3d4 <malloc>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	61e8      	str	r0, [r5, #28]
 800a5d4:	b920      	cbnz	r0, 800a5e0 <_Bfree+0x20>
 800a5d6:	4b09      	ldr	r3, [pc, #36]	@ (800a5fc <_Bfree+0x3c>)
 800a5d8:	4809      	ldr	r0, [pc, #36]	@ (800a600 <_Bfree+0x40>)
 800a5da:	218f      	movs	r1, #143	@ 0x8f
 800a5dc:	f7ff f838 	bl	8009650 <__assert_func>
 800a5e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5e4:	6006      	str	r6, [r0, #0]
 800a5e6:	60c6      	str	r6, [r0, #12]
 800a5e8:	b13c      	cbz	r4, 800a5fa <_Bfree+0x3a>
 800a5ea:	69eb      	ldr	r3, [r5, #28]
 800a5ec:	6862      	ldr	r2, [r4, #4]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5f4:	6021      	str	r1, [r4, #0]
 800a5f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}
 800a5fc:	0800bd50 	.word	0x0800bd50
 800a600:	0800be73 	.word	0x0800be73

0800a604 <__multadd>:
 800a604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a608:	690d      	ldr	r5, [r1, #16]
 800a60a:	4607      	mov	r7, r0
 800a60c:	460c      	mov	r4, r1
 800a60e:	461e      	mov	r6, r3
 800a610:	f101 0c14 	add.w	ip, r1, #20
 800a614:	2000      	movs	r0, #0
 800a616:	f8dc 3000 	ldr.w	r3, [ip]
 800a61a:	b299      	uxth	r1, r3
 800a61c:	fb02 6101 	mla	r1, r2, r1, r6
 800a620:	0c1e      	lsrs	r6, r3, #16
 800a622:	0c0b      	lsrs	r3, r1, #16
 800a624:	fb02 3306 	mla	r3, r2, r6, r3
 800a628:	b289      	uxth	r1, r1
 800a62a:	3001      	adds	r0, #1
 800a62c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a630:	4285      	cmp	r5, r0
 800a632:	f84c 1b04 	str.w	r1, [ip], #4
 800a636:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a63a:	dcec      	bgt.n	800a616 <__multadd+0x12>
 800a63c:	b30e      	cbz	r6, 800a682 <__multadd+0x7e>
 800a63e:	68a3      	ldr	r3, [r4, #8]
 800a640:	42ab      	cmp	r3, r5
 800a642:	dc19      	bgt.n	800a678 <__multadd+0x74>
 800a644:	6861      	ldr	r1, [r4, #4]
 800a646:	4638      	mov	r0, r7
 800a648:	3101      	adds	r1, #1
 800a64a:	f7ff ff79 	bl	800a540 <_Balloc>
 800a64e:	4680      	mov	r8, r0
 800a650:	b928      	cbnz	r0, 800a65e <__multadd+0x5a>
 800a652:	4602      	mov	r2, r0
 800a654:	4b0c      	ldr	r3, [pc, #48]	@ (800a688 <__multadd+0x84>)
 800a656:	480d      	ldr	r0, [pc, #52]	@ (800a68c <__multadd+0x88>)
 800a658:	21ba      	movs	r1, #186	@ 0xba
 800a65a:	f7fe fff9 	bl	8009650 <__assert_func>
 800a65e:	6922      	ldr	r2, [r4, #16]
 800a660:	3202      	adds	r2, #2
 800a662:	f104 010c 	add.w	r1, r4, #12
 800a666:	0092      	lsls	r2, r2, #2
 800a668:	300c      	adds	r0, #12
 800a66a:	f7fe ffe2 	bl	8009632 <memcpy>
 800a66e:	4621      	mov	r1, r4
 800a670:	4638      	mov	r0, r7
 800a672:	f7ff ffa5 	bl	800a5c0 <_Bfree>
 800a676:	4644      	mov	r4, r8
 800a678:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a67c:	3501      	adds	r5, #1
 800a67e:	615e      	str	r6, [r3, #20]
 800a680:	6125      	str	r5, [r4, #16]
 800a682:	4620      	mov	r0, r4
 800a684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a688:	0800be62 	.word	0x0800be62
 800a68c:	0800be73 	.word	0x0800be73

0800a690 <__hi0bits>:
 800a690:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a694:	4603      	mov	r3, r0
 800a696:	bf36      	itet	cc
 800a698:	0403      	lslcc	r3, r0, #16
 800a69a:	2000      	movcs	r0, #0
 800a69c:	2010      	movcc	r0, #16
 800a69e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6a2:	bf3c      	itt	cc
 800a6a4:	021b      	lslcc	r3, r3, #8
 800a6a6:	3008      	addcc	r0, #8
 800a6a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6ac:	bf3c      	itt	cc
 800a6ae:	011b      	lslcc	r3, r3, #4
 800a6b0:	3004      	addcc	r0, #4
 800a6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6b6:	bf3c      	itt	cc
 800a6b8:	009b      	lslcc	r3, r3, #2
 800a6ba:	3002      	addcc	r0, #2
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	db05      	blt.n	800a6cc <__hi0bits+0x3c>
 800a6c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a6c4:	f100 0001 	add.w	r0, r0, #1
 800a6c8:	bf08      	it	eq
 800a6ca:	2020      	moveq	r0, #32
 800a6cc:	4770      	bx	lr

0800a6ce <__lo0bits>:
 800a6ce:	6803      	ldr	r3, [r0, #0]
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	f013 0007 	ands.w	r0, r3, #7
 800a6d6:	d00b      	beq.n	800a6f0 <__lo0bits+0x22>
 800a6d8:	07d9      	lsls	r1, r3, #31
 800a6da:	d421      	bmi.n	800a720 <__lo0bits+0x52>
 800a6dc:	0798      	lsls	r0, r3, #30
 800a6de:	bf49      	itett	mi
 800a6e0:	085b      	lsrmi	r3, r3, #1
 800a6e2:	089b      	lsrpl	r3, r3, #2
 800a6e4:	2001      	movmi	r0, #1
 800a6e6:	6013      	strmi	r3, [r2, #0]
 800a6e8:	bf5c      	itt	pl
 800a6ea:	6013      	strpl	r3, [r2, #0]
 800a6ec:	2002      	movpl	r0, #2
 800a6ee:	4770      	bx	lr
 800a6f0:	b299      	uxth	r1, r3
 800a6f2:	b909      	cbnz	r1, 800a6f8 <__lo0bits+0x2a>
 800a6f4:	0c1b      	lsrs	r3, r3, #16
 800a6f6:	2010      	movs	r0, #16
 800a6f8:	b2d9      	uxtb	r1, r3
 800a6fa:	b909      	cbnz	r1, 800a700 <__lo0bits+0x32>
 800a6fc:	3008      	adds	r0, #8
 800a6fe:	0a1b      	lsrs	r3, r3, #8
 800a700:	0719      	lsls	r1, r3, #28
 800a702:	bf04      	itt	eq
 800a704:	091b      	lsreq	r3, r3, #4
 800a706:	3004      	addeq	r0, #4
 800a708:	0799      	lsls	r1, r3, #30
 800a70a:	bf04      	itt	eq
 800a70c:	089b      	lsreq	r3, r3, #2
 800a70e:	3002      	addeq	r0, #2
 800a710:	07d9      	lsls	r1, r3, #31
 800a712:	d403      	bmi.n	800a71c <__lo0bits+0x4e>
 800a714:	085b      	lsrs	r3, r3, #1
 800a716:	f100 0001 	add.w	r0, r0, #1
 800a71a:	d003      	beq.n	800a724 <__lo0bits+0x56>
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	4770      	bx	lr
 800a720:	2000      	movs	r0, #0
 800a722:	4770      	bx	lr
 800a724:	2020      	movs	r0, #32
 800a726:	4770      	bx	lr

0800a728 <__i2b>:
 800a728:	b510      	push	{r4, lr}
 800a72a:	460c      	mov	r4, r1
 800a72c:	2101      	movs	r1, #1
 800a72e:	f7ff ff07 	bl	800a540 <_Balloc>
 800a732:	4602      	mov	r2, r0
 800a734:	b928      	cbnz	r0, 800a742 <__i2b+0x1a>
 800a736:	4b05      	ldr	r3, [pc, #20]	@ (800a74c <__i2b+0x24>)
 800a738:	4805      	ldr	r0, [pc, #20]	@ (800a750 <__i2b+0x28>)
 800a73a:	f240 1145 	movw	r1, #325	@ 0x145
 800a73e:	f7fe ff87 	bl	8009650 <__assert_func>
 800a742:	2301      	movs	r3, #1
 800a744:	6144      	str	r4, [r0, #20]
 800a746:	6103      	str	r3, [r0, #16]
 800a748:	bd10      	pop	{r4, pc}
 800a74a:	bf00      	nop
 800a74c:	0800be62 	.word	0x0800be62
 800a750:	0800be73 	.word	0x0800be73

0800a754 <__multiply>:
 800a754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a758:	4617      	mov	r7, r2
 800a75a:	690a      	ldr	r2, [r1, #16]
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	429a      	cmp	r2, r3
 800a760:	bfa8      	it	ge
 800a762:	463b      	movge	r3, r7
 800a764:	4689      	mov	r9, r1
 800a766:	bfa4      	itt	ge
 800a768:	460f      	movge	r7, r1
 800a76a:	4699      	movge	r9, r3
 800a76c:	693d      	ldr	r5, [r7, #16]
 800a76e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	6879      	ldr	r1, [r7, #4]
 800a776:	eb05 060a 	add.w	r6, r5, sl
 800a77a:	42b3      	cmp	r3, r6
 800a77c:	b085      	sub	sp, #20
 800a77e:	bfb8      	it	lt
 800a780:	3101      	addlt	r1, #1
 800a782:	f7ff fedd 	bl	800a540 <_Balloc>
 800a786:	b930      	cbnz	r0, 800a796 <__multiply+0x42>
 800a788:	4602      	mov	r2, r0
 800a78a:	4b41      	ldr	r3, [pc, #260]	@ (800a890 <__multiply+0x13c>)
 800a78c:	4841      	ldr	r0, [pc, #260]	@ (800a894 <__multiply+0x140>)
 800a78e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a792:	f7fe ff5d 	bl	8009650 <__assert_func>
 800a796:	f100 0414 	add.w	r4, r0, #20
 800a79a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a79e:	4623      	mov	r3, r4
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	4573      	cmp	r3, lr
 800a7a4:	d320      	bcc.n	800a7e8 <__multiply+0x94>
 800a7a6:	f107 0814 	add.w	r8, r7, #20
 800a7aa:	f109 0114 	add.w	r1, r9, #20
 800a7ae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a7b2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a7b6:	9302      	str	r3, [sp, #8]
 800a7b8:	1beb      	subs	r3, r5, r7
 800a7ba:	3b15      	subs	r3, #21
 800a7bc:	f023 0303 	bic.w	r3, r3, #3
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	3715      	adds	r7, #21
 800a7c4:	42bd      	cmp	r5, r7
 800a7c6:	bf38      	it	cc
 800a7c8:	2304      	movcc	r3, #4
 800a7ca:	9301      	str	r3, [sp, #4]
 800a7cc:	9b02      	ldr	r3, [sp, #8]
 800a7ce:	9103      	str	r1, [sp, #12]
 800a7d0:	428b      	cmp	r3, r1
 800a7d2:	d80c      	bhi.n	800a7ee <__multiply+0x9a>
 800a7d4:	2e00      	cmp	r6, #0
 800a7d6:	dd03      	ble.n	800a7e0 <__multiply+0x8c>
 800a7d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d055      	beq.n	800a88c <__multiply+0x138>
 800a7e0:	6106      	str	r6, [r0, #16]
 800a7e2:	b005      	add	sp, #20
 800a7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e8:	f843 2b04 	str.w	r2, [r3], #4
 800a7ec:	e7d9      	b.n	800a7a2 <__multiply+0x4e>
 800a7ee:	f8b1 a000 	ldrh.w	sl, [r1]
 800a7f2:	f1ba 0f00 	cmp.w	sl, #0
 800a7f6:	d01f      	beq.n	800a838 <__multiply+0xe4>
 800a7f8:	46c4      	mov	ip, r8
 800a7fa:	46a1      	mov	r9, r4
 800a7fc:	2700      	movs	r7, #0
 800a7fe:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a802:	f8d9 3000 	ldr.w	r3, [r9]
 800a806:	fa1f fb82 	uxth.w	fp, r2
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a810:	443b      	add	r3, r7
 800a812:	f8d9 7000 	ldr.w	r7, [r9]
 800a816:	0c12      	lsrs	r2, r2, #16
 800a818:	0c3f      	lsrs	r7, r7, #16
 800a81a:	fb0a 7202 	mla	r2, sl, r2, r7
 800a81e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a822:	b29b      	uxth	r3, r3
 800a824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a828:	4565      	cmp	r5, ip
 800a82a:	f849 3b04 	str.w	r3, [r9], #4
 800a82e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a832:	d8e4      	bhi.n	800a7fe <__multiply+0xaa>
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	50e7      	str	r7, [r4, r3]
 800a838:	9b03      	ldr	r3, [sp, #12]
 800a83a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a83e:	3104      	adds	r1, #4
 800a840:	f1b9 0f00 	cmp.w	r9, #0
 800a844:	d020      	beq.n	800a888 <__multiply+0x134>
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	4647      	mov	r7, r8
 800a84a:	46a4      	mov	ip, r4
 800a84c:	f04f 0a00 	mov.w	sl, #0
 800a850:	f8b7 b000 	ldrh.w	fp, [r7]
 800a854:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a858:	fb09 220b 	mla	r2, r9, fp, r2
 800a85c:	4452      	add	r2, sl
 800a85e:	b29b      	uxth	r3, r3
 800a860:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a864:	f84c 3b04 	str.w	r3, [ip], #4
 800a868:	f857 3b04 	ldr.w	r3, [r7], #4
 800a86c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a870:	f8bc 3000 	ldrh.w	r3, [ip]
 800a874:	fb09 330a 	mla	r3, r9, sl, r3
 800a878:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a87c:	42bd      	cmp	r5, r7
 800a87e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a882:	d8e5      	bhi.n	800a850 <__multiply+0xfc>
 800a884:	9a01      	ldr	r2, [sp, #4]
 800a886:	50a3      	str	r3, [r4, r2]
 800a888:	3404      	adds	r4, #4
 800a88a:	e79f      	b.n	800a7cc <__multiply+0x78>
 800a88c:	3e01      	subs	r6, #1
 800a88e:	e7a1      	b.n	800a7d4 <__multiply+0x80>
 800a890:	0800be62 	.word	0x0800be62
 800a894:	0800be73 	.word	0x0800be73

0800a898 <__pow5mult>:
 800a898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a89c:	4615      	mov	r5, r2
 800a89e:	f012 0203 	ands.w	r2, r2, #3
 800a8a2:	4607      	mov	r7, r0
 800a8a4:	460e      	mov	r6, r1
 800a8a6:	d007      	beq.n	800a8b8 <__pow5mult+0x20>
 800a8a8:	4c25      	ldr	r4, [pc, #148]	@ (800a940 <__pow5mult+0xa8>)
 800a8aa:	3a01      	subs	r2, #1
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8b2:	f7ff fea7 	bl	800a604 <__multadd>
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	10ad      	asrs	r5, r5, #2
 800a8ba:	d03d      	beq.n	800a938 <__pow5mult+0xa0>
 800a8bc:	69fc      	ldr	r4, [r7, #28]
 800a8be:	b97c      	cbnz	r4, 800a8e0 <__pow5mult+0x48>
 800a8c0:	2010      	movs	r0, #16
 800a8c2:	f7ff fd87 	bl	800a3d4 <malloc>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	61f8      	str	r0, [r7, #28]
 800a8ca:	b928      	cbnz	r0, 800a8d8 <__pow5mult+0x40>
 800a8cc:	4b1d      	ldr	r3, [pc, #116]	@ (800a944 <__pow5mult+0xac>)
 800a8ce:	481e      	ldr	r0, [pc, #120]	@ (800a948 <__pow5mult+0xb0>)
 800a8d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a8d4:	f7fe febc 	bl	8009650 <__assert_func>
 800a8d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8dc:	6004      	str	r4, [r0, #0]
 800a8de:	60c4      	str	r4, [r0, #12]
 800a8e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a8e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8e8:	b94c      	cbnz	r4, 800a8fe <__pow5mult+0x66>
 800a8ea:	f240 2171 	movw	r1, #625	@ 0x271
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	f7ff ff1a 	bl	800a728 <__i2b>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	6003      	str	r3, [r0, #0]
 800a8fe:	f04f 0900 	mov.w	r9, #0
 800a902:	07eb      	lsls	r3, r5, #31
 800a904:	d50a      	bpl.n	800a91c <__pow5mult+0x84>
 800a906:	4631      	mov	r1, r6
 800a908:	4622      	mov	r2, r4
 800a90a:	4638      	mov	r0, r7
 800a90c:	f7ff ff22 	bl	800a754 <__multiply>
 800a910:	4631      	mov	r1, r6
 800a912:	4680      	mov	r8, r0
 800a914:	4638      	mov	r0, r7
 800a916:	f7ff fe53 	bl	800a5c0 <_Bfree>
 800a91a:	4646      	mov	r6, r8
 800a91c:	106d      	asrs	r5, r5, #1
 800a91e:	d00b      	beq.n	800a938 <__pow5mult+0xa0>
 800a920:	6820      	ldr	r0, [r4, #0]
 800a922:	b938      	cbnz	r0, 800a934 <__pow5mult+0x9c>
 800a924:	4622      	mov	r2, r4
 800a926:	4621      	mov	r1, r4
 800a928:	4638      	mov	r0, r7
 800a92a:	f7ff ff13 	bl	800a754 <__multiply>
 800a92e:	6020      	str	r0, [r4, #0]
 800a930:	f8c0 9000 	str.w	r9, [r0]
 800a934:	4604      	mov	r4, r0
 800a936:	e7e4      	b.n	800a902 <__pow5mult+0x6a>
 800a938:	4630      	mov	r0, r6
 800a93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a93e:	bf00      	nop
 800a940:	0800bee8 	.word	0x0800bee8
 800a944:	0800bd50 	.word	0x0800bd50
 800a948:	0800be73 	.word	0x0800be73

0800a94c <__lshift>:
 800a94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a950:	460c      	mov	r4, r1
 800a952:	6849      	ldr	r1, [r1, #4]
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a95a:	68a3      	ldr	r3, [r4, #8]
 800a95c:	4607      	mov	r7, r0
 800a95e:	4691      	mov	r9, r2
 800a960:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a964:	f108 0601 	add.w	r6, r8, #1
 800a968:	42b3      	cmp	r3, r6
 800a96a:	db0b      	blt.n	800a984 <__lshift+0x38>
 800a96c:	4638      	mov	r0, r7
 800a96e:	f7ff fde7 	bl	800a540 <_Balloc>
 800a972:	4605      	mov	r5, r0
 800a974:	b948      	cbnz	r0, 800a98a <__lshift+0x3e>
 800a976:	4602      	mov	r2, r0
 800a978:	4b28      	ldr	r3, [pc, #160]	@ (800aa1c <__lshift+0xd0>)
 800a97a:	4829      	ldr	r0, [pc, #164]	@ (800aa20 <__lshift+0xd4>)
 800a97c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a980:	f7fe fe66 	bl	8009650 <__assert_func>
 800a984:	3101      	adds	r1, #1
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	e7ee      	b.n	800a968 <__lshift+0x1c>
 800a98a:	2300      	movs	r3, #0
 800a98c:	f100 0114 	add.w	r1, r0, #20
 800a990:	f100 0210 	add.w	r2, r0, #16
 800a994:	4618      	mov	r0, r3
 800a996:	4553      	cmp	r3, sl
 800a998:	db33      	blt.n	800aa02 <__lshift+0xb6>
 800a99a:	6920      	ldr	r0, [r4, #16]
 800a99c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9a0:	f104 0314 	add.w	r3, r4, #20
 800a9a4:	f019 091f 	ands.w	r9, r9, #31
 800a9a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9b0:	d02b      	beq.n	800aa0a <__lshift+0xbe>
 800a9b2:	f1c9 0e20 	rsb	lr, r9, #32
 800a9b6:	468a      	mov	sl, r1
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	6818      	ldr	r0, [r3, #0]
 800a9bc:	fa00 f009 	lsl.w	r0, r0, r9
 800a9c0:	4310      	orrs	r0, r2
 800a9c2:	f84a 0b04 	str.w	r0, [sl], #4
 800a9c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ca:	459c      	cmp	ip, r3
 800a9cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9d0:	d8f3      	bhi.n	800a9ba <__lshift+0x6e>
 800a9d2:	ebac 0304 	sub.w	r3, ip, r4
 800a9d6:	3b15      	subs	r3, #21
 800a9d8:	f023 0303 	bic.w	r3, r3, #3
 800a9dc:	3304      	adds	r3, #4
 800a9de:	f104 0015 	add.w	r0, r4, #21
 800a9e2:	4560      	cmp	r0, ip
 800a9e4:	bf88      	it	hi
 800a9e6:	2304      	movhi	r3, #4
 800a9e8:	50ca      	str	r2, [r1, r3]
 800a9ea:	b10a      	cbz	r2, 800a9f0 <__lshift+0xa4>
 800a9ec:	f108 0602 	add.w	r6, r8, #2
 800a9f0:	3e01      	subs	r6, #1
 800a9f2:	4638      	mov	r0, r7
 800a9f4:	612e      	str	r6, [r5, #16]
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	f7ff fde2 	bl	800a5c0 <_Bfree>
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa02:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa06:	3301      	adds	r3, #1
 800aa08:	e7c5      	b.n	800a996 <__lshift+0x4a>
 800aa0a:	3904      	subs	r1, #4
 800aa0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa10:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa14:	459c      	cmp	ip, r3
 800aa16:	d8f9      	bhi.n	800aa0c <__lshift+0xc0>
 800aa18:	e7ea      	b.n	800a9f0 <__lshift+0xa4>
 800aa1a:	bf00      	nop
 800aa1c:	0800be62 	.word	0x0800be62
 800aa20:	0800be73 	.word	0x0800be73

0800aa24 <__mcmp>:
 800aa24:	690a      	ldr	r2, [r1, #16]
 800aa26:	4603      	mov	r3, r0
 800aa28:	6900      	ldr	r0, [r0, #16]
 800aa2a:	1a80      	subs	r0, r0, r2
 800aa2c:	b530      	push	{r4, r5, lr}
 800aa2e:	d10e      	bne.n	800aa4e <__mcmp+0x2a>
 800aa30:	3314      	adds	r3, #20
 800aa32:	3114      	adds	r1, #20
 800aa34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa44:	4295      	cmp	r5, r2
 800aa46:	d003      	beq.n	800aa50 <__mcmp+0x2c>
 800aa48:	d205      	bcs.n	800aa56 <__mcmp+0x32>
 800aa4a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4e:	bd30      	pop	{r4, r5, pc}
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	d3f3      	bcc.n	800aa3c <__mcmp+0x18>
 800aa54:	e7fb      	b.n	800aa4e <__mcmp+0x2a>
 800aa56:	2001      	movs	r0, #1
 800aa58:	e7f9      	b.n	800aa4e <__mcmp+0x2a>
	...

0800aa5c <__mdiff>:
 800aa5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa60:	4689      	mov	r9, r1
 800aa62:	4606      	mov	r6, r0
 800aa64:	4611      	mov	r1, r2
 800aa66:	4648      	mov	r0, r9
 800aa68:	4614      	mov	r4, r2
 800aa6a:	f7ff ffdb 	bl	800aa24 <__mcmp>
 800aa6e:	1e05      	subs	r5, r0, #0
 800aa70:	d112      	bne.n	800aa98 <__mdiff+0x3c>
 800aa72:	4629      	mov	r1, r5
 800aa74:	4630      	mov	r0, r6
 800aa76:	f7ff fd63 	bl	800a540 <_Balloc>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	b928      	cbnz	r0, 800aa8a <__mdiff+0x2e>
 800aa7e:	4b3f      	ldr	r3, [pc, #252]	@ (800ab7c <__mdiff+0x120>)
 800aa80:	f240 2137 	movw	r1, #567	@ 0x237
 800aa84:	483e      	ldr	r0, [pc, #248]	@ (800ab80 <__mdiff+0x124>)
 800aa86:	f7fe fde3 	bl	8009650 <__assert_func>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa90:	4610      	mov	r0, r2
 800aa92:	b003      	add	sp, #12
 800aa94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa98:	bfbc      	itt	lt
 800aa9a:	464b      	movlt	r3, r9
 800aa9c:	46a1      	movlt	r9, r4
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aaa4:	bfba      	itte	lt
 800aaa6:	461c      	movlt	r4, r3
 800aaa8:	2501      	movlt	r5, #1
 800aaaa:	2500      	movge	r5, #0
 800aaac:	f7ff fd48 	bl	800a540 <_Balloc>
 800aab0:	4602      	mov	r2, r0
 800aab2:	b918      	cbnz	r0, 800aabc <__mdiff+0x60>
 800aab4:	4b31      	ldr	r3, [pc, #196]	@ (800ab7c <__mdiff+0x120>)
 800aab6:	f240 2145 	movw	r1, #581	@ 0x245
 800aaba:	e7e3      	b.n	800aa84 <__mdiff+0x28>
 800aabc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aac0:	6926      	ldr	r6, [r4, #16]
 800aac2:	60c5      	str	r5, [r0, #12]
 800aac4:	f109 0310 	add.w	r3, r9, #16
 800aac8:	f109 0514 	add.w	r5, r9, #20
 800aacc:	f104 0e14 	add.w	lr, r4, #20
 800aad0:	f100 0b14 	add.w	fp, r0, #20
 800aad4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aad8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	46d9      	mov	r9, fp
 800aae0:	f04f 0c00 	mov.w	ip, #0
 800aae4:	9b01      	ldr	r3, [sp, #4]
 800aae6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aaea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aaee:	9301      	str	r3, [sp, #4]
 800aaf0:	fa1f f38a 	uxth.w	r3, sl
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	b283      	uxth	r3, r0
 800aaf8:	1acb      	subs	r3, r1, r3
 800aafa:	0c00      	lsrs	r0, r0, #16
 800aafc:	4463      	add	r3, ip
 800aafe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ab02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ab0c:	4576      	cmp	r6, lr
 800ab0e:	f849 3b04 	str.w	r3, [r9], #4
 800ab12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab16:	d8e5      	bhi.n	800aae4 <__mdiff+0x88>
 800ab18:	1b33      	subs	r3, r6, r4
 800ab1a:	3b15      	subs	r3, #21
 800ab1c:	f023 0303 	bic.w	r3, r3, #3
 800ab20:	3415      	adds	r4, #21
 800ab22:	3304      	adds	r3, #4
 800ab24:	42a6      	cmp	r6, r4
 800ab26:	bf38      	it	cc
 800ab28:	2304      	movcc	r3, #4
 800ab2a:	441d      	add	r5, r3
 800ab2c:	445b      	add	r3, fp
 800ab2e:	461e      	mov	r6, r3
 800ab30:	462c      	mov	r4, r5
 800ab32:	4544      	cmp	r4, r8
 800ab34:	d30e      	bcc.n	800ab54 <__mdiff+0xf8>
 800ab36:	f108 0103 	add.w	r1, r8, #3
 800ab3a:	1b49      	subs	r1, r1, r5
 800ab3c:	f021 0103 	bic.w	r1, r1, #3
 800ab40:	3d03      	subs	r5, #3
 800ab42:	45a8      	cmp	r8, r5
 800ab44:	bf38      	it	cc
 800ab46:	2100      	movcc	r1, #0
 800ab48:	440b      	add	r3, r1
 800ab4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab4e:	b191      	cbz	r1, 800ab76 <__mdiff+0x11a>
 800ab50:	6117      	str	r7, [r2, #16]
 800ab52:	e79d      	b.n	800aa90 <__mdiff+0x34>
 800ab54:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab58:	46e6      	mov	lr, ip
 800ab5a:	0c08      	lsrs	r0, r1, #16
 800ab5c:	fa1c fc81 	uxtah	ip, ip, r1
 800ab60:	4471      	add	r1, lr
 800ab62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab66:	b289      	uxth	r1, r1
 800ab68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab6c:	f846 1b04 	str.w	r1, [r6], #4
 800ab70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab74:	e7dd      	b.n	800ab32 <__mdiff+0xd6>
 800ab76:	3f01      	subs	r7, #1
 800ab78:	e7e7      	b.n	800ab4a <__mdiff+0xee>
 800ab7a:	bf00      	nop
 800ab7c:	0800be62 	.word	0x0800be62
 800ab80:	0800be73 	.word	0x0800be73

0800ab84 <__d2b>:
 800ab84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab88:	460f      	mov	r7, r1
 800ab8a:	2101      	movs	r1, #1
 800ab8c:	ec59 8b10 	vmov	r8, r9, d0
 800ab90:	4616      	mov	r6, r2
 800ab92:	f7ff fcd5 	bl	800a540 <_Balloc>
 800ab96:	4604      	mov	r4, r0
 800ab98:	b930      	cbnz	r0, 800aba8 <__d2b+0x24>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	4b23      	ldr	r3, [pc, #140]	@ (800ac2c <__d2b+0xa8>)
 800ab9e:	4824      	ldr	r0, [pc, #144]	@ (800ac30 <__d2b+0xac>)
 800aba0:	f240 310f 	movw	r1, #783	@ 0x30f
 800aba4:	f7fe fd54 	bl	8009650 <__assert_func>
 800aba8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abb0:	b10d      	cbz	r5, 800abb6 <__d2b+0x32>
 800abb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abb6:	9301      	str	r3, [sp, #4]
 800abb8:	f1b8 0300 	subs.w	r3, r8, #0
 800abbc:	d023      	beq.n	800ac06 <__d2b+0x82>
 800abbe:	4668      	mov	r0, sp
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	f7ff fd84 	bl	800a6ce <__lo0bits>
 800abc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abca:	b1d0      	cbz	r0, 800ac02 <__d2b+0x7e>
 800abcc:	f1c0 0320 	rsb	r3, r0, #32
 800abd0:	fa02 f303 	lsl.w	r3, r2, r3
 800abd4:	430b      	orrs	r3, r1
 800abd6:	40c2      	lsrs	r2, r0
 800abd8:	6163      	str	r3, [r4, #20]
 800abda:	9201      	str	r2, [sp, #4]
 800abdc:	9b01      	ldr	r3, [sp, #4]
 800abde:	61a3      	str	r3, [r4, #24]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	bf0c      	ite	eq
 800abe4:	2201      	moveq	r2, #1
 800abe6:	2202      	movne	r2, #2
 800abe8:	6122      	str	r2, [r4, #16]
 800abea:	b1a5      	cbz	r5, 800ac16 <__d2b+0x92>
 800abec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800abf0:	4405      	add	r5, r0
 800abf2:	603d      	str	r5, [r7, #0]
 800abf4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800abf8:	6030      	str	r0, [r6, #0]
 800abfa:	4620      	mov	r0, r4
 800abfc:	b003      	add	sp, #12
 800abfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac02:	6161      	str	r1, [r4, #20]
 800ac04:	e7ea      	b.n	800abdc <__d2b+0x58>
 800ac06:	a801      	add	r0, sp, #4
 800ac08:	f7ff fd61 	bl	800a6ce <__lo0bits>
 800ac0c:	9b01      	ldr	r3, [sp, #4]
 800ac0e:	6163      	str	r3, [r4, #20]
 800ac10:	3020      	adds	r0, #32
 800ac12:	2201      	movs	r2, #1
 800ac14:	e7e8      	b.n	800abe8 <__d2b+0x64>
 800ac16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ac1e:	6038      	str	r0, [r7, #0]
 800ac20:	6918      	ldr	r0, [r3, #16]
 800ac22:	f7ff fd35 	bl	800a690 <__hi0bits>
 800ac26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac2a:	e7e5      	b.n	800abf8 <__d2b+0x74>
 800ac2c:	0800be62 	.word	0x0800be62
 800ac30:	0800be73 	.word	0x0800be73

0800ac34 <__ssputs_r>:
 800ac34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac38:	688e      	ldr	r6, [r1, #8]
 800ac3a:	461f      	mov	r7, r3
 800ac3c:	42be      	cmp	r6, r7
 800ac3e:	680b      	ldr	r3, [r1, #0]
 800ac40:	4682      	mov	sl, r0
 800ac42:	460c      	mov	r4, r1
 800ac44:	4690      	mov	r8, r2
 800ac46:	d82d      	bhi.n	800aca4 <__ssputs_r+0x70>
 800ac48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac50:	d026      	beq.n	800aca0 <__ssputs_r+0x6c>
 800ac52:	6965      	ldr	r5, [r4, #20]
 800ac54:	6909      	ldr	r1, [r1, #16]
 800ac56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac5a:	eba3 0901 	sub.w	r9, r3, r1
 800ac5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac62:	1c7b      	adds	r3, r7, #1
 800ac64:	444b      	add	r3, r9
 800ac66:	106d      	asrs	r5, r5, #1
 800ac68:	429d      	cmp	r5, r3
 800ac6a:	bf38      	it	cc
 800ac6c:	461d      	movcc	r5, r3
 800ac6e:	0553      	lsls	r3, r2, #21
 800ac70:	d527      	bpl.n	800acc2 <__ssputs_r+0x8e>
 800ac72:	4629      	mov	r1, r5
 800ac74:	f7ff fbd8 	bl	800a428 <_malloc_r>
 800ac78:	4606      	mov	r6, r0
 800ac7a:	b360      	cbz	r0, 800acd6 <__ssputs_r+0xa2>
 800ac7c:	6921      	ldr	r1, [r4, #16]
 800ac7e:	464a      	mov	r2, r9
 800ac80:	f7fe fcd7 	bl	8009632 <memcpy>
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac8e:	81a3      	strh	r3, [r4, #12]
 800ac90:	6126      	str	r6, [r4, #16]
 800ac92:	6165      	str	r5, [r4, #20]
 800ac94:	444e      	add	r6, r9
 800ac96:	eba5 0509 	sub.w	r5, r5, r9
 800ac9a:	6026      	str	r6, [r4, #0]
 800ac9c:	60a5      	str	r5, [r4, #8]
 800ac9e:	463e      	mov	r6, r7
 800aca0:	42be      	cmp	r6, r7
 800aca2:	d900      	bls.n	800aca6 <__ssputs_r+0x72>
 800aca4:	463e      	mov	r6, r7
 800aca6:	6820      	ldr	r0, [r4, #0]
 800aca8:	4632      	mov	r2, r6
 800acaa:	4641      	mov	r1, r8
 800acac:	f000 fb7c 	bl	800b3a8 <memmove>
 800acb0:	68a3      	ldr	r3, [r4, #8]
 800acb2:	1b9b      	subs	r3, r3, r6
 800acb4:	60a3      	str	r3, [r4, #8]
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	4433      	add	r3, r6
 800acba:	6023      	str	r3, [r4, #0]
 800acbc:	2000      	movs	r0, #0
 800acbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc2:	462a      	mov	r2, r5
 800acc4:	f000 fbe9 	bl	800b49a <_realloc_r>
 800acc8:	4606      	mov	r6, r0
 800acca:	2800      	cmp	r0, #0
 800accc:	d1e0      	bne.n	800ac90 <__ssputs_r+0x5c>
 800acce:	6921      	ldr	r1, [r4, #16]
 800acd0:	4650      	mov	r0, sl
 800acd2:	f7ff fb35 	bl	800a340 <_free_r>
 800acd6:	230c      	movs	r3, #12
 800acd8:	f8ca 3000 	str.w	r3, [sl]
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ace2:	81a3      	strh	r3, [r4, #12]
 800ace4:	f04f 30ff 	mov.w	r0, #4294967295
 800ace8:	e7e9      	b.n	800acbe <__ssputs_r+0x8a>
	...

0800acec <_svfiprintf_r>:
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	4698      	mov	r8, r3
 800acf2:	898b      	ldrh	r3, [r1, #12]
 800acf4:	061b      	lsls	r3, r3, #24
 800acf6:	b09d      	sub	sp, #116	@ 0x74
 800acf8:	4607      	mov	r7, r0
 800acfa:	460d      	mov	r5, r1
 800acfc:	4614      	mov	r4, r2
 800acfe:	d510      	bpl.n	800ad22 <_svfiprintf_r+0x36>
 800ad00:	690b      	ldr	r3, [r1, #16]
 800ad02:	b973      	cbnz	r3, 800ad22 <_svfiprintf_r+0x36>
 800ad04:	2140      	movs	r1, #64	@ 0x40
 800ad06:	f7ff fb8f 	bl	800a428 <_malloc_r>
 800ad0a:	6028      	str	r0, [r5, #0]
 800ad0c:	6128      	str	r0, [r5, #16]
 800ad0e:	b930      	cbnz	r0, 800ad1e <_svfiprintf_r+0x32>
 800ad10:	230c      	movs	r3, #12
 800ad12:	603b      	str	r3, [r7, #0]
 800ad14:	f04f 30ff 	mov.w	r0, #4294967295
 800ad18:	b01d      	add	sp, #116	@ 0x74
 800ad1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1e:	2340      	movs	r3, #64	@ 0x40
 800ad20:	616b      	str	r3, [r5, #20]
 800ad22:	2300      	movs	r3, #0
 800ad24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad26:	2320      	movs	r3, #32
 800ad28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad30:	2330      	movs	r3, #48	@ 0x30
 800ad32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aed0 <_svfiprintf_r+0x1e4>
 800ad36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad3a:	f04f 0901 	mov.w	r9, #1
 800ad3e:	4623      	mov	r3, r4
 800ad40:	469a      	mov	sl, r3
 800ad42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad46:	b10a      	cbz	r2, 800ad4c <_svfiprintf_r+0x60>
 800ad48:	2a25      	cmp	r2, #37	@ 0x25
 800ad4a:	d1f9      	bne.n	800ad40 <_svfiprintf_r+0x54>
 800ad4c:	ebba 0b04 	subs.w	fp, sl, r4
 800ad50:	d00b      	beq.n	800ad6a <_svfiprintf_r+0x7e>
 800ad52:	465b      	mov	r3, fp
 800ad54:	4622      	mov	r2, r4
 800ad56:	4629      	mov	r1, r5
 800ad58:	4638      	mov	r0, r7
 800ad5a:	f7ff ff6b 	bl	800ac34 <__ssputs_r>
 800ad5e:	3001      	adds	r0, #1
 800ad60:	f000 80a7 	beq.w	800aeb2 <_svfiprintf_r+0x1c6>
 800ad64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad66:	445a      	add	r2, fp
 800ad68:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f000 809f 	beq.w	800aeb2 <_svfiprintf_r+0x1c6>
 800ad74:	2300      	movs	r3, #0
 800ad76:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad7e:	f10a 0a01 	add.w	sl, sl, #1
 800ad82:	9304      	str	r3, [sp, #16]
 800ad84:	9307      	str	r3, [sp, #28]
 800ad86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad8a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad8c:	4654      	mov	r4, sl
 800ad8e:	2205      	movs	r2, #5
 800ad90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad94:	484e      	ldr	r0, [pc, #312]	@ (800aed0 <_svfiprintf_r+0x1e4>)
 800ad96:	f7f5 fa1b 	bl	80001d0 <memchr>
 800ad9a:	9a04      	ldr	r2, [sp, #16]
 800ad9c:	b9d8      	cbnz	r0, 800add6 <_svfiprintf_r+0xea>
 800ad9e:	06d0      	lsls	r0, r2, #27
 800ada0:	bf44      	itt	mi
 800ada2:	2320      	movmi	r3, #32
 800ada4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ada8:	0711      	lsls	r1, r2, #28
 800adaa:	bf44      	itt	mi
 800adac:	232b      	movmi	r3, #43	@ 0x2b
 800adae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adb2:	f89a 3000 	ldrb.w	r3, [sl]
 800adb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800adb8:	d015      	beq.n	800ade6 <_svfiprintf_r+0xfa>
 800adba:	9a07      	ldr	r2, [sp, #28]
 800adbc:	4654      	mov	r4, sl
 800adbe:	2000      	movs	r0, #0
 800adc0:	f04f 0c0a 	mov.w	ip, #10
 800adc4:	4621      	mov	r1, r4
 800adc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adca:	3b30      	subs	r3, #48	@ 0x30
 800adcc:	2b09      	cmp	r3, #9
 800adce:	d94b      	bls.n	800ae68 <_svfiprintf_r+0x17c>
 800add0:	b1b0      	cbz	r0, 800ae00 <_svfiprintf_r+0x114>
 800add2:	9207      	str	r2, [sp, #28]
 800add4:	e014      	b.n	800ae00 <_svfiprintf_r+0x114>
 800add6:	eba0 0308 	sub.w	r3, r0, r8
 800adda:	fa09 f303 	lsl.w	r3, r9, r3
 800adde:	4313      	orrs	r3, r2
 800ade0:	9304      	str	r3, [sp, #16]
 800ade2:	46a2      	mov	sl, r4
 800ade4:	e7d2      	b.n	800ad8c <_svfiprintf_r+0xa0>
 800ade6:	9b03      	ldr	r3, [sp, #12]
 800ade8:	1d19      	adds	r1, r3, #4
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	9103      	str	r1, [sp, #12]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	bfbb      	ittet	lt
 800adf2:	425b      	neglt	r3, r3
 800adf4:	f042 0202 	orrlt.w	r2, r2, #2
 800adf8:	9307      	strge	r3, [sp, #28]
 800adfa:	9307      	strlt	r3, [sp, #28]
 800adfc:	bfb8      	it	lt
 800adfe:	9204      	strlt	r2, [sp, #16]
 800ae00:	7823      	ldrb	r3, [r4, #0]
 800ae02:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae04:	d10a      	bne.n	800ae1c <_svfiprintf_r+0x130>
 800ae06:	7863      	ldrb	r3, [r4, #1]
 800ae08:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae0a:	d132      	bne.n	800ae72 <_svfiprintf_r+0x186>
 800ae0c:	9b03      	ldr	r3, [sp, #12]
 800ae0e:	1d1a      	adds	r2, r3, #4
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	9203      	str	r2, [sp, #12]
 800ae14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae18:	3402      	adds	r4, #2
 800ae1a:	9305      	str	r3, [sp, #20]
 800ae1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aee0 <_svfiprintf_r+0x1f4>
 800ae20:	7821      	ldrb	r1, [r4, #0]
 800ae22:	2203      	movs	r2, #3
 800ae24:	4650      	mov	r0, sl
 800ae26:	f7f5 f9d3 	bl	80001d0 <memchr>
 800ae2a:	b138      	cbz	r0, 800ae3c <_svfiprintf_r+0x150>
 800ae2c:	9b04      	ldr	r3, [sp, #16]
 800ae2e:	eba0 000a 	sub.w	r0, r0, sl
 800ae32:	2240      	movs	r2, #64	@ 0x40
 800ae34:	4082      	lsls	r2, r0
 800ae36:	4313      	orrs	r3, r2
 800ae38:	3401      	adds	r4, #1
 800ae3a:	9304      	str	r3, [sp, #16]
 800ae3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae40:	4824      	ldr	r0, [pc, #144]	@ (800aed4 <_svfiprintf_r+0x1e8>)
 800ae42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae46:	2206      	movs	r2, #6
 800ae48:	f7f5 f9c2 	bl	80001d0 <memchr>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d036      	beq.n	800aebe <_svfiprintf_r+0x1d2>
 800ae50:	4b21      	ldr	r3, [pc, #132]	@ (800aed8 <_svfiprintf_r+0x1ec>)
 800ae52:	bb1b      	cbnz	r3, 800ae9c <_svfiprintf_r+0x1b0>
 800ae54:	9b03      	ldr	r3, [sp, #12]
 800ae56:	3307      	adds	r3, #7
 800ae58:	f023 0307 	bic.w	r3, r3, #7
 800ae5c:	3308      	adds	r3, #8
 800ae5e:	9303      	str	r3, [sp, #12]
 800ae60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae62:	4433      	add	r3, r6
 800ae64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae66:	e76a      	b.n	800ad3e <_svfiprintf_r+0x52>
 800ae68:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	2001      	movs	r0, #1
 800ae70:	e7a8      	b.n	800adc4 <_svfiprintf_r+0xd8>
 800ae72:	2300      	movs	r3, #0
 800ae74:	3401      	adds	r4, #1
 800ae76:	9305      	str	r3, [sp, #20]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	f04f 0c0a 	mov.w	ip, #10
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae84:	3a30      	subs	r2, #48	@ 0x30
 800ae86:	2a09      	cmp	r2, #9
 800ae88:	d903      	bls.n	800ae92 <_svfiprintf_r+0x1a6>
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d0c6      	beq.n	800ae1c <_svfiprintf_r+0x130>
 800ae8e:	9105      	str	r1, [sp, #20]
 800ae90:	e7c4      	b.n	800ae1c <_svfiprintf_r+0x130>
 800ae92:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae96:	4604      	mov	r4, r0
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e7f0      	b.n	800ae7e <_svfiprintf_r+0x192>
 800ae9c:	ab03      	add	r3, sp, #12
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	462a      	mov	r2, r5
 800aea2:	4b0e      	ldr	r3, [pc, #56]	@ (800aedc <_svfiprintf_r+0x1f0>)
 800aea4:	a904      	add	r1, sp, #16
 800aea6:	4638      	mov	r0, r7
 800aea8:	f7fd fccc 	bl	8008844 <_printf_float>
 800aeac:	1c42      	adds	r2, r0, #1
 800aeae:	4606      	mov	r6, r0
 800aeb0:	d1d6      	bne.n	800ae60 <_svfiprintf_r+0x174>
 800aeb2:	89ab      	ldrh	r3, [r5, #12]
 800aeb4:	065b      	lsls	r3, r3, #25
 800aeb6:	f53f af2d 	bmi.w	800ad14 <_svfiprintf_r+0x28>
 800aeba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aebc:	e72c      	b.n	800ad18 <_svfiprintf_r+0x2c>
 800aebe:	ab03      	add	r3, sp, #12
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	462a      	mov	r2, r5
 800aec4:	4b05      	ldr	r3, [pc, #20]	@ (800aedc <_svfiprintf_r+0x1f0>)
 800aec6:	a904      	add	r1, sp, #16
 800aec8:	4638      	mov	r0, r7
 800aeca:	f7fd ff53 	bl	8008d74 <_printf_i>
 800aece:	e7ed      	b.n	800aeac <_svfiprintf_r+0x1c0>
 800aed0:	0800becc 	.word	0x0800becc
 800aed4:	0800bed6 	.word	0x0800bed6
 800aed8:	08008845 	.word	0x08008845
 800aedc:	0800ac35 	.word	0x0800ac35
 800aee0:	0800bed2 	.word	0x0800bed2

0800aee4 <__sfputc_r>:
 800aee4:	6893      	ldr	r3, [r2, #8]
 800aee6:	3b01      	subs	r3, #1
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	b410      	push	{r4}
 800aeec:	6093      	str	r3, [r2, #8]
 800aeee:	da08      	bge.n	800af02 <__sfputc_r+0x1e>
 800aef0:	6994      	ldr	r4, [r2, #24]
 800aef2:	42a3      	cmp	r3, r4
 800aef4:	db01      	blt.n	800aefa <__sfputc_r+0x16>
 800aef6:	290a      	cmp	r1, #10
 800aef8:	d103      	bne.n	800af02 <__sfputc_r+0x1e>
 800aefa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aefe:	f7fe b9ee 	b.w	80092de <__swbuf_r>
 800af02:	6813      	ldr	r3, [r2, #0]
 800af04:	1c58      	adds	r0, r3, #1
 800af06:	6010      	str	r0, [r2, #0]
 800af08:	7019      	strb	r1, [r3, #0]
 800af0a:	4608      	mov	r0, r1
 800af0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <__sfputs_r>:
 800af12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af14:	4606      	mov	r6, r0
 800af16:	460f      	mov	r7, r1
 800af18:	4614      	mov	r4, r2
 800af1a:	18d5      	adds	r5, r2, r3
 800af1c:	42ac      	cmp	r4, r5
 800af1e:	d101      	bne.n	800af24 <__sfputs_r+0x12>
 800af20:	2000      	movs	r0, #0
 800af22:	e007      	b.n	800af34 <__sfputs_r+0x22>
 800af24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af28:	463a      	mov	r2, r7
 800af2a:	4630      	mov	r0, r6
 800af2c:	f7ff ffda 	bl	800aee4 <__sfputc_r>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	d1f3      	bne.n	800af1c <__sfputs_r+0xa>
 800af34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af38 <_vfiprintf_r>:
 800af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	460d      	mov	r5, r1
 800af3e:	b09d      	sub	sp, #116	@ 0x74
 800af40:	4614      	mov	r4, r2
 800af42:	4698      	mov	r8, r3
 800af44:	4606      	mov	r6, r0
 800af46:	b118      	cbz	r0, 800af50 <_vfiprintf_r+0x18>
 800af48:	6a03      	ldr	r3, [r0, #32]
 800af4a:	b90b      	cbnz	r3, 800af50 <_vfiprintf_r+0x18>
 800af4c:	f7fe f8bc 	bl	80090c8 <__sinit>
 800af50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af52:	07d9      	lsls	r1, r3, #31
 800af54:	d405      	bmi.n	800af62 <_vfiprintf_r+0x2a>
 800af56:	89ab      	ldrh	r3, [r5, #12]
 800af58:	059a      	lsls	r2, r3, #22
 800af5a:	d402      	bmi.n	800af62 <_vfiprintf_r+0x2a>
 800af5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af5e:	f7fe fb66 	bl	800962e <__retarget_lock_acquire_recursive>
 800af62:	89ab      	ldrh	r3, [r5, #12]
 800af64:	071b      	lsls	r3, r3, #28
 800af66:	d501      	bpl.n	800af6c <_vfiprintf_r+0x34>
 800af68:	692b      	ldr	r3, [r5, #16]
 800af6a:	b99b      	cbnz	r3, 800af94 <_vfiprintf_r+0x5c>
 800af6c:	4629      	mov	r1, r5
 800af6e:	4630      	mov	r0, r6
 800af70:	f7fe f9f4 	bl	800935c <__swsetup_r>
 800af74:	b170      	cbz	r0, 800af94 <_vfiprintf_r+0x5c>
 800af76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af78:	07dc      	lsls	r4, r3, #31
 800af7a:	d504      	bpl.n	800af86 <_vfiprintf_r+0x4e>
 800af7c:	f04f 30ff 	mov.w	r0, #4294967295
 800af80:	b01d      	add	sp, #116	@ 0x74
 800af82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af86:	89ab      	ldrh	r3, [r5, #12]
 800af88:	0598      	lsls	r0, r3, #22
 800af8a:	d4f7      	bmi.n	800af7c <_vfiprintf_r+0x44>
 800af8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af8e:	f7fe fb4f 	bl	8009630 <__retarget_lock_release_recursive>
 800af92:	e7f3      	b.n	800af7c <_vfiprintf_r+0x44>
 800af94:	2300      	movs	r3, #0
 800af96:	9309      	str	r3, [sp, #36]	@ 0x24
 800af98:	2320      	movs	r3, #32
 800af9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800afa2:	2330      	movs	r3, #48	@ 0x30
 800afa4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b154 <_vfiprintf_r+0x21c>
 800afa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afac:	f04f 0901 	mov.w	r9, #1
 800afb0:	4623      	mov	r3, r4
 800afb2:	469a      	mov	sl, r3
 800afb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afb8:	b10a      	cbz	r2, 800afbe <_vfiprintf_r+0x86>
 800afba:	2a25      	cmp	r2, #37	@ 0x25
 800afbc:	d1f9      	bne.n	800afb2 <_vfiprintf_r+0x7a>
 800afbe:	ebba 0b04 	subs.w	fp, sl, r4
 800afc2:	d00b      	beq.n	800afdc <_vfiprintf_r+0xa4>
 800afc4:	465b      	mov	r3, fp
 800afc6:	4622      	mov	r2, r4
 800afc8:	4629      	mov	r1, r5
 800afca:	4630      	mov	r0, r6
 800afcc:	f7ff ffa1 	bl	800af12 <__sfputs_r>
 800afd0:	3001      	adds	r0, #1
 800afd2:	f000 80a7 	beq.w	800b124 <_vfiprintf_r+0x1ec>
 800afd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afd8:	445a      	add	r2, fp
 800afda:	9209      	str	r2, [sp, #36]	@ 0x24
 800afdc:	f89a 3000 	ldrb.w	r3, [sl]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 809f 	beq.w	800b124 <_vfiprintf_r+0x1ec>
 800afe6:	2300      	movs	r3, #0
 800afe8:	f04f 32ff 	mov.w	r2, #4294967295
 800afec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aff0:	f10a 0a01 	add.w	sl, sl, #1
 800aff4:	9304      	str	r3, [sp, #16]
 800aff6:	9307      	str	r3, [sp, #28]
 800aff8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800affc:	931a      	str	r3, [sp, #104]	@ 0x68
 800affe:	4654      	mov	r4, sl
 800b000:	2205      	movs	r2, #5
 800b002:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b006:	4853      	ldr	r0, [pc, #332]	@ (800b154 <_vfiprintf_r+0x21c>)
 800b008:	f7f5 f8e2 	bl	80001d0 <memchr>
 800b00c:	9a04      	ldr	r2, [sp, #16]
 800b00e:	b9d8      	cbnz	r0, 800b048 <_vfiprintf_r+0x110>
 800b010:	06d1      	lsls	r1, r2, #27
 800b012:	bf44      	itt	mi
 800b014:	2320      	movmi	r3, #32
 800b016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b01a:	0713      	lsls	r3, r2, #28
 800b01c:	bf44      	itt	mi
 800b01e:	232b      	movmi	r3, #43	@ 0x2b
 800b020:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b024:	f89a 3000 	ldrb.w	r3, [sl]
 800b028:	2b2a      	cmp	r3, #42	@ 0x2a
 800b02a:	d015      	beq.n	800b058 <_vfiprintf_r+0x120>
 800b02c:	9a07      	ldr	r2, [sp, #28]
 800b02e:	4654      	mov	r4, sl
 800b030:	2000      	movs	r0, #0
 800b032:	f04f 0c0a 	mov.w	ip, #10
 800b036:	4621      	mov	r1, r4
 800b038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b03c:	3b30      	subs	r3, #48	@ 0x30
 800b03e:	2b09      	cmp	r3, #9
 800b040:	d94b      	bls.n	800b0da <_vfiprintf_r+0x1a2>
 800b042:	b1b0      	cbz	r0, 800b072 <_vfiprintf_r+0x13a>
 800b044:	9207      	str	r2, [sp, #28]
 800b046:	e014      	b.n	800b072 <_vfiprintf_r+0x13a>
 800b048:	eba0 0308 	sub.w	r3, r0, r8
 800b04c:	fa09 f303 	lsl.w	r3, r9, r3
 800b050:	4313      	orrs	r3, r2
 800b052:	9304      	str	r3, [sp, #16]
 800b054:	46a2      	mov	sl, r4
 800b056:	e7d2      	b.n	800affe <_vfiprintf_r+0xc6>
 800b058:	9b03      	ldr	r3, [sp, #12]
 800b05a:	1d19      	adds	r1, r3, #4
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	9103      	str	r1, [sp, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	bfbb      	ittet	lt
 800b064:	425b      	neglt	r3, r3
 800b066:	f042 0202 	orrlt.w	r2, r2, #2
 800b06a:	9307      	strge	r3, [sp, #28]
 800b06c:	9307      	strlt	r3, [sp, #28]
 800b06e:	bfb8      	it	lt
 800b070:	9204      	strlt	r2, [sp, #16]
 800b072:	7823      	ldrb	r3, [r4, #0]
 800b074:	2b2e      	cmp	r3, #46	@ 0x2e
 800b076:	d10a      	bne.n	800b08e <_vfiprintf_r+0x156>
 800b078:	7863      	ldrb	r3, [r4, #1]
 800b07a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b07c:	d132      	bne.n	800b0e4 <_vfiprintf_r+0x1ac>
 800b07e:	9b03      	ldr	r3, [sp, #12]
 800b080:	1d1a      	adds	r2, r3, #4
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	9203      	str	r2, [sp, #12]
 800b086:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b08a:	3402      	adds	r4, #2
 800b08c:	9305      	str	r3, [sp, #20]
 800b08e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b164 <_vfiprintf_r+0x22c>
 800b092:	7821      	ldrb	r1, [r4, #0]
 800b094:	2203      	movs	r2, #3
 800b096:	4650      	mov	r0, sl
 800b098:	f7f5 f89a 	bl	80001d0 <memchr>
 800b09c:	b138      	cbz	r0, 800b0ae <_vfiprintf_r+0x176>
 800b09e:	9b04      	ldr	r3, [sp, #16]
 800b0a0:	eba0 000a 	sub.w	r0, r0, sl
 800b0a4:	2240      	movs	r2, #64	@ 0x40
 800b0a6:	4082      	lsls	r2, r0
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	3401      	adds	r4, #1
 800b0ac:	9304      	str	r3, [sp, #16]
 800b0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b2:	4829      	ldr	r0, [pc, #164]	@ (800b158 <_vfiprintf_r+0x220>)
 800b0b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0b8:	2206      	movs	r2, #6
 800b0ba:	f7f5 f889 	bl	80001d0 <memchr>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d03f      	beq.n	800b142 <_vfiprintf_r+0x20a>
 800b0c2:	4b26      	ldr	r3, [pc, #152]	@ (800b15c <_vfiprintf_r+0x224>)
 800b0c4:	bb1b      	cbnz	r3, 800b10e <_vfiprintf_r+0x1d6>
 800b0c6:	9b03      	ldr	r3, [sp, #12]
 800b0c8:	3307      	adds	r3, #7
 800b0ca:	f023 0307 	bic.w	r3, r3, #7
 800b0ce:	3308      	adds	r3, #8
 800b0d0:	9303      	str	r3, [sp, #12]
 800b0d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0d4:	443b      	add	r3, r7
 800b0d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0d8:	e76a      	b.n	800afb0 <_vfiprintf_r+0x78>
 800b0da:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0de:	460c      	mov	r4, r1
 800b0e0:	2001      	movs	r0, #1
 800b0e2:	e7a8      	b.n	800b036 <_vfiprintf_r+0xfe>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	3401      	adds	r4, #1
 800b0e8:	9305      	str	r3, [sp, #20]
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	f04f 0c0a 	mov.w	ip, #10
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0f6:	3a30      	subs	r2, #48	@ 0x30
 800b0f8:	2a09      	cmp	r2, #9
 800b0fa:	d903      	bls.n	800b104 <_vfiprintf_r+0x1cc>
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d0c6      	beq.n	800b08e <_vfiprintf_r+0x156>
 800b100:	9105      	str	r1, [sp, #20]
 800b102:	e7c4      	b.n	800b08e <_vfiprintf_r+0x156>
 800b104:	fb0c 2101 	mla	r1, ip, r1, r2
 800b108:	4604      	mov	r4, r0
 800b10a:	2301      	movs	r3, #1
 800b10c:	e7f0      	b.n	800b0f0 <_vfiprintf_r+0x1b8>
 800b10e:	ab03      	add	r3, sp, #12
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	462a      	mov	r2, r5
 800b114:	4b12      	ldr	r3, [pc, #72]	@ (800b160 <_vfiprintf_r+0x228>)
 800b116:	a904      	add	r1, sp, #16
 800b118:	4630      	mov	r0, r6
 800b11a:	f7fd fb93 	bl	8008844 <_printf_float>
 800b11e:	4607      	mov	r7, r0
 800b120:	1c78      	adds	r0, r7, #1
 800b122:	d1d6      	bne.n	800b0d2 <_vfiprintf_r+0x19a>
 800b124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b126:	07d9      	lsls	r1, r3, #31
 800b128:	d405      	bmi.n	800b136 <_vfiprintf_r+0x1fe>
 800b12a:	89ab      	ldrh	r3, [r5, #12]
 800b12c:	059a      	lsls	r2, r3, #22
 800b12e:	d402      	bmi.n	800b136 <_vfiprintf_r+0x1fe>
 800b130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b132:	f7fe fa7d 	bl	8009630 <__retarget_lock_release_recursive>
 800b136:	89ab      	ldrh	r3, [r5, #12]
 800b138:	065b      	lsls	r3, r3, #25
 800b13a:	f53f af1f 	bmi.w	800af7c <_vfiprintf_r+0x44>
 800b13e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b140:	e71e      	b.n	800af80 <_vfiprintf_r+0x48>
 800b142:	ab03      	add	r3, sp, #12
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	462a      	mov	r2, r5
 800b148:	4b05      	ldr	r3, [pc, #20]	@ (800b160 <_vfiprintf_r+0x228>)
 800b14a:	a904      	add	r1, sp, #16
 800b14c:	4630      	mov	r0, r6
 800b14e:	f7fd fe11 	bl	8008d74 <_printf_i>
 800b152:	e7e4      	b.n	800b11e <_vfiprintf_r+0x1e6>
 800b154:	0800becc 	.word	0x0800becc
 800b158:	0800bed6 	.word	0x0800bed6
 800b15c:	08008845 	.word	0x08008845
 800b160:	0800af13 	.word	0x0800af13
 800b164:	0800bed2 	.word	0x0800bed2

0800b168 <__sflush_r>:
 800b168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b170:	0716      	lsls	r6, r2, #28
 800b172:	4605      	mov	r5, r0
 800b174:	460c      	mov	r4, r1
 800b176:	d454      	bmi.n	800b222 <__sflush_r+0xba>
 800b178:	684b      	ldr	r3, [r1, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	dc02      	bgt.n	800b184 <__sflush_r+0x1c>
 800b17e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b180:	2b00      	cmp	r3, #0
 800b182:	dd48      	ble.n	800b216 <__sflush_r+0xae>
 800b184:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b186:	2e00      	cmp	r6, #0
 800b188:	d045      	beq.n	800b216 <__sflush_r+0xae>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b190:	682f      	ldr	r7, [r5, #0]
 800b192:	6a21      	ldr	r1, [r4, #32]
 800b194:	602b      	str	r3, [r5, #0]
 800b196:	d030      	beq.n	800b1fa <__sflush_r+0x92>
 800b198:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	0759      	lsls	r1, r3, #29
 800b19e:	d505      	bpl.n	800b1ac <__sflush_r+0x44>
 800b1a0:	6863      	ldr	r3, [r4, #4]
 800b1a2:	1ad2      	subs	r2, r2, r3
 800b1a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b1a6:	b10b      	cbz	r3, 800b1ac <__sflush_r+0x44>
 800b1a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b1aa:	1ad2      	subs	r2, r2, r3
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1b0:	6a21      	ldr	r1, [r4, #32]
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	47b0      	blx	r6
 800b1b6:	1c43      	adds	r3, r0, #1
 800b1b8:	89a3      	ldrh	r3, [r4, #12]
 800b1ba:	d106      	bne.n	800b1ca <__sflush_r+0x62>
 800b1bc:	6829      	ldr	r1, [r5, #0]
 800b1be:	291d      	cmp	r1, #29
 800b1c0:	d82b      	bhi.n	800b21a <__sflush_r+0xb2>
 800b1c2:	4a2a      	ldr	r2, [pc, #168]	@ (800b26c <__sflush_r+0x104>)
 800b1c4:	40ca      	lsrs	r2, r1
 800b1c6:	07d6      	lsls	r6, r2, #31
 800b1c8:	d527      	bpl.n	800b21a <__sflush_r+0xb2>
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	6062      	str	r2, [r4, #4]
 800b1ce:	04d9      	lsls	r1, r3, #19
 800b1d0:	6922      	ldr	r2, [r4, #16]
 800b1d2:	6022      	str	r2, [r4, #0]
 800b1d4:	d504      	bpl.n	800b1e0 <__sflush_r+0x78>
 800b1d6:	1c42      	adds	r2, r0, #1
 800b1d8:	d101      	bne.n	800b1de <__sflush_r+0x76>
 800b1da:	682b      	ldr	r3, [r5, #0]
 800b1dc:	b903      	cbnz	r3, 800b1e0 <__sflush_r+0x78>
 800b1de:	6560      	str	r0, [r4, #84]	@ 0x54
 800b1e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1e2:	602f      	str	r7, [r5, #0]
 800b1e4:	b1b9      	cbz	r1, 800b216 <__sflush_r+0xae>
 800b1e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1ea:	4299      	cmp	r1, r3
 800b1ec:	d002      	beq.n	800b1f4 <__sflush_r+0x8c>
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f7ff f8a6 	bl	800a340 <_free_r>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1f8:	e00d      	b.n	800b216 <__sflush_r+0xae>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	47b0      	blx	r6
 800b200:	4602      	mov	r2, r0
 800b202:	1c50      	adds	r0, r2, #1
 800b204:	d1c9      	bne.n	800b19a <__sflush_r+0x32>
 800b206:	682b      	ldr	r3, [r5, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d0c6      	beq.n	800b19a <__sflush_r+0x32>
 800b20c:	2b1d      	cmp	r3, #29
 800b20e:	d001      	beq.n	800b214 <__sflush_r+0xac>
 800b210:	2b16      	cmp	r3, #22
 800b212:	d11e      	bne.n	800b252 <__sflush_r+0xea>
 800b214:	602f      	str	r7, [r5, #0]
 800b216:	2000      	movs	r0, #0
 800b218:	e022      	b.n	800b260 <__sflush_r+0xf8>
 800b21a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b21e:	b21b      	sxth	r3, r3
 800b220:	e01b      	b.n	800b25a <__sflush_r+0xf2>
 800b222:	690f      	ldr	r7, [r1, #16]
 800b224:	2f00      	cmp	r7, #0
 800b226:	d0f6      	beq.n	800b216 <__sflush_r+0xae>
 800b228:	0793      	lsls	r3, r2, #30
 800b22a:	680e      	ldr	r6, [r1, #0]
 800b22c:	bf08      	it	eq
 800b22e:	694b      	ldreq	r3, [r1, #20]
 800b230:	600f      	str	r7, [r1, #0]
 800b232:	bf18      	it	ne
 800b234:	2300      	movne	r3, #0
 800b236:	eba6 0807 	sub.w	r8, r6, r7
 800b23a:	608b      	str	r3, [r1, #8]
 800b23c:	f1b8 0f00 	cmp.w	r8, #0
 800b240:	dde9      	ble.n	800b216 <__sflush_r+0xae>
 800b242:	6a21      	ldr	r1, [r4, #32]
 800b244:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b246:	4643      	mov	r3, r8
 800b248:	463a      	mov	r2, r7
 800b24a:	4628      	mov	r0, r5
 800b24c:	47b0      	blx	r6
 800b24e:	2800      	cmp	r0, #0
 800b250:	dc08      	bgt.n	800b264 <__sflush_r+0xfc>
 800b252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b25a:	81a3      	strh	r3, [r4, #12]
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b264:	4407      	add	r7, r0
 800b266:	eba8 0800 	sub.w	r8, r8, r0
 800b26a:	e7e7      	b.n	800b23c <__sflush_r+0xd4>
 800b26c:	20400001 	.word	0x20400001

0800b270 <_fflush_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	690b      	ldr	r3, [r1, #16]
 800b274:	4605      	mov	r5, r0
 800b276:	460c      	mov	r4, r1
 800b278:	b913      	cbnz	r3, 800b280 <_fflush_r+0x10>
 800b27a:	2500      	movs	r5, #0
 800b27c:	4628      	mov	r0, r5
 800b27e:	bd38      	pop	{r3, r4, r5, pc}
 800b280:	b118      	cbz	r0, 800b28a <_fflush_r+0x1a>
 800b282:	6a03      	ldr	r3, [r0, #32]
 800b284:	b90b      	cbnz	r3, 800b28a <_fflush_r+0x1a>
 800b286:	f7fd ff1f 	bl	80090c8 <__sinit>
 800b28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d0f3      	beq.n	800b27a <_fflush_r+0xa>
 800b292:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b294:	07d0      	lsls	r0, r2, #31
 800b296:	d404      	bmi.n	800b2a2 <_fflush_r+0x32>
 800b298:	0599      	lsls	r1, r3, #22
 800b29a:	d402      	bmi.n	800b2a2 <_fflush_r+0x32>
 800b29c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b29e:	f7fe f9c6 	bl	800962e <__retarget_lock_acquire_recursive>
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	f7ff ff5f 	bl	800b168 <__sflush_r>
 800b2aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2ac:	07da      	lsls	r2, r3, #31
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	d4e4      	bmi.n	800b27c <_fflush_r+0xc>
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	059b      	lsls	r3, r3, #22
 800b2b6:	d4e1      	bmi.n	800b27c <_fflush_r+0xc>
 800b2b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2ba:	f7fe f9b9 	bl	8009630 <__retarget_lock_release_recursive>
 800b2be:	e7dd      	b.n	800b27c <_fflush_r+0xc>

0800b2c0 <fiprintf>:
 800b2c0:	b40e      	push	{r1, r2, r3}
 800b2c2:	b503      	push	{r0, r1, lr}
 800b2c4:	4601      	mov	r1, r0
 800b2c6:	ab03      	add	r3, sp, #12
 800b2c8:	4805      	ldr	r0, [pc, #20]	@ (800b2e0 <fiprintf+0x20>)
 800b2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ce:	6800      	ldr	r0, [r0, #0]
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	f7ff fe31 	bl	800af38 <_vfiprintf_r>
 800b2d6:	b002      	add	sp, #8
 800b2d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2dc:	b003      	add	sp, #12
 800b2de:	4770      	bx	lr
 800b2e0:	2000001c 	.word	0x2000001c

0800b2e4 <__swhatbuf_r>:
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	460c      	mov	r4, r1
 800b2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ec:	2900      	cmp	r1, #0
 800b2ee:	b096      	sub	sp, #88	@ 0x58
 800b2f0:	4615      	mov	r5, r2
 800b2f2:	461e      	mov	r6, r3
 800b2f4:	da0d      	bge.n	800b312 <__swhatbuf_r+0x2e>
 800b2f6:	89a3      	ldrh	r3, [r4, #12]
 800b2f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b2fc:	f04f 0100 	mov.w	r1, #0
 800b300:	bf14      	ite	ne
 800b302:	2340      	movne	r3, #64	@ 0x40
 800b304:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b308:	2000      	movs	r0, #0
 800b30a:	6031      	str	r1, [r6, #0]
 800b30c:	602b      	str	r3, [r5, #0]
 800b30e:	b016      	add	sp, #88	@ 0x58
 800b310:	bd70      	pop	{r4, r5, r6, pc}
 800b312:	466a      	mov	r2, sp
 800b314:	f000 f862 	bl	800b3dc <_fstat_r>
 800b318:	2800      	cmp	r0, #0
 800b31a:	dbec      	blt.n	800b2f6 <__swhatbuf_r+0x12>
 800b31c:	9901      	ldr	r1, [sp, #4]
 800b31e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b322:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b326:	4259      	negs	r1, r3
 800b328:	4159      	adcs	r1, r3
 800b32a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b32e:	e7eb      	b.n	800b308 <__swhatbuf_r+0x24>

0800b330 <__smakebuf_r>:
 800b330:	898b      	ldrh	r3, [r1, #12]
 800b332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b334:	079d      	lsls	r5, r3, #30
 800b336:	4606      	mov	r6, r0
 800b338:	460c      	mov	r4, r1
 800b33a:	d507      	bpl.n	800b34c <__smakebuf_r+0x1c>
 800b33c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	6123      	str	r3, [r4, #16]
 800b344:	2301      	movs	r3, #1
 800b346:	6163      	str	r3, [r4, #20]
 800b348:	b003      	add	sp, #12
 800b34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b34c:	ab01      	add	r3, sp, #4
 800b34e:	466a      	mov	r2, sp
 800b350:	f7ff ffc8 	bl	800b2e4 <__swhatbuf_r>
 800b354:	9f00      	ldr	r7, [sp, #0]
 800b356:	4605      	mov	r5, r0
 800b358:	4639      	mov	r1, r7
 800b35a:	4630      	mov	r0, r6
 800b35c:	f7ff f864 	bl	800a428 <_malloc_r>
 800b360:	b948      	cbnz	r0, 800b376 <__smakebuf_r+0x46>
 800b362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b366:	059a      	lsls	r2, r3, #22
 800b368:	d4ee      	bmi.n	800b348 <__smakebuf_r+0x18>
 800b36a:	f023 0303 	bic.w	r3, r3, #3
 800b36e:	f043 0302 	orr.w	r3, r3, #2
 800b372:	81a3      	strh	r3, [r4, #12]
 800b374:	e7e2      	b.n	800b33c <__smakebuf_r+0xc>
 800b376:	89a3      	ldrh	r3, [r4, #12]
 800b378:	6020      	str	r0, [r4, #0]
 800b37a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b37e:	81a3      	strh	r3, [r4, #12]
 800b380:	9b01      	ldr	r3, [sp, #4]
 800b382:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b386:	b15b      	cbz	r3, 800b3a0 <__smakebuf_r+0x70>
 800b388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b38c:	4630      	mov	r0, r6
 800b38e:	f000 f837 	bl	800b400 <_isatty_r>
 800b392:	b128      	cbz	r0, 800b3a0 <__smakebuf_r+0x70>
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	f023 0303 	bic.w	r3, r3, #3
 800b39a:	f043 0301 	orr.w	r3, r3, #1
 800b39e:	81a3      	strh	r3, [r4, #12]
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	431d      	orrs	r5, r3
 800b3a4:	81a5      	strh	r5, [r4, #12]
 800b3a6:	e7cf      	b.n	800b348 <__smakebuf_r+0x18>

0800b3a8 <memmove>:
 800b3a8:	4288      	cmp	r0, r1
 800b3aa:	b510      	push	{r4, lr}
 800b3ac:	eb01 0402 	add.w	r4, r1, r2
 800b3b0:	d902      	bls.n	800b3b8 <memmove+0x10>
 800b3b2:	4284      	cmp	r4, r0
 800b3b4:	4623      	mov	r3, r4
 800b3b6:	d807      	bhi.n	800b3c8 <memmove+0x20>
 800b3b8:	1e43      	subs	r3, r0, #1
 800b3ba:	42a1      	cmp	r1, r4
 800b3bc:	d008      	beq.n	800b3d0 <memmove+0x28>
 800b3be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3c6:	e7f8      	b.n	800b3ba <memmove+0x12>
 800b3c8:	4402      	add	r2, r0
 800b3ca:	4601      	mov	r1, r0
 800b3cc:	428a      	cmp	r2, r1
 800b3ce:	d100      	bne.n	800b3d2 <memmove+0x2a>
 800b3d0:	bd10      	pop	{r4, pc}
 800b3d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3da:	e7f7      	b.n	800b3cc <memmove+0x24>

0800b3dc <_fstat_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4d07      	ldr	r5, [pc, #28]	@ (800b3fc <_fstat_r+0x20>)
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	4608      	mov	r0, r1
 800b3e6:	4611      	mov	r1, r2
 800b3e8:	602b      	str	r3, [r5, #0]
 800b3ea:	f7f8 f917 	bl	800361c <_fstat>
 800b3ee:	1c43      	adds	r3, r0, #1
 800b3f0:	d102      	bne.n	800b3f8 <_fstat_r+0x1c>
 800b3f2:	682b      	ldr	r3, [r5, #0]
 800b3f4:	b103      	cbz	r3, 800b3f8 <_fstat_r+0x1c>
 800b3f6:	6023      	str	r3, [r4, #0]
 800b3f8:	bd38      	pop	{r3, r4, r5, pc}
 800b3fa:	bf00      	nop
 800b3fc:	200011a8 	.word	0x200011a8

0800b400 <_isatty_r>:
 800b400:	b538      	push	{r3, r4, r5, lr}
 800b402:	4d06      	ldr	r5, [pc, #24]	@ (800b41c <_isatty_r+0x1c>)
 800b404:	2300      	movs	r3, #0
 800b406:	4604      	mov	r4, r0
 800b408:	4608      	mov	r0, r1
 800b40a:	602b      	str	r3, [r5, #0]
 800b40c:	f7f8 f916 	bl	800363c <_isatty>
 800b410:	1c43      	adds	r3, r0, #1
 800b412:	d102      	bne.n	800b41a <_isatty_r+0x1a>
 800b414:	682b      	ldr	r3, [r5, #0]
 800b416:	b103      	cbz	r3, 800b41a <_isatty_r+0x1a>
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	bd38      	pop	{r3, r4, r5, pc}
 800b41c:	200011a8 	.word	0x200011a8

0800b420 <_sbrk_r>:
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	4d06      	ldr	r5, [pc, #24]	@ (800b43c <_sbrk_r+0x1c>)
 800b424:	2300      	movs	r3, #0
 800b426:	4604      	mov	r4, r0
 800b428:	4608      	mov	r0, r1
 800b42a:	602b      	str	r3, [r5, #0]
 800b42c:	f7f8 f91e 	bl	800366c <_sbrk>
 800b430:	1c43      	adds	r3, r0, #1
 800b432:	d102      	bne.n	800b43a <_sbrk_r+0x1a>
 800b434:	682b      	ldr	r3, [r5, #0]
 800b436:	b103      	cbz	r3, 800b43a <_sbrk_r+0x1a>
 800b438:	6023      	str	r3, [r4, #0]
 800b43a:	bd38      	pop	{r3, r4, r5, pc}
 800b43c:	200011a8 	.word	0x200011a8

0800b440 <abort>:
 800b440:	b508      	push	{r3, lr}
 800b442:	2006      	movs	r0, #6
 800b444:	f000 f88c 	bl	800b560 <raise>
 800b448:	2001      	movs	r0, #1
 800b44a:	f7f8 f8b3 	bl	80035b4 <_exit>

0800b44e <_calloc_r>:
 800b44e:	b570      	push	{r4, r5, r6, lr}
 800b450:	fba1 5402 	umull	r5, r4, r1, r2
 800b454:	b934      	cbnz	r4, 800b464 <_calloc_r+0x16>
 800b456:	4629      	mov	r1, r5
 800b458:	f7fe ffe6 	bl	800a428 <_malloc_r>
 800b45c:	4606      	mov	r6, r0
 800b45e:	b928      	cbnz	r0, 800b46c <_calloc_r+0x1e>
 800b460:	4630      	mov	r0, r6
 800b462:	bd70      	pop	{r4, r5, r6, pc}
 800b464:	220c      	movs	r2, #12
 800b466:	6002      	str	r2, [r0, #0]
 800b468:	2600      	movs	r6, #0
 800b46a:	e7f9      	b.n	800b460 <_calloc_r+0x12>
 800b46c:	462a      	mov	r2, r5
 800b46e:	4621      	mov	r1, r4
 800b470:	f7fd ffda 	bl	8009428 <memset>
 800b474:	e7f4      	b.n	800b460 <_calloc_r+0x12>

0800b476 <__ascii_mbtowc>:
 800b476:	b082      	sub	sp, #8
 800b478:	b901      	cbnz	r1, 800b47c <__ascii_mbtowc+0x6>
 800b47a:	a901      	add	r1, sp, #4
 800b47c:	b142      	cbz	r2, 800b490 <__ascii_mbtowc+0x1a>
 800b47e:	b14b      	cbz	r3, 800b494 <__ascii_mbtowc+0x1e>
 800b480:	7813      	ldrb	r3, [r2, #0]
 800b482:	600b      	str	r3, [r1, #0]
 800b484:	7812      	ldrb	r2, [r2, #0]
 800b486:	1e10      	subs	r0, r2, #0
 800b488:	bf18      	it	ne
 800b48a:	2001      	movne	r0, #1
 800b48c:	b002      	add	sp, #8
 800b48e:	4770      	bx	lr
 800b490:	4610      	mov	r0, r2
 800b492:	e7fb      	b.n	800b48c <__ascii_mbtowc+0x16>
 800b494:	f06f 0001 	mvn.w	r0, #1
 800b498:	e7f8      	b.n	800b48c <__ascii_mbtowc+0x16>

0800b49a <_realloc_r>:
 800b49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49e:	4607      	mov	r7, r0
 800b4a0:	4614      	mov	r4, r2
 800b4a2:	460d      	mov	r5, r1
 800b4a4:	b921      	cbnz	r1, 800b4b0 <_realloc_r+0x16>
 800b4a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4aa:	4611      	mov	r1, r2
 800b4ac:	f7fe bfbc 	b.w	800a428 <_malloc_r>
 800b4b0:	b92a      	cbnz	r2, 800b4be <_realloc_r+0x24>
 800b4b2:	f7fe ff45 	bl	800a340 <_free_r>
 800b4b6:	4625      	mov	r5, r4
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4be:	f000 f86b 	bl	800b598 <_malloc_usable_size_r>
 800b4c2:	4284      	cmp	r4, r0
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	d802      	bhi.n	800b4ce <_realloc_r+0x34>
 800b4c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4cc:	d8f4      	bhi.n	800b4b8 <_realloc_r+0x1e>
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	f7fe ffa9 	bl	800a428 <_malloc_r>
 800b4d6:	4680      	mov	r8, r0
 800b4d8:	b908      	cbnz	r0, 800b4de <_realloc_r+0x44>
 800b4da:	4645      	mov	r5, r8
 800b4dc:	e7ec      	b.n	800b4b8 <_realloc_r+0x1e>
 800b4de:	42b4      	cmp	r4, r6
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	bf28      	it	cs
 800b4e6:	4632      	movcs	r2, r6
 800b4e8:	f7fe f8a3 	bl	8009632 <memcpy>
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	f7fe ff26 	bl	800a340 <_free_r>
 800b4f4:	e7f1      	b.n	800b4da <_realloc_r+0x40>

0800b4f6 <__ascii_wctomb>:
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	4608      	mov	r0, r1
 800b4fa:	b141      	cbz	r1, 800b50e <__ascii_wctomb+0x18>
 800b4fc:	2aff      	cmp	r2, #255	@ 0xff
 800b4fe:	d904      	bls.n	800b50a <__ascii_wctomb+0x14>
 800b500:	228a      	movs	r2, #138	@ 0x8a
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	f04f 30ff 	mov.w	r0, #4294967295
 800b508:	4770      	bx	lr
 800b50a:	700a      	strb	r2, [r1, #0]
 800b50c:	2001      	movs	r0, #1
 800b50e:	4770      	bx	lr

0800b510 <_raise_r>:
 800b510:	291f      	cmp	r1, #31
 800b512:	b538      	push	{r3, r4, r5, lr}
 800b514:	4605      	mov	r5, r0
 800b516:	460c      	mov	r4, r1
 800b518:	d904      	bls.n	800b524 <_raise_r+0x14>
 800b51a:	2316      	movs	r3, #22
 800b51c:	6003      	str	r3, [r0, #0]
 800b51e:	f04f 30ff 	mov.w	r0, #4294967295
 800b522:	bd38      	pop	{r3, r4, r5, pc}
 800b524:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b526:	b112      	cbz	r2, 800b52e <_raise_r+0x1e>
 800b528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b52c:	b94b      	cbnz	r3, 800b542 <_raise_r+0x32>
 800b52e:	4628      	mov	r0, r5
 800b530:	f000 f830 	bl	800b594 <_getpid_r>
 800b534:	4622      	mov	r2, r4
 800b536:	4601      	mov	r1, r0
 800b538:	4628      	mov	r0, r5
 800b53a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b53e:	f000 b817 	b.w	800b570 <_kill_r>
 800b542:	2b01      	cmp	r3, #1
 800b544:	d00a      	beq.n	800b55c <_raise_r+0x4c>
 800b546:	1c59      	adds	r1, r3, #1
 800b548:	d103      	bne.n	800b552 <_raise_r+0x42>
 800b54a:	2316      	movs	r3, #22
 800b54c:	6003      	str	r3, [r0, #0]
 800b54e:	2001      	movs	r0, #1
 800b550:	e7e7      	b.n	800b522 <_raise_r+0x12>
 800b552:	2100      	movs	r1, #0
 800b554:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b558:	4620      	mov	r0, r4
 800b55a:	4798      	blx	r3
 800b55c:	2000      	movs	r0, #0
 800b55e:	e7e0      	b.n	800b522 <_raise_r+0x12>

0800b560 <raise>:
 800b560:	4b02      	ldr	r3, [pc, #8]	@ (800b56c <raise+0xc>)
 800b562:	4601      	mov	r1, r0
 800b564:	6818      	ldr	r0, [r3, #0]
 800b566:	f7ff bfd3 	b.w	800b510 <_raise_r>
 800b56a:	bf00      	nop
 800b56c:	2000001c 	.word	0x2000001c

0800b570 <_kill_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	4d07      	ldr	r5, [pc, #28]	@ (800b590 <_kill_r+0x20>)
 800b574:	2300      	movs	r3, #0
 800b576:	4604      	mov	r4, r0
 800b578:	4608      	mov	r0, r1
 800b57a:	4611      	mov	r1, r2
 800b57c:	602b      	str	r3, [r5, #0]
 800b57e:	f7f8 f809 	bl	8003594 <_kill>
 800b582:	1c43      	adds	r3, r0, #1
 800b584:	d102      	bne.n	800b58c <_kill_r+0x1c>
 800b586:	682b      	ldr	r3, [r5, #0]
 800b588:	b103      	cbz	r3, 800b58c <_kill_r+0x1c>
 800b58a:	6023      	str	r3, [r4, #0]
 800b58c:	bd38      	pop	{r3, r4, r5, pc}
 800b58e:	bf00      	nop
 800b590:	200011a8 	.word	0x200011a8

0800b594 <_getpid_r>:
 800b594:	f7f7 bff6 	b.w	8003584 <_getpid>

0800b598 <_malloc_usable_size_r>:
 800b598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b59c:	1f18      	subs	r0, r3, #4
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	bfbc      	itt	lt
 800b5a2:	580b      	ldrlt	r3, [r1, r0]
 800b5a4:	18c0      	addlt	r0, r0, r3
 800b5a6:	4770      	bx	lr

0800b5a8 <_init>:
 800b5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5aa:	bf00      	nop
 800b5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ae:	bc08      	pop	{r3}
 800b5b0:	469e      	mov	lr, r3
 800b5b2:	4770      	bx	lr

0800b5b4 <_fini>:
 800b5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b6:	bf00      	nop
 800b5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ba:	bc08      	pop	{r3}
 800b5bc:	469e      	mov	lr, r3
 800b5be:	4770      	bx	lr
